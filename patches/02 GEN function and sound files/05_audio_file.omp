; OM File Header - Saved 2013/10/29 22:34:29
; (6.0602 :patc (om-make-point 281 670) (om-make-point 400 40) (om-make-point 1051 571) "" 183 0 nil "2013/09/03 9:38:32")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../out-files/htpsf_D.aiff" "../../../out-files/htpsf_F.aiff" "../../../out-files/htpsf_E.aiff" "../../../in-files/in_1.aiff" "../../../out-files/htpsf_B.aiff" "../../in-files/count.aiff" "../../../out-files/htpsf_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "05_audio_file" (quote ((om-load-editor-box1 "htpsf_D.aiff 2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 364 303) (om-make-point 128 63) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "htpsf_D" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "htpsf_D.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx player)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "list21 2" (quote list) (quote nil) (om-make-point 698 76) (om-make-point 249 30) "/OMChroma_Tutorial/in-files/count.aiff" "\"/OMChroma_Tutorial/in-files/count.aiff\"" nil) (om-load-boxcall (quote bastype) "aux4 8" (quote t) (quote nil) (om-make-point 901 206) (om-make-point 71 30) "htpsf_F" "\"htpsf_F\"" nil) (om-load-editor-box1 "SMPL-1 6" (quote smpl-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :xpf :afil :skip :aenv :wxin)" "Keyword input" (quote :afil) nil nil))) (om-make-point 870 148) (om-make-point 108 54) (let ((rep (if (find-class (quote smpl-1) nil) (let ((rep (make-instance (quote smpl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote afil)) "/OMChroma_Tutorial/in-files/count.aiff")) (when (member (quote skip) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list "/OMChroma_Tutorial/in-files/count.aiff") (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 949 92) (om-make-point 662 620) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil) (om-load-editor-box1 "htpsf_F.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 863 298) (om-make-point 128 63) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "htpsf_F" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "htpsf_F.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx player)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE 6" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :patch :sound :duration)" "Keyword input" (quote :name) nil nil))) (om-make-point 863 236) nil nil nil nil 1) (om-load-boxcomment "comment 12" (om-make-point 44 88) (quote "F") "" (om-make-point 867 99) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4 6" (quote t) (quote nil) (om-make-point 741 209) (om-make-point 72 30) "htpsf_E" "\"htpsf_E\"" nil) (om-load-boxcomment "comment 11" (om-make-point 44 88) (quote "E") "" (om-make-point 707 96) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE 5" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :patch :sound :duration)" "Keyword input" (quote :name) nil nil))) (om-make-point 703 239) nil nil nil nil 1) (om-load-editor-box1 "htpsf_E.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 703 302) (om-make-point 128 63) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "htpsf_E" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "htpsf_E.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx player)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil) (om-load-editor-box1 "SMPL-1 5" (quote smpl-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :xpf :afil :skip :aenv :wxin)" "Keyword input" (quote :afil) nil nil))) (om-make-point 710 151) (om-make-point 108 54) (let ((rep (if (find-class (quote smpl-1) nil) (let ((rep (make-instance (quote smpl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "count" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "count" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 949 92) (om-make-point 662 620) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil) (om-load-boxcomment "comment 10" (om-make-point 33 352) (quote "|$|$|$|$|$") "" (om-make-point 832 120) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 44 88) (quote "D") "" (om-make-point 530 98) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE 4" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :patch :sound :duration)" "Keyword input" (quote :name) nil nil))) (om-make-point 525 239) nil nil nil nil 1) (om-load-editor-box1 "htpsf_D.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 525 301) (om-make-point 128 63) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "htpsf_D" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "htpsf_D.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx player)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil) (om-load-editor-box1 "SMPL-1 4" (quote smpl-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :xpf :afil :skip :aenv :wxin)" "Keyword input" (quote :afil) nil nil))) (om-make-point 532 151) (om-make-point 108 54) (let ((rep (if (find-class (quote smpl-1) nil) (let ((rep (make-instance (quote smpl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote afil)) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device nil :host nil :name "in_1" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "in_1.aiff") (set-tonalite newobj nil) newobj))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device nil :host nil :name "in_1" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "in_1.aiff") (set-tonalite newobj nil) newobj)) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 949 92) (om-make-point 662 620) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux4 7" (quote t) (quote nil) (om-make-point 563 209) (om-make-point 73 30) "htpsf_D" "\"htpsf_D\"" nil) (om-load-boxcomment "comment 8" (om-make-point 33 352) (quote "|$|$|$|$|$|$|") "" (om-make-point 654 35) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4 5" (quote t) (quote nil) (om-make-point 441 104) (om-make-point 34 30) 11 "11" nil) (om-load-boxcomment "comment 7" (om-make-point 33 352) (quote "|$|$|$|$|$|$|") "" (om-make-point 496 40) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4 4" (quote t) (quote nil) (om-make-point 402 209) (om-make-point 73 30) "htpsf_C" "\"htpsf_C\"" nil) (om-load-editor-box1 "SMPL-1 3" (quote smpl-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :xpf :afil :skip :aenv :wxin)" "Keyword input" (quote :afil) nil nil))) (om-make-point 371 151) (om-make-point 108 54) (let ((rep (if (find-class (quote smpl-1) nil) (let ((rep (make-instance (quote smpl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 11)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list 11) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 949 92) (om-make-point 662 620) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE 3" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :patch :sound :duration)" "Keyword input" (quote :name) nil nil))) (om-make-point 364 239) nil nil nil nil 1) (om-load-boxcomment "comment 6" (om-make-point 44 88) (quote "C") "" (om-make-point 369 100) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 33 352) (quote "|$|$|$|$|$|$|") "" (om-make-point 329 44) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4 3" (quote t) (quote nil) (om-make-point 229 107) (om-make-point 95 30) "htpsf_A.aiff" "\"htpsf_A.aiff\"" nil) (om-load-boxcall (quote bastype) "aux4 2" (quote t) (quote nil) (om-make-point 230 213) (om-make-point 73 30) "htpsf_B" "\"htpsf_B\"" nil) (om-load-boxcomment "comment 4" (om-make-point 44 88) (quote "B") "" (om-make-point 194 101) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :patch :sound :duration)" "Keyword input" (quote :name) nil nil))) (om-make-point 192 243) nil nil nil nil 1) (om-load-editor-box1 "htpsf_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 192 305) (om-make-point 128 63) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "htpsf_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "htpsf_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx player)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil) (om-load-editor-box1 "SMPL-1 2" (quote smpl-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :xpf :afil :skip :aenv :wxin)" "Keyword input" (quote :afil) nil nil))) (om-make-point 199 155) (om-make-point 108 54) (let ((rep (if (find-class (quote smpl-1) nil) (let ((rep (make-instance (quote smpl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote afil)) "htpsf_A.aiff")) (when (member (quote skip) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list "htpsf_A.aiff") (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil) (om-load-boxcomment "comment 3" (om-make-point 33 352) (quote "|$|$|$|$|$|$|") "" (om-make-point 168 44) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 44 88) (quote "A") "" (om-make-point 24 99) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 298 34) (quote "Tutorial How to pass sound file") "" (om-make-point 58 0) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 49 212) (om-make-point 73 30) "htpsf_A" "\"htpsf_A\"" nil) (om-load-editor-box1 "count.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 561 69) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "count" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "count.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport microplay zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode player)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 nil 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0 (quote :midishare))) t nil nil nil) (om-load-editor-box1 "SMPL-1" (quote smpl-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :xpf :afil :skip :aenv :wxin)" "Keyword input" (quote :afil) nil nil))) (om-make-point 18 154) (om-make-point 108 54) (let ((rep (if (find-class (quote smpl-1) nil) (let ((rep (make-instance (quote smpl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "in_1" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "in_1" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil) (om-load-editor-box1 "htpsf_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 11 304) (om-make-point 128 63) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "htpsf_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "htpsf_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom microplay inport outport deltapict cmnpref staff fontsize approx player)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :patch :sound :duration)" "Keyword input" (quote :name) nil nil))) (om-make-point 11 242) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list21" (quote list) (quote nil) (om-make-point 682 45) (om-make-point 265 30) (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "count" :type "aiff") "#P\"/OMChroma_Tutorial/in-files/count.aiff\"" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 46 61) (om-make-point 83 30) "count.aiff" "\"count.aiff\"" nil) (om-load-boxcall (quote genfun) "INFILE2" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "NAME" nil))) (om-make-point 64 95) nil nil nil nil 1))) (quote ((23 0 0 0 nil 0) (1 0 3 4 nil 0) (5 0 4 0 nil 0) (3 0 5 0 nil 0) (2 0 5 1 nil 0) (11 0 9 0 nil 0) (7 0 9 1 nil 0) (9 0 10 0 nil 0) (40 0 11 4 nil 2) (16 0 14 0 nil 0) (17 0 14 1 nil 0) (14 0 15 0 nil 0) (36 0 16 4 nil 0) (19 0 22 4 nil 0) (22 0 23 0 nil 0) (21 0 23 1 nil 0) (31 0 29 0 nil 0) (27 0 29 1 nil 0) (29 0 30 0 nil 0) (26 0 31 4 nil 0) (42 0 37 4 nil 0) (39 0 38 0 nil 0) (37 0 39 0 nil 0) (35 0 39 1 nil 0) (41 0 42 0 nil 0))) nil 6.0602))
