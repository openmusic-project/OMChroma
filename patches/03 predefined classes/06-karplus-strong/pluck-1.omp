; OM File Header - Saved 2013/10/29 22:34:30
; (6.0602 :patc (om-make-point 280 210) (om-make-point 308 86) (om-make-point 1138 524) "" 183 0 "2012/11/28 22:07:29" "2013/08/30 16:10:48")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../../out-files/PLUCK-1_B.aiff" "../../../../../out-files/PLUCK-1_C.aiff" "../../../../../out-files/PLUCK-1_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "pluck-1" (quote ((om-load-boxcomment "comment 5" (om-make-point 33 396) (quote "|$|$|$|$|$|$|$") "" (om-make-point 798 38) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 490 103) (om-make-point 308 30) (list 27.5 55 110 220 440 880 1760 3520 7040 14080) "(27.5 55 110 220 440 880 1760 3520 7040 14080)" nil) (om-load-boxcomment "comment 16" (om-make-point 66 34) (quote "dec") "" (om-make-point 717 140) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 725 165) (om-make-point 38 30) 0.9 "0.9" nil) (om-load-boxcomment "comment 15" (om-make-point 44 88) (quote "B") "" (om-make-point 458 131) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 2" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 494 137) nil nil nil "C#ed") (om-load-boxcomment "comment 14" (om-make-point 48 34) (quote "freq") "" (om-make-point 624 75) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "PLUCK-1 3" (quote pluck-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil))) (om-make-point 454 211) (om-make-point 317 60) (let ((rep (if (find-class (quote pluck-1) nil) (let ((rep (make-instance (quote pluck-1) :numcols 10))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 5 10 15 20 25 30 35 40 45))) (when (member (quote durs) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 5)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 27.5 55 110 220 440 880 1760 3520 7040 14080))) (when (member (quote dec) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.9)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 5 10 15 20 25 30 35 40 45) (list 5 5 5 5 5 5 5 5 5 5) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 27.5 55 110 220 440 880 1760 3520 7040 14080) (list 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 54 40))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 563 162) (om-make-point 27 30) 5 "5" nil) (om-load-boxcomment "comment 13" (om-make-point 51 34) (quote "durs") "" (om-make-point 554 138) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "PLUCK-1_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 513 280) (om-make-point 267 60) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "PLUCK-1_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PLUCK-1_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 298 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 3" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 94 30) "PLUCK-1_B" "\"PLUCK-1_B\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 458 276) (om-make-point 51 67) nil nil "Synt") (om-load-boxcomment "comment 12" (om-make-point 33 396) (quote "|$|$|$|$|$|$|$") "" (om-make-point 421 46) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 851 151) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 917 151) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 941 115) (om-make-point 41 30) 110 "110" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1018 114) (om-make-point 38 30) 0.9 "0.9" nil) (om-load-editor-box1 "PLUCK-1 2" (quote pluck-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil))) (om-make-point 834 210) (om-make-point 241 59) (let ((rep (if (find-class (quote pluck-1) nil) (let ((rep (make-instance (quote pluck-1) :numcols 5))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 3 7 15 31))) (when (member (quote durs) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (list 1 2 4 8 16))) (when (member (quote amp) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 110)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.9)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 3 7 15) (list 1 2 4 8 16) (list -6.0 -6.0 -6.0 -6.0 -6.0) (list 110 110 110 110 110) (list 0.9 0.9 0.9 0.9 0.9))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 54 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 839 114) (om-make-point 88 30) (list 1 2 4 8 16) "(1 2 4 8 16)" nil) (om-load-boxcomment "comment 4" (om-make-point 43 88) (quote "C") "" (om-make-point 816 136) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 51 34) (quote "durs") "" (om-make-point 859 89) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 94 34) (quote "frequency") "" (om-make-point 921 89) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 66 34) (quote "dec %") "" (om-make-point 1011 89) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "PLUCK-1_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 896 277) (om-make-point 175 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "PLUCK-1_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PLUCK-1_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 2" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 94 30) "PLUCK-1_C" "\"PLUCK-1_C\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 830 272) (om-make-point 51 67) nil nil "Synt") (om-load-editor-box1 "SINGLE-ITEM-LIST" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 17 47) (om-make-point 398 91) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 382 58) "untitled" :range (quote ("(0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009)" "(0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09)" "(0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9)"))))) (setf (di-data rep) (quote ((0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009) (0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09) (0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9)))) (om-set-selected-item-index rep 0) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote abstraction) "textfile" (om-load-patch-abs1 "textfile" (quote ((om-load-boxout "output" 0 (om-make-point 168 204) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 60 12) (om-make-point 332 177) (load-buffer-textfile (quote ("(0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009)" "(0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09)" "(0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil t))) (quote ((1 1 0 0 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 332 134) nil nil nil nil) (om-load-boxcall (quote abstraction) "Synt" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 94 30) "PLUCK-1_A" "\"PLUCK-1_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 57 282) (om-make-point 51 67) nil nil "Synt") (om-load-editor-box1 "PLUCK-1_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 112 286) (om-make-point 267 60) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "PLUCK-1_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PLUCK-1_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 298 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 11" (om-make-point 43 34) (quote "dec") "" (om-make-point 155 30) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 10" (om-make-point 48 34) (quote "freq") "" (om-make-point 242 142) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 51 34) (quote "durs") "" (om-make-point 153 144) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 142 34) (quote "Tutorial Pluck-1") "" (om-make-point 55 0) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 44 88) (quote "A") "" (om-make-point 57 137) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 93 143) nil nil nil "C#ed") (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 162 168) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 248 168) (om-make-point 41 30) 220 "220" nil) (om-load-editor-box1 "PLUCK-1" (quote pluck-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil))) (om-make-point 53 217) (om-make-point 317 60) (let ((rep (if (find-class (quote pluck-1) nil) (let ((rep (make-instance (quote pluck-1) :numcols 9))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 5 10 15 20 25 30 35 40))) (when (member (quote durs) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 5)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 220)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote dec)) (list 0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 5 10 15 20 25 30 35 40) (list 5 5 5 5 5 5 5 5 5) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 220 220 220 220 220 220 220 220 220) (list 0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 54 40))) nil nil nil nil))) (quote ((8 0 5 0 nil 3) (1 0 5 1 nil 1) (5 0 7 1 nil 2) (5 1 7 4 nil 1) (8 0 7 5 nil 3) (1 0 7 7 nil 1) (3 0 7 8 nil 0) (11 0 10 0 nil 0) (7 0 11 0 nil 0) (18 0 13 0 nil 1) (18 0 14 1 nil 1) (13 0 17 1 nil 0) (14 0 17 4 nil 0) (18 0 17 5 nil 1) (15 0 17 7 nil 2) (16 0 17 8 nil 0) (24 0 23 0 nil 0) (17 0 24 0 nil 0) (26 0 25 0 nil 4) (37 0 27 0 nil 0) (27 0 28 0 nil 0) (35 0 34 0 nil 3) (25 0 34 1 nil 1) (34 0 37 1 nil 2) (34 1 37 4 nil 1) (35 0 37 5 nil 3) (36 0 37 7 nil 0) (25 0 37 8 nil 1))) nil 6.0602))
