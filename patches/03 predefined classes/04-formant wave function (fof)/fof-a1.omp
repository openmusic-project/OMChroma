; OM File Header - Saved 2013/10/29 22:34:30
; (6.0602 :patc (om-make-point 226 10) (om-make-point 56 223) (om-make-point 1285 372) "" 183 0 "2012/12/09 10:23:44" "2012/12/21 10:01:17")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../out-files/fof-a1_B.aiff" "../../../out-files/fof-a1_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "fof-a1" (quote ((om-load-boxcomment "comment 30" (om-make-point 28 253) (quote "|$|$|$|$$") "" (om-make-point 546 55) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 636 132) nil nil nil nil 1) (om-load-boxcomment "comment 29" (om-make-point 51 34) (quote "edel") "" (om-make-point 759 66) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 28" (om-make-point 51 34) (quote "phs") "" (om-make-point 1004 64) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 960 89) (om-make-point 132 30) (list 0 0 0 0.33 0 0.25) "(0 0 0 0.33 0 0.25 )" nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 740 90) (om-make-point 92 30) (list 0 0 2 2 4 4) "(0 0 2 2 4 4)" nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 683 143) (om-make-point 41 30) 220 "220" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 905 142) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 835 90) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 958 142) (om-make-point 45 30) 0.05 "0.05" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 857 142) (om-make-point 45 30) 0.03 "0.03" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1058 142) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 27" (om-make-point 51 34) (quote "skip") "" (om-make-point 1049 115) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 26" (om-make-point 48 34) (quote "oct") "" (om-make-point 1005 115) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1010 142) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 13" (om-make-point 48 34) (quote "wout") "" (om-make-point 958 116) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 12" (om-make-point 48 34) (quote "wdur") "" (om-make-point 907 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 11" (om-make-point 48 34) (quote "win") "" (om-make-point 859 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 811 140) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 728 143) (om-make-point 41 30) 500 "500" nil) (om-load-boxcall (quote abstraction) "Synt" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 101) (om-make-point 79 30) "fof-a1_B" "\"fof-a1_B\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.06001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 570 113) (om-make-point 51 67) nil nil "Synt") (om-load-editor-box1 "fof-a1_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 572 183) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "fof-a1_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fof-a1_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 410 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 10" (om-make-point 40 31) (quote "bw") "" (om-make-point 770 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 48 34) (quote "aenv") "" (om-make-point 808 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 47 30) (quote "freq") "" (om-make-point 727 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 30 26) (quote "f0") "" (om-make-point 689 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 773 143) (om-make-point 34 30) 64 "64" nil) (om-load-boxcomment "comment 6" (om-make-point 51 34) (quote "durs") "" (om-make-point 825 66) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 44 88) (quote "B") "" (om-make-point 579 53) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "FOF-A1" (quote fof-a1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "phs" (quote :phs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par1" (quote :par1) nil nil))) (om-make-point 628 179) (om-make-point 473 72) (let ((rep (if (find-class (quote fof-a1) nil) (let ((rep (make-instance (quote fof-a1) :numcols 6))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 0 2 2 4 4))) (when (member (quote durs) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 220)) (when (member (quote freq) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote freq)) 500)) (when (member (quote bw) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote bw)) 64)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.03)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.005)) (when (member (quote wout) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.05)) (when (member (quote oct) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0)) (when (member (quote phs) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote phs)) (list 0 0 0 0.33 0 0.25))) (when (member (quote par1) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote par1)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 0 2 2 4 4) (list 2 2 2 2 2 2) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 220 220 220 220 220 220) (list 500 500 500 500 500 500) (list 64 64 64 64 64 64) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.03 0.03 0.03 0.03 0.03 0.03) (list 0.005 0.005 0.005 0.005 0.005 0.005) (list 0.05 0.05 0.05 0.05 0.05 0.05) (list 0 0 0 0 0 0) (list 0 0 0 0.33 0 0.25) (list 1 1 1 1 1 1))) rep)))) (setf (precision rep) (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 80 131) nil nil nil nil 1) (om-load-boxcomment "comment 4" (om-make-point 51 34) (quote "edel") "" (om-make-point 195 66) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 51 34) (quote "phs") "" (om-make-point 448 65) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 29" (quote t) (quote nil) (om-make-point 170 91) (om-make-point 92 30) (list 0 0 2 2 4 4) "(0 0 2 2 4 4)" nil) (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 404 91) (om-make-point 132 30) (list 0 0 0 0.33 0 0.25) "(0 0 0 0.33 0 0.25 )" nil) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 502 143) (om-make-point 27 30) 0 "0" nil) (om-load-editor-box1 "FOF-A1 2" (quote fof-a1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "phs" (quote :phs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par1" (quote :par1) nil nil))) (om-make-point 72 180) (om-make-point 473 72) (let ((rep (if (find-class (quote fof-a1) nil) (let ((rep (make-instance (quote fof-a1) :numcols 6))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 0 2 2 4 4))) (when (member (quote durs) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 220)) (when (member (quote freq) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote freq)) 500)) (when (member (quote bw) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote bw)) 64)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.03)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.005)) (when (member (quote wout) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.05)) (when (member (quote oct) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0)) (when (member (quote phs) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote phs)) (list 0 0 0 0.33 0 0.25))) (when (member (quote par1) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote par1)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 0 2 2 4 4) (list 2 2 2 2 2 2) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 220 220 220 220 220 220) (list 500 500 500 500 500 500) (list 64 64 64 64 64 64) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.03 0.03 0.03 0.03 0.03 0.03) (list 0.005 0.005 0.005 0.005 0.005 0.005) (list 0.05 0.05 0.05 0.05 0.05 0.05) (list 0 0 0 0 0 0) (list 0 0 0 0.33 0 0.25) (list 0 0 0 0 0 0))) rep)))) (setf (precision rep) (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 25" (om-make-point 44 88) (quote "A") "" (om-make-point 20 54) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 23" (om-make-point 51 34) (quote "durs") "" (om-make-point 254 65) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 264 91) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 217 144) (om-make-point 34 30) 64 "64" nil) (om-load-boxcomment "comment 22" (om-make-point 30 26) (quote "f0") "" (om-make-point 133 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 21" (om-make-point 47 30) (quote "freq") "" (om-make-point 171 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 20" (om-make-point 48 34) (quote "aenv") "" (om-make-point 252 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 19" (om-make-point 40 31) (quote "bw") "" (om-make-point 215 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "fof-a1_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 16 185) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "fof-a1_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fof-a1_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 410 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 2" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 79 30) "fof-a1_A" "\"fof-a1_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.06001 nil "" (om-make-point 347 433) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 13 114) (om-make-point 51 67) nil nil "Synt") (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 127 144) (om-make-point 41 30) 220 "220" nil) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 172 144) (om-make-point 41 30) 500 "500" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 255 140) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 18" (om-make-point 48 34) (quote "win") "" (om-make-point 302 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 349 143) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 17" (om-make-point 48 34) (quote "wdur") "" (om-make-point 351 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 402 143) (om-make-point 45 30) 0.05 "0.05" nil) (om-load-boxcomment "comment 16" (om-make-point 48 34) (quote "wout") "" (om-make-point 402 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 454 143) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 15" (om-make-point 48 34) (quote "oct") "" (om-make-point 449 116) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 301 143) (om-make-point 45 30) 0.03 "0.03" nil) (om-load-boxcomment "comment 14" (om-make-point 51 34) (quote "skip") "" (om-make-point 495 116) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 298 34) (quote "Tutorial FOF-A1") "" (om-make-point 56 2) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((5 0 1 0 nil 1) (29 0 20 0 nil 2) (20 0 21 0 nil 0) (1 0 29 1 nil 0) (5 0 29 4 nil 1) (8 0 29 5 nil 3) (6 0 29 7 nil 0) (19 0 29 8 nil 8) (26 0 29 9 nil 0) (18 0 29 10 nil 4) (10 0 29 11 nil 3) (7 0 29 12 nil 2) (9 0 29 13 nil 0) (14 0 29 14 nil 0) (4 0 29 15 nil 2) (11 0 29 16 nil 0) (33 0 30 0 nil 1) (30 0 36 1 nil 0) (33 0 36 4 nil 1) (39 0 36 5 nil 3) (47 0 36 7 nil 0) (48 0 36 8 nil 8) (40 0 36 9 nil 0) (49 0 36 10 nil 4) (57 0 36 11 nil 3) (51 0 36 12 nil 2) (53 0 36 13 nil 0) (55 0 36 14 nil 0) (34 0 36 15 nil 2) (35 0 36 16 nil 0) (46 0 45 0 nil 0) (36 0 46 0 nil 2))) nil 6.06001))
