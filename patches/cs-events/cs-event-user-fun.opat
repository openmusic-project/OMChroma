
(:patch
 (:om-version 1.08E-4)
 (:name "cs-event-user-fun")
 (:doc "")
 (:info
  (:created "2017/11/09 15:28:47")
  (:modified "2019/08/06 14:53:40"))
 (:window (:size (601 778)) (:position (503 34)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:reference fixnum)
   (:type :value)
   (:group-id nil)
   (:name "value box")
   (:x 151)
   (:y 283)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 3)
   (:id 0))
  (:box
   (:reference single-float)
   (:type :value)
   (:group-id nil)
   (:name "value box")
   (:x 276)
   (:y 288)
   (:w 34)
   (:h 28)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 0.8)
   (:id 1))
  (:box
   (:reference cons)
   (:type :value)
   (:group-id nil)
   (:name "value box")
   (:x 281)
   (:y 210)
   (:w 85)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 400 500 200))
   (:id 2))
  (:box
   (:reference textbuffer)
   (:type :object)
   (:group-id nil)
   (:name nil)
   (:x 71)
   (:y 591)
   (:w 116)
   (:h 96)
   (:color (:color 0.9 0.9 0.9 1.0))
   (:border 1.5)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :italic)))
   (:align :center)
   (:name nil)
   (:display :mini-view)
   (:showname nil)
   (:group-id nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "CONTENTS")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "CONTENTS") (:reactive nil)))
   (:window (:size (784 888)) (:position (180 452)))
   (:edition-params (:read-mode :text))
   (:value
    (:object
     (:class textbuffer)
     (:slots
      ((:contents
        (:list
         "<CsoundSynthesizer>"
         "<CsOptions>"
         " -f -m7 -N -g -b8192 -B8192 --format=aiff "
         "</CsOptions>"
         "<CsInstruments>"
         "; CSOUND ORCHESTRA GENERATED BY OMCHROMA"
         "; 2019/08/06 14:48:08"
         ""
         "; == ORC HEADER: =="
         ""
         "sr = 44100"
         "kr = 44100"
         "ksmps = 1"
         "nchnls = 1"
         ""
         "; GLOBAL VARIABLES"
         ""
         "0dbfs   = 8388607 ; 24 bits"
         ""
         ""
         ""
         "; == INSTRUMENTS: =="
         ""
         ";===================="
         "instr 1"
         ""
         "idur		= p3"
         "idurosc		= 1/idur"
         "iamp 		= (p4 > 0.0 ? (p4*0.001*0dbfs) : (ampdbfs(p4)))"
         "ifq		= p5"
         "iaenv		= p6"
         "iaudiofun	= 1"
         ""
         "a2    poscil  iamp, idurosc, iaenv"
         "a1    poscil  a2, ifq, iaudiofun"
         "out     a1"
         "endin"
         ""
         "</CsInstruments>"
         "<CsScore>"
         "; CSOUND SCORE GENERATED BY OMCHROMA"
         "; 2019/08/06 14:48:08"
         ""
         "; Score header defined in orchestra:"
         "; - from add-1:"
         "f1  0  65537  10  10"
         ""
         "; global tables:"
         ""
         ";------ EVENT 1 ------"
         ";------ local tables in array ------"
         "f 2000 0 4097 7  0.00 2048.00 100.00 2048.00 0.00"
         ""
         ";------ lines for event ------"
         "i1 0.0000 0.8000 -6.0000 400 2000 "
         "i1 0.0000 0.8000 -6.0000 400 2000 "
         "i1 1.5000 0.8000 -6.0000 500 2000 "
         "i1 1.5000 0.8000 -6.0000 500 2000 "
         "i1 3.0000 0.8000 -6.0000 200 2000 "
         "i1 3.0000 0.8000 -6.0000 200 2000 "
         "</CsScore>"
         "</CsoundSynthesizer>"))))
     (:add-slots ((:input-mode :lines-cols)))))
   (:id 3))
  (:box
   (:reference sound)
   (:type :object)
   (:group-id nil)
   (:name nil)
   (:x 221)
   (:y 586)
   (:w 303)
   (:h 61)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :italic)))
   (:align :center)
   (:name nil)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:group-id nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value :choose-file)
     (:reactive nil)))
   (:outputs (:output (:name "SELF") (:reactive nil)))
   (:window (:size (1265 302)) (:position (84 115)))
   (:edition-params)
   (:value
    (:object
     (:class sound)
     (:slots
      ((:onset 0)
       (:duration 0)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:default-frame-type marker-frame)
       (:frames nil)
       (:buffer nil)
       (:n-samples 167580)
       (:n-channels 1)
       (:sample-rate 44100)
       (:smpl-type :float)
       (:sample-size 32)))
     (:add-slots
      ((:markers nil)
       (:file-pathname
        (:pathname
         (:directory
          (:absolute
           "Users"
           "bresson"
           "_SHARED-FILES"
           "WORKSPACES"
           "my-workspace"
           "out-files"))
         (:device :unspecific)
         (:host nil)
         (:name "my-synth")
         (:type "aiff")))
       (:sample-rate 44100)
       (:n-channels 1)
       (:n-samples 167580)
       (:gain 1.0)
       (:access-from-file nil)))))
   (:id 4))
  (:comment
   (:x 62)
   (:y 684)
   (:w 118)
   (:h 22)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text "generated Csound file")
   (:id 5))
  (:box
   (:library "OMChroma")
   (:reference (:symbol "GEN07" "CHROMA"))
   (:type :object)
   (:group-id nil)
   (:name nil)
   (:x 373)
   (:y 257)
   (:w 86)
   (:h 52)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :italic)))
   (:align :center)
   (:name nil)
   (:display :mini-view)
   (:showname t)
   (:show-markers t)
   (:group-id nil)
   (:lock :locked)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "X-POINTS")
     (:value (:list 0 256 512))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "Y-POINTS")
     (:value (:list 0 100 0))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "DECIMALS")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "ID")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "X-POINTS") (:reactive nil))
    (:output (:name "Y-POINTS") (:reactive nil))
    (:output (:name "DECIMALS") (:reactive nil))
    (:output (:name "ID") (:reactive nil)))
   (:window (:size (607 351)) (:position (398 109)))
   (:edition-params)
   (:value
    (:object
     (:class (:symbol "GEN07" "CHROMA"))
     (:slots
      ((:onset 0)
       (:duration 511.47)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:action nil)
       (:color (:color 0.3 0.3 0.3 1.0))
       (:decimals 2)
       (:x-points
        (:list 76.95 105.69 165.03 284.22 344.45 425.88 511.47))
       (:y-points (:list 0.0 147.42 345.27 385.9 284.47 146.54 0.0))
       (:id nil)
       (:size 4097)
       (:stime 0)))
     (:add-slots
      ((:color (:color 0.3 0.3 0.3 1.0))
       (:name "GEN07")
       (:size 4097)
       (:stime 0)))))
   (:id 6))
  (:box
   (:library "OMChroma")
   (:reference (:symbol "ADD-1" "CHROMA"))
   (:type :object)
   (:group-id nil)
   (:name nil)
   (:x 117)
   (:y 323)
   (:w 299)
   (:h 146)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :italic)))
   (:align :center)
   (:name nil)
   (:display :mini-view)
   (:showname nil)
   (:group-id nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "ELTS")
     (:value 1)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "ACTION-TIME")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "USER-FUN")
     (:value nil)
     (:reactive nil))
    (:input (:type :key) (:name "e-dels") (:value nil) (:reactive nil))
    (:input (:type :key) (:name "durs") (:value nil) (:reactive nil))
    (:input (:type :key) (:name "freq") (:value nil) (:reactive nil))
    (:input (:type :key) (:name "amp") (:value nil) (:reactive nil))
    (:input (:type :key) (:name "aenv") (:value nil) (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "ELTS") (:reactive nil))
    (:output (:name "ACTION-TIME") (:reactive nil))
    (:output (:name "USER-FUN") (:reactive nil))
    (:output (:name "e-dels") (:reactive nil))
    (:output (:name "durs") (:reactive nil))
    (:output (:name "freq") (:reactive nil))
    (:output (:name "amp") (:reactive nil))
    (:output (:name "aenv") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params)
   (:value
    (:object
     (:class (:symbol "ADD-1" "CHROMA"))
     (:slots
      ((:onset 0)
       (:elts 3)
       (:field-names (:list "e-dels" "durs" "amp" "freq" "aenv"))
       (:source-code nil)
       (:action-time 0)
       (:user-fun nil)
       (:instr-num 1)))
     (:add-slots
      ((:data
        (:list
         (:array-field
          (:name "e-dels")
          (:doc "entry delays [sec]")
          (:type number)
          (:decimals 4)
          (:default 0.0)
          (:data (:list 0.0 1.5 3.0)))
         (:array-field
          (:name "durs")
          (:doc "duration [sec]")
          (:type number)
          (:decimals 4)
          (:default 1.0)
          (:data (:list 0.8 0.8 0.8)))
         (:array-field
          (:name "amp")
          (:doc
           "maximum amplitude [linear (0.0,1000.0) or dB (-INF,0.0)]")
          (:type number)
          (:decimals 4)
          (:default -6.0)
          (:data (:list -6.0 -6.0 -6.0)))
         (:array-field
          (:name "freq")
          (:doc "frequency [Hz]")
          (:type number)
          (:decimals 4)
          (:default 440.0)
          (:data (:list 400 500 200)))
         (:array-field
          (:name "aenv")
          (:doc "amplitude envelope [GEN table]")
          (:type (:symbol "CS-TABLE" "CHROMA"))
          (:decimals 4)
          (:default
           (:object
            (:class (:symbol "GEN07" "CHROMA"))
            (:slots
             ((:onset 0)
              (:duration 4096.0)
              (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
              (:action nil)
              (:color (:color 0.0 0.0 0.0 1.0))
              (:decimals 5)
              (:x-points (:list 0.0 2048.0 4096.0))
              (:y-points (:list 0.0 100.0 0.0))
              (:id nil)
              (:size 4097)
              (:stime 0)))
            (:add-slots
             ((:color (:color 0.0 0.0 0.0 1.0))
              (:name nil)
              (:size 4097)
              (:stime 0)))))
          (:data
           (:list
            (:object
             (:class (:symbol "GEN07" "CHROMA"))
             (:slots
              ((:onset 0)
               (:duration 512.0)
               (:interpol
                (:number-or-nil (:number 50) (:t-or-nil nil)))
               (:action nil)
               (:color (:color 0.3 0.3 0.3 1.0))
               (:decimals 2)
               (:x-points
                (:list 0.0 89.18 243.99 256.0 372.11 505.56 512.0))
               (:y-points
                (:list 0.0 78.64 38.58 100.0 40.34 60.02 0.0))
               (:id 2000)
               (:size 4097)
               (:stime 0)))
             (:add-slots
              ((:color (:color 0.3 0.3 0.3 1.0))
               (:name "GEN07")
               (:size 4097)
               (:stime 0))))
            (:object
             (:class (:symbol "GEN07" "CHROMA"))
             (:slots
              ((:onset 0)
               (:duration 512.0)
               (:interpol
                (:number-or-nil (:number 50) (:t-or-nil nil)))
               (:action nil)
               (:color (:color 0.3 0.3 0.3 1.0))
               (:decimals 2)
               (:x-points
                (:list 0.0 89.18 243.99 256.0 372.11 505.56 512.0))
               (:y-points
                (:list 0.0 78.64 38.58 100.0 40.34 60.02 0.0))
               (:id 2000)
               (:size 4097)
               (:stime 0)))
             (:add-slots
              ((:color (:color 0.3 0.3 0.3 1.0))
               (:name "GEN07")
               (:size 4097)
               (:stime 0))))
            (:object
             (:class (:symbol "GEN07" "CHROMA"))
             (:slots
              ((:onset 0)
               (:duration 512.0)
               (:interpol
                (:number-or-nil (:number 50) (:t-or-nil nil)))
               (:action nil)
               (:color (:color 0.3 0.3 0.3 1.0))
               (:decimals 2)
               (:x-points
                (:list 0.0 89.18 243.99 256.0 372.11 505.56 512.0))
               (:y-points
                (:list 0.0 78.64 38.58 100.0 40.34 60.02 0.0))
               (:id 2000)
               (:size 4097)
               (:stime 0)))
             (:add-slots
              ((:color (:color 0.3 0.3 0.3 1.0))
               (:name "GEN07")
               (:size 4097)
               (:stime 0)))))))))))))
   (:id 7))
  (:box
   (:reference synthesize)
   (:type :function)
   (:group-id nil)
   (:name "synthesize")
   (:x 325)
   (:y 548)
   (:w 91)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "OBJ")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 8))
  (:box
   (:reference bpf)
   (:type :object)
   (:group-id nil)
   (:name nil)
   (:x 248)
   (:y 238)
   (:w 70)
   (:h 50)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font (:font (:face "Verdana") (:size 10) (:style :italic)))
   (:align :center)
   (:name nil)
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:group-id nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "X-POINTS")
     (:value (:list 0 2000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "Y-POINTS")
     (:value (:list 0 3))
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "X-POINTS") (:reactive nil))
    (:output (:name "Y-POINTS") (:reactive nil)))
   (:window (:size (585 400)) (:position (89 68)))
   (:edition-params)
   (:value
    (:object
     (:class bpf)
     (:slots
      ((:onset 0)
       (:duration 2000.0)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:action nil)
       (:color (:color 0.0 0.0 0.0 1.0))
       (:decimals 2)
       (:x-points (:list 0.0 2000.0))
       (:y-points (:list 0.0 3.0))))
     (:add-slots
      ((:decimals 2)
       (:color (:color 0.0 0.0 0.0 1.0))
       (:name "BPF")
       (:action nil)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))))))
   (:id 9))
  (:box
   (:reference
    (:patch
     (:om-version 1.14E-4)
     (:name "parsing-fun-add")
     (:doc "")
     (:info (:created nil) (:modified nil))
     (:window (:size (804 543)) (:position (559 242)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:reference
        (:out (:type omout) (:name "out") (:index 1) (:doc "")))
       (:type :io)
       (:group-id nil)
       (:name "out")
       (:x 342)
       (:y 444)
       (:w 26)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 0))
      (:box
       (:reference
        (:in (:type omin) (:index 1) (:name "array") (:doc "")))
       (:type :io)
       (:group-id nil)
       (:name "array")
       (:x 30)
       (:y 22)
       (:w 49)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:reference (:in (:type omin) (:index 2) (:name "n") (:doc "")))
       (:type :io)
       (:group-id nil)
       (:name "n")
       (:x 90)
       (:y 27)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:reference get-comp)
       (:type :function)
       (:group-id nil)
       (:name "get-comp")
       (:x 48)
       (:y 81)
       (:w 86)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "N")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:reference clone)
       (:type :function)
       (:group-id nil)
       (:name "clone")
       (:x 134)
       (:y 220)
       (:w 64)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4))
      (:box
       (:reference comp-field)
       (:type :function)
       (:group-id nil)
       (:name "comp-field")
       (:x 183)
       (:y 297)
       (:w 91)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LINEID")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "val")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:reference simple-base-string)
       (:type :value)
       (:group-id nil)
       (:name "value box")
       (:x 319)
       (:y 33)
       (:w 48)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value "freq")
       (:id 6))
      (:box
       (:reference comp-field)
       (:type :function)
       (:group-id nil)
       (:name "comp-field")
       (:x 234)
       (:y 98)
       (:w 91)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LINEID")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 7))
      (:box
       (:reference om+)
       (:type :function)
       (:group-id nil)
       (:name "om+")
       (:x 216)
       (:y 255)
       (:w 62)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "ARG1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ARG2")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 8))
      (:box
       (:reference fixnum)
       (:type :value)
       (:group-id nil)
       (:name "value box")
       (:x 244)
       (:y 222)
       (:w 32)
       (:h 28)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 50)
       (:id 9))
      (:box
       (:reference list)
       (:type :function)
       (:group-id nil)
       (:name "list")
       (:x 26)
       (:y 392)
       (:w 500)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :optional)
         (:name "x")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "x")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "x")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "x")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 10))
      (:box
       (:reference om+)
       (:type :function)
       (:group-id nil)
       (:name "om+")
       (:x 376)
       (:y 257)
       (:w 62)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "ARG1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ARG2")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 11))
      (:box
       (:reference fixnum)
       (:type :value)
       (:group-id nil)
       (:name "value box")
       (:x 402)
       (:y 227)
       (:w 37)
       (:h 28)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 100)
       (:id 12))
      (:box
       (:reference om+)
       (:type :function)
       (:group-id nil)
       (:name "om+")
       (:x 527)
       (:y 280)
       (:w 62)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "ARG1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ARG2")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 13))
      (:box
       (:reference fixnum)
       (:type :value)
       (:group-id nil)
       (:name "value box")
       (:x 553)
       (:y 250)
       (:w 37)
       (:h 28)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 200)
       (:id 14))
      (:box
       (:reference comp-field)
       (:type :function)
       (:group-id nil)
       (:name "comp-field")
       (:x 325)
       (:y 299)
       (:w 91)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LINEID")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "val")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 15))
      (:box
       (:reference comp-field)
       (:type :function)
       (:group-id nil)
       (:name "comp-field")
       (:x 487)
       (:y 322)
       (:w 91)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LINEID")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "val")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 16))
      (:box
       (:reference add-comp)
       (:type :function)
       (:group-id nil)
       (:name "add-comp")
       (:x 110)
       (:y 255)
       (:w 88)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "COMP")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 17))
      (:comment
       (:x 398)
       (:y 444)
       (:w 340)
       (:h 23)
       (:fgcolor
        (:color-or-nil
         (:color (:color 0.0 0.0 0.0 1.0))
         (:t-or-nil t)))
       (:bgcolor nil)
       (:border (:number-or-nil (:number 0.0) (:t-or-nil t)))
       (:roundness nil)
       (:text-font
        (:font-or-nil
         (:font (:font (:face "Calibri") (:size 13) (:style :plain)))
         (:t-or-nil t)))
       (:align nil)
       (:text
        "Each component becomes 4 components with different :FREQ")
       (:id 18))
      (:box
       (:reference clone)
       (:type :function)
       (:group-id nil)
       (:name "clone")
       (:x 327)
       (:y 192)
       (:w 64)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 19))
      (:box
       (:reference add-comp)
       (:type :function)
       (:group-id nil)
       (:name "add-comp")
       (:x 303)
       (:y 225)
       (:w 88)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "COMP")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 20))
      (:box
       (:reference clone)
       (:type :function)
       (:group-id nil)
       (:name "clone")
       (:x 489)
       (:y 192)
       (:w 64)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 21))
      (:box
       (:reference add-comp)
       (:type :function)
       (:group-id nil)
       (:name "add-comp")
       (:x 465)
       (:y 248)
       (:w 88)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "COMP")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 22)))
     (:connections
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 3 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 17 :in 0))
       (:attributes (:color nil :style nil :modif (0 0))))
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 20 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 22 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 2 :out 0))
       (:to (:box 3 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 3 :out 0))
       (:to (:box 4 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 3 :out 0))
       (:to (:box 7 :in 0))
       (:attributes (:color nil :style nil :modif (0 0))))
      (:connection
       (:from (:box 3 :out 0))
       (:to (:box 10 :in 0))
       (:attributes (:color nil :style nil :modif (0 58/305))))
      (:connection
       (:from (:box 3 :out 0))
       (:to (:box 19 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 3 :out 0))
       (:to (:box 21 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 4 :out 0))
       (:to (:box 17 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 5 :out 0))
       (:to (:box 10 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 6 :out 0))
       (:to (:box 5 :in 1))
       (:attributes (:color nil :style nil :modif (0 17/188))))
      (:connection
       (:from (:box 6 :out 0))
       (:to (:box 15 :in 1))
       (:attributes (:color nil :style nil :modif (0 53/189))))
      (:connection
       (:from (:box 6 :out 0))
       (:to (:box 16 :in 1))
       (:attributes (:color nil :style nil :modif (0 21/188))))
      (:connection
       (:from (:box 6 :out 0))
       (:to (:box 7 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 7 :out 0))
       (:to (:box 8 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 7 :out 0))
       (:to (:box 11 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 7 :out 0))
       (:to (:box 13 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 8 :out 0))
       (:to (:box 5 :in 2))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 9 :out 0))
       (:to (:box 8 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 10 :out 0))
       (:to (:box 0 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 11 :out 0))
       (:to (:box 15 :in 2))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 12 :out 0))
       (:to (:box 11 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 13 :out 0))
       (:to (:box 16 :in 2))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 14 :out 0))
       (:to (:box 13 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 15 :out 0))
       (:to (:box 10 :in 2))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 16 :out 0))
       (:to (:box 10 :in 3))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 17 :out 0))
       (:to (:box 5 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 19 :out 0))
       (:to (:box 20 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 20 :out 0))
       (:to (:box 15 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 21 :out 0))
       (:to (:box 22 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 22 :out 0))
       (:to (:box 16 :in 0))
       (:attributes (:color nil :style nil :modif nil))))))
   (:type :patch)
   (:group-id nil)
   (:name "parsing-fun-add")
   (:x 171)
   (:y 109)
   (:w 119)
   (:h 63)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:group-id nil)
   (:lock nil)
   (:lambda :lambda)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "array")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "n")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 10))
  (:box
   (:reference
    (:patch
     (:om-version 1.14E-4)
     (:name "parsing-fun")
     (:doc "")
     (:info (:created nil) (:modified nil))
     (:window (:size (500 500)) (:position (41 45)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:reference
        (:out (:type omout) (:name "out") (:index 1) (:doc "")))
       (:type :io)
       (:group-id nil)
       (:name "out")
       (:x 106)
       (:y 397)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 0))
      (:box
       (:reference
        (:in (:type omin) (:index 1) (:name "array") (:doc "")))
       (:type :io)
       (:group-id nil)
       (:name "array")
       (:x 57)
       (:y 54)
       (:w 49)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:reference (:in (:type omin) (:index 2) (:name "I") (:doc "")))
       (:type :io)
       (:group-id nil)
       (:name "I")
       (:x 151)
       (:y 62)
       (:w 40)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:reference get-comp)
       (:type :function)
       (:group-id nil)
       (:name "get-comp")
       (:x 110)
       (:y 108)
       (:w 85)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "N")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:reference add-comp)
       (:type :function)
       (:group-id nil)
       (:name "add-comp")
       (:x 59)
       (:y 289)
       (:w 87)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "COMP")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4))
      (:box
       (:reference clone)
       (:type :function)
       (:group-id nil)
       (:name "clone")
       (:x 120)
       (:y 186)
       (:w 64)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:reference comp-field)
       (:type :function)
       (:group-id nil)
       (:name "comp-field")
       (:x 180)
       (:y 289)
       (:w 90)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LINEID")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "val")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:reference simple-base-string)
       (:type :value)
       (:group-id nil)
       (:name "value box")
       (:x 196)
       (:y 147)
       (:w 48)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value "freq")
       (:id 7))
      (:box
       (:reference comp-field)
       (:type :function)
       (:group-id nil)
       (:name "comp-field")
       (:x 234)
       (:y 186)
       (:w 90)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LINEID")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 8))
      (:box
       (:reference om+)
       (:type :function)
       (:group-id nil)
       (:name "om+")
       (:x 256)
       (:y 255)
       (:w 60)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "ARG1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ARG2")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 9))
      (:box
       (:reference fixnum)
       (:type :value)
       (:group-id nil)
       (:name "value box")
       (:x 282)
       (:y 225)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 50)
       (:id 10)))
     (:connections
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 3 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 4 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 2 :out 0))
       (:to (:box 3 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 3 :out 0))
       (:to (:box 5 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 3 :out 0))
       (:to (:box 8 :in 0))
       (:attributes (:color nil :style nil :modif (0 -1/3))))
      (:connection
       (:from (:box 4 :out 0))
       (:to (:box 0 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 5 :out 0))
       (:to (:box 6 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 6 :out 0))
       (:to (:box 4 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 7 :out 0))
       (:to (:box 8 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 7 :out 0))
       (:to (:box 6 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 8 :out 0))
       (:to (:box 9 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 9 :out 0))
       (:to (:box 6 :in 2))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 10 :out 0))
       (:to (:box 9 :in 1))
       (:attributes (:color nil :style nil :modif nil))))))
   (:type :patch)
   (:group-id nil)
   (:name "parsing-fun")
   (:x 295)
   (:y 109)
   (:w 96)
   (:h 63)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:group-id nil)
   (:lock nil)
   (:lambda :lambda)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "array")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "I")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 11))
  (:box
   (:reference
    (:patch
     (:om-version 1.14E-4)
     (:name "parsing-fun-table")
     (:doc "")
     (:info (:created nil) (:modified nil))
     (:window (:size (547 453)) (:position (131 114)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:reference
        (:out (:type omout) (:name "out") (:index 1) (:doc "")))
       (:type :io)
       (:group-id nil)
       (:name "out")
       (:x 74)
       (:y 338)
       (:w 26)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 0))
      (:box
       (:reference
        (:in (:type omin) (:index 1) (:name "array") (:doc "")))
       (:type :io)
       (:group-id nil)
       (:name "array")
       (:x 52)
       (:y 51)
       (:w 37)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 1))
      (:box
       (:reference (:in (:type omin) (:index 2) (:name "I") (:doc "")))
       (:type :io)
       (:group-id nil)
       (:name "I")
       (:x 157)
       (:y 67)
       (:w 13)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:reference get-comp)
       (:type :function)
       (:group-id nil)
       (:name "get-comp")
       (:x 101)
       (:y 124)
       (:w 86)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "N")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:reference comp-field)
       (:type :function)
       (:group-id nil)
       (:name "comp-field")
       (:x 163)
       (:y 235)
       (:w 91)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LINEID")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "val")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4))
      (:box
       (:reference simple-base-string)
       (:type :value)
       (:group-id nil)
       (:name "value box")
       (:x 177)
       (:y 166)
       (:w 51)
       (:h 28)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value "aenv")
       (:id 5))
      (:box
       (:library "OMChroma")
       (:reference (:symbol "GEN07" "CHROMA"))
       (:type :object)
       (:group-id nil)
       (:name nil)
       (:x 248)
       (:y 164)
       (:w 132)
       (:h 57)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font
        (:font (:face "Verdana") (:size 10) (:style :italic)))
       (:align :center)
       (:name nil)
       (:display :mini-view)
       (:showname nil)
       (:show-markers t)
       (:group-id nil)
       (:lock :locked)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "X-POINTS")
         (:value (:list 0 256 512))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "Y-POINTS")
         (:value (:list 0 100 0))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "DECIMALS")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ID")
         (:value nil)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "X-POINTS") (:reactive nil))
        (:output (:name "Y-POINTS") (:reactive nil))
        (:output (:name "DECIMALS") (:reactive nil))
        (:output (:name "ID") (:reactive nil)))
       (:window (:size (585 400)) (:position (152 137)))
       (:edition-params)
       (:value
        (:object
         (:class (:symbol "GEN07" "CHROMA"))
         (:slots
          ((:onset 0)
           (:duration 512.0)
           (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
           (:action nil)
           (:color (:color 0.3 0.3 0.3 1.0))
           (:decimals 2)
           (:x-points
            (:list 0.0 89.18 243.99 256.0 372.11 505.56 512.0))
           (:y-points (:list 0.0 78.64 38.58 100.0 40.34 60.02 0.0))
           (:id 2000)
           (:size 4097)
           (:stime 0)))
         (:add-slots
          ((:color (:color 0.3 0.3 0.3 1.0))
           (:name "GEN07")
           (:size 4097)
           (:stime 0)))))
       (:id 6))
      (:box
       (:reference fixnum)
       (:type :value)
       (:group-id nil)
       (:name "value box")
       (:x 309)
       (:y 126)
       (:w 43)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 2000)
       (:id 7)))
     (:connections
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 3 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 2 :out 0))
       (:to (:box 3 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 3 :out 0))
       (:to (:box 4 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 4 :out 0))
       (:to (:box 0 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 5 :out 0))
       (:to (:box 4 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 6 :out 0))
       (:to (:box 4 :in 2))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 7 :out 0))
       (:to (:box 6 :in 3))
       (:attributes (:color nil :style nil :modif nil))))))
   (:type :patch)
   (:group-id nil)
   (:name "parsing-fun-table")
   (:x 399)
   (:y 109)
   (:w 125)
   (:h 63)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:group-id nil)
   (:lock nil)
   (:lambda :lambda)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "array")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "I")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 12))
  (:box
   (:reference synthesize)
   (:type :function)
   (:group-id nil)
   (:name "synthesize")
   (:x 79)
   (:y 549)
   (:w 89)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "OBJ")
     (:value nil)
     (:reactive nil))
    (:input (:type :key) (:name "run") (:value t) (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 13))
  (:box
   (:reference null)
   (:type :value)
   (:group-id nil)
   (:name "value box")
   (:x 120)
   (:y 514)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value nil)
   (:id 14))
  (:comment
   (:x 153)
   (:y 42)
   (:w 344)
   (:h 41)
   (:fgcolor
    (:color-or-nil (:color (:color 0.0 0.0 0.0 1.0)) (:t-or-nil t)))
   (:bgcolor nil)
   (:border (:number-or-nil (:number 0.0) (:t-or-nil t)))
   (:roundness nil)
   (:text-font
    (:font-or-nil
     (:font (:font (:face "Calibri") (:size 13) (:style :plain)))
     (:t-or-nil t)))
   (:align nil)
   (:text
    "The <user-fun> slot of CS-EVT classes allows to post-process the array contents when the Csound score is written...")
   (:id 15)))
 (:connections
  (:connection
   (:from (:box 0 :out 0))
   (:to (:box 7 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 1 :out 0))
   (:to (:box 7 :in 5))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 2 :out 0))
   (:to (:box 7 :in 6))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 6 :out 0))
   (:to (:box 7 :in 8))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 7 :out 0))
   (:to (:box 8 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 7 :out 0))
   (:to (:box 13 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 8 :out 0))
   (:to (:box 4 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 9 :out 0))
   (:to (:box 7 :in 4))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 10 :out 0))
   (:to (:box 7 :in 3))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 13 :out 0))
   (:to (:box 3 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 14 :out 0))
   (:to (:box 13 :in 1))
   (:attributes (:color nil :style nil :modif nil)))))