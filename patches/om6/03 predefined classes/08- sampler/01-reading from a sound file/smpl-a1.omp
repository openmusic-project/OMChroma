; OM File Header - Saved 2013/10/29 22:34:30
; (6.0602 :patc (om-make-point 226 10) (om-make-point 193 31) (om-make-point 1131 954) "" 183 0 "2012/12/02 9:53:22" "2013/08/31 11:08:01")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../out-files/smpl-a1_E.aiff" "../../../../out-files/smpl-a1_C.aiff" "../../../../out-files/smpl-a1_D.aiff" "../../../../out-files/smpl-a1_B.aiff" "../../../../in-files/sine.aiff" "../../../../out-files/smpl-a1_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "smpl-a1" (quote ((om-load-boxcomment "comment 45" (om-make-point 977 64) (quote "__________________________________________") "" (om-make-point 23 448) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 68" (om-make-point 977 64) (quote "__________________________________________") "" (om-make-point 27 208) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 70" (om-make-point 44 45) (quote "f0$env") "" (om-make-point 470 574) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1 4" (quote t) (quote nil) (om-make-point 625 520) (om-make-point 75 30) "sine.aiff" "\"sine.aiff\"" nil) (om-load-boxcall (quote genfun) "INFILE 4" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 643 548) nil nil nil nil 1) (om-load-editor-box1 "SMPL-A1 5" (quote smpl-a1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0max" (quote :f0max) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0env" (quote :f0env) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0jta" (quote :f0jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0dur" (quote :f0dur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wrap" (quote :wrap) nil nil))) (om-make-point 340 657) (om-make-point 390 62) (let ((rep (if (find-class (quote smpl-a1) nil) (let ((rep (make-instance (quote smpl-a1) :numcols 6))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6 8 10))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0max)) 2)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 1)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote jta)) (list 0 1 2 4 8 16))) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6 8 10) (list 2 2 2 2 2 2) (list 0.0 0.0 0.0 0.0 0.0 0.0) (list 1 1 1 1 1 1) (list 2 2 2 2 2 2) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 1 1 1 1 1 1) (list 0 0 0 0 0 0) (list 0 1 2 4 8 16) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff")) (list 0 0 0 0 0 0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.1 0.1 0.1 0.1 0.1 0.1) (list 0 0 0 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))))) nil nil nil nil) (om-load-boxcomment "comment 69" (om-make-point 41 34) (quote "afil") "" (om-make-point 642 495) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Synt 5" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 90 30) "smpl-a1_E" "\"smpl-a1_E\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 376 373)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 272 588) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host :unspecific :name "smpl-a1_E" :type "aiff")) nil "Synt") (om-load-editor-box1 "smpl-a1_E.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 284 658) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-a1_E" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-a1_E.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment 67" (om-make-point 48 34) (quote "wrap") "" (om-make-point 697 591) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 66" (om-make-point 48 34) (quote "win") "" (om-make-point 661 592) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 11" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 607 613) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 65" (om-make-point 48 34) (quote "aenv") "" (om-make-point 608 591) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 45" (quote t) (quote nil) (om-make-point 576 620) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 64" (om-make-point 48 34) (quote "skip") "" (om-make-point 565 592) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 63" (om-make-point 31 27) (quote "f0") "" (om-make-point 403 590) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 344 589) nil (list 6 (list 0 2 4 6 8 10)) nil "C#ed") (om-load-boxcomment "comment 62" (om-make-point 51 34) (quote "durs") "" (om-make-point 381 526) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 61" (om-make-point 41 88) (quote "E") "" (om-make-point 281 525) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 44" (quote t) (quote nil) (om-make-point 404 619) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 43" (quote t) (quote nil) (om-make-point 539 620) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 60" (om-make-point 37 51) (quote "f0 $jta") "" (om-make-point 540 575) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 42" (quote t) (quote nil) (om-make-point 512 620) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 59" (om-make-point 37 51) (quote "f0$dur") "" (om-make-point 508 575) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 41" (quote t) (quote nil) (om-make-point 474 532) (om-make-point 99 30) (list 0 1 2 4 8 16) "(0 1 2 4 8 16)" nil) (om-load-boxcomment "comment 58" (om-make-point 37 34) (quote "jta") "" (om-make-point 500 505) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 40" (quote t) (quote nil) (om-make-point 664 621) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcall (quote bastype) "aux 39" (quote t) (quote nil) (om-make-point 388 550) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 38" (quote t) (quote nil) (om-make-point 437 619) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 57" (om-make-point 49 51) (quote "f0 $max") "" (om-make-point 431 574) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 37" (quote t) (quote nil) (om-make-point 706 621) (om-make-point 27 30) 0 "0" nil) (om-load-editor-box1 "BPF 10" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 468 613) (om-make-point 41 40) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 56" (om-make-point 37 51) (quote "f0 $jta") "" (om-make-point 271 338) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 36" (quote t) (quote nil) (om-make-point 274 383) (om-make-point 27 30) 0 "0" nil) (om-load-editor-box1 "BPF 9" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 228 378) (om-make-point 41 40) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 35" (quote t) (quote nil) (om-make-point 466 381) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 55" (om-make-point 49 51) (quote "f0 $max") "" (om-make-point 191 339) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 34" (quote t) (quote nil) (om-make-point 197 382) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 33" (quote t) (quote nil) (om-make-point 151 321) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 32" (quote t) (quote nil) (om-make-point 424 381) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcomment "comment 54" (om-make-point 37 34) (quote "jta") "" (om-make-point 306 354) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 308 383) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 53" (om-make-point 64 34) (quote "f0 dur") "" (om-make-point 278 281) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 30" (quote t) (quote nil) (om-make-point 276 307) (om-make-point 70 30) (list 0 1 0.5) "(0 1 0.5)" nil) (om-load-boxcall (quote bastype) "aux 29" (quote t) (quote nil) (om-make-point 164 382) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 52" (om-make-point 43 88) (quote "C") "" (om-make-point 42 290) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 51" (om-make-point 51 34) (quote "durs") "" (om-make-point 144 297) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 115 353) nil (list 3 (list 0 2 4)) nil "C#ed") (om-load-boxcomment "comment 50" (om-make-point 31 27) (quote "f0") "" (om-make-point 163 356) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 49" (om-make-point 48 34) (quote "skip") "" (om-make-point 332 353) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 339 383) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 48" (om-make-point 48 34) (quote "aenv") "" (om-make-point 369 353) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 7" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 369 377) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 47" (om-make-point 48 34) (quote "win") "" (om-make-point 423 353) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 46" (om-make-point 48 34) (quote "wrap") "" (om-make-point 455 352) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-a1_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 45 422) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-a1_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-a1_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 4" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 91 30) "smpl-a1_C" "\"smpl-a1_C\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 33 352) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-a1_C" :type "aiff")) nil "Synt") (om-load-boxcomment "comment 44" (om-make-point 41 34) (quote "afil") "" (om-make-point 399 258) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-A1 4" (quote smpl-a1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0max" (quote :f0max) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0env" (quote :f0env) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0jta" (quote :f0jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0dur" (quote :f0dur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wrap" (quote :wrap) nil nil))) (om-make-point 100 422) (om-make-point 390 62) (let ((rep (if (find-class (quote smpl-a1) nil) (let ((rep (make-instance (quote smpl-a1) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0max)) 2)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0dur)) (list 0 1 0.5))) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4) (list 2 2 2) (list 0.0 0.0 0.0) (list 1 1 1) (list 2 2 2) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0 0 0) (list 0 1 0.5) (list 0 0 0) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff")) (list 0 0 0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.1 0.1 0.1) (list 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))))) nil nil nil nil) (om-load-boxcall (quote genfun) "INFILE 3" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 405 316) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1 2" (quote t) (quote nil) (om-make-point 387 285) (om-make-point 75 30) "sine.aiff" "\"sine.aiff\"" nil) (om-load-boxcomment "comment 42" (om-make-point 44 45) (quote "f0$env") "" (om-make-point 230 338) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 16" (om-make-point 44 45) (quote "f0$env") "" (om-make-point 206 106) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 12" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 725 382) (om-make-point 41 40) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 27" (quote t) (quote nil) (om-make-point 963 391) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 43" (om-make-point 49 51) (quote "f0 $max") "" (om-make-point 688 342) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 693 389) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 635 321) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 921 391) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcomment "comment 41" (om-make-point 37 34) (quote "jta") "" (om-make-point 799 361) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 801 391) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 40" (om-make-point 37 51) (quote "f0$dur") "" (om-make-point 765 343) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 769 390) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 39" (om-make-point 58 34) (quote "f0 jta") "" (om-make-point 752 280) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 738 306) (om-make-point 92 30) (list 0 0.1 0.5 1) "(0 0.1 0.5 1)" nil) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 659 390) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 38" (om-make-point 46 88) (quote "D") "" (om-make-point 535 291) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 37" (om-make-point 51 34) (quote "durs") "" (om-make-point 628 297) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 609 358) nil (list 4 (list 0 2 4 6)) nil "C#ed") (om-load-boxcomment "comment 36" (om-make-point 31 27) (quote "f0") "" (om-make-point 660 361) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 34" (om-make-point 48 34) (quote "skip") "" (om-make-point 824 360) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 835 391) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 33" (om-make-point 48 34) (quote "aenv") "" (om-make-point 867 359) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 867 383) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 32" (om-make-point 48 34) (quote "win") "" (om-make-point 918 359) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 31" (om-make-point 48 34) (quote "wrap") "" (om-make-point 952 358) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-a1_D.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 540 427) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-a1_D" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-a1_D.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 3" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 91 30) "smpl-a1_D" "\"smpl-a1_D\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 304 373)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 528 357) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-a1_D" :type "aiff")) nil "Synt") (om-load-boxcomment "comment 25" (om-make-point 28 253) (quote "|$|$|$|$|$$$") "" (om-make-point 503 260) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 18" (om-make-point 41 34) (quote "afil") "" (om-make-point 893 263) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-A1 3" (quote smpl-a1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0max" (quote :f0max) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0env" (quote :f0env) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0jta" (quote :f0jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0dur" (quote :f0dur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wrap" (quote :wrap) nil nil))) (om-make-point 597 427) (om-make-point 390 62) (let ((rep (if (find-class (quote smpl-a1) nil) (let ((rep (make-instance (quote smpl-a1) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0max)) 2)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0jta)) (list 0 0.1 0.5 1))) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6) (list 2 2 2 2) (list 0.0 0.0 0.0 0.0) (list 1 1 1 1) (list 2 2 2 2) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0 0.1 0.5 1) (list 0 0 0 0) (list 0 0 0 0) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff")) (list 0 0 0 0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.1 0.1 0.1 0.1) (list 0 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))))) nil nil nil nil) (om-load-boxcall (quote genfun) "INFILE 2" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 900 318) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 882 290) (om-make-point 75 30) "sine.aiff" "\"sine.aiff\"" nil) (om-load-boxcomment "comment 35" (om-make-point 65 34) (quote "f0 env") "" (om-make-point 713 29) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 686 55) (om-make-point 31 40) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 760 54) (om-make-point 34 39) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 720 54) (om-make-point 37 40) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote abstraction) "rnd" (om-load-patch-abs1 "rnd" (quote ((om-load-boxout "output" 0 (om-make-point 123 380) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "random_bpf" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 118 25) (om-make-point 34 30) 16 "16" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 233 24) (om-make-point 34 30) 32 "32" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 155 307) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 5 13 20 30 39 39 48 48 57 62 63 73 75 75 82 83 93 102 109)) (quote (4 7 6 4 10 2 6 8 6 4 2 3 8 7 3 1 5 10 6 7 8)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 57 192) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 86 232) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 204 163) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 186 24) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 187 65) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 158 121) (om-make-point 34 30) 20 "20" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 88 163) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 71 25) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 71 66) nil nil nil nil 1))) (quote ((3 0 0 0 nil 0) (5 0 3 1 nil 0) (6 0 3 2 nil 0) (4 0 5 0 nil 0) (10 0 5 1 nil 0) (8 0 6 0 nil 0) (9 0 6 1 nil 0) (7 0 8 0 nil 0) (2 0 8 1 nil 0) (12 0 10 0 nil 0) (9 0 10 1 nil 0) (11 0 12 0 nil 0) (1 0 12 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 833 38) nil (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 3 5 12 16 28 40 56 70 82 92 101 106 110 112 122 128 134 150 165 167)) (quote (25 15 7 2 20 14 26 7 0 19 31 12 13 1 17 14 1 4 2 7 12)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) nil "rnd") (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 796 54) (om-make-point 33 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 3 5 12 16 28 40 56 70 82 92 101 106 110 112 122 128 134 150 165 167)) (quote (25 15 7 2 20 14 26 7 0 19 31 12 13 1 17 14 1 4 2 7 12)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 642 56) nil nil nil nil 1) (om-load-boxcomment "comment 30" (om-make-point 49 51) (quote "f0 $max") "" (om-make-point 684 110) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 691 153) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 612 89) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 917 151) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcomment "comment 29" (om-make-point 37 34) (quote "jta") "" (om-make-point 795 126) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 797 153) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 28" (om-make-point 37 51) (quote "f0$dur") "" (om-make-point 761 110) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 765 153) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 27" (om-make-point 37 51) (quote "f0$jta") "" (om-make-point 733 110) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 736 153) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 657 153) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 24" (om-make-point 44 88) (quote "B") "" (om-make-point 536 56) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 23" (om-make-point 51 34) (quote "durs") "" (om-make-point 605 65) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 607 122) nil (list 4 (list 0 2 4 6)) nil "C#ed") (om-load-boxcomment "comment 22" (om-make-point 31 27) (quote "f0") "" (om-make-point 656 126) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 21" (om-make-point 48 34) (quote "skip") "" (om-make-point 820 126) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 830 153) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 20" (om-make-point 48 34) (quote "aenv") "" (om-make-point 859 126) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 859 148) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 19" (om-make-point 48 34) (quote "win") "" (om-make-point 917 126) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 959 151) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 17" (om-make-point 48 34) (quote "wrap") "" (om-make-point 948 126) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-a1_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 539 190) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-a1_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-a1_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 2" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 91 30) "smpl-a1_B" "\"smpl-a1_B\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 289 341)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 527 120) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host :unspecific :name "smpl-a1_B" :type "aiff")) nil "Synt") (om-load-boxcomment "comment 15" (om-make-point 41 34) (quote "afil") "" (om-make-point 889 37) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-A1 2" (quote smpl-a1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0max" (quote :f0max) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0env" (quote :f0env) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0jta" (quote :f0jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0dur" (quote :f0dur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wrap" (quote :wrap) nil nil))) (om-make-point 593 190) (om-make-point 390 62) (let ((rep (if (find-class (quote smpl-a1) nil) (let ((rep (make-instance (quote smpl-a1) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0max)) 2)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0env)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 3 5 12 16 28 40 56 70 82 92 101 106 110 112 122 128 134 150 165 167)) (quote (25 15 7 2 20 14 26 7 0 19 31 12 13 1 17 14 1 4 2 7 12)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6) (list 2 2 2 2) (list 0.0 0.0 0.0 0.0) (list 1 1 1 1) (list 2 2 2 2) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 3 5 12 16 28 40 56 70 82 92 101 106 110 112 122 128 134 150 165 167)) (quote (25 15 7 2 20 14 26 7 0 19 31 12 13 1 17 14 1 4 2 7 12)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0 0 0 0) (list 0 0 0 0) (list 0 0 0 0) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff") (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "sine" :type "aiff")) (list 0 0 0 0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.1 0.1 0.1 0.1) (list 0 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))))) nil nil nil nil) (om-load-boxcomment "comment 14" (om-make-point 37 34) (quote "jta") "" (om-make-point 309 122) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 311 153) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 13" (om-make-point 37 51) (quote "f0$dur") "" (om-make-point 275 106) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 279 153) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 12" (om-make-point 37 51) (quote "f0$jta") "" (om-make-point 245 106) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 250 153) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 11" (om-make-point 44 45) (quote "f0$env") "" (om-make-point 728 342) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 8" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 203 146) (om-make-point 41 40) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 185 78) (om-make-point 92 30) (list 1 1.5 2 3 4) "(1 1.5 2 3 4)" nil) (om-load-boxcomment "comment 10" (om-make-point 70 34) (quote "f0 max") "" (om-make-point 193 52) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-A1" (quote smpl-a1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0max" (quote :f0max) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0env" (quote :f0env) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0jta" (quote :f0jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0dur" (quote :f0dur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wrap" (quote :wrap) nil nil))) (om-make-point 107 190) (om-make-point 390 62) (let ((rep (if (find-class (quote smpl-a1) nil) (let ((rep (make-instance (quote smpl-a1) :numcols 5))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6 8))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0max)) (list 1 1.5 2 3 4))) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote afil)) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "sine" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sine.aiff") (set-tonalite newobj nil) newobj))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6 8) (list 2 2 2 2 2) (list 0.0 0.0 0.0 0.0 0.0) (list 1 1 1 1 1) (list 1 1.5 2 3 4) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0 0 0 0 0) (list 0 0 0 0 0) (list 0 0 0 0 0) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "sine" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sine.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "sine" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sine.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "sine" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sine.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "sine" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sine.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "sine" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sine.aiff") (set-tonalite newobj nil) newobj)) (list 0 0 0 0 0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.1 0.1 0.1 0.1 0.1) (list 0 0 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux1 3" (quote t) (quote nil) (om-make-point 878 61) (om-make-point 75 30) "sine.aiff" "\"sine.aiff\"" nil) (om-load-boxcall (quote genfun) "INFILE" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 896 89) nil nil nil nil 1) (om-load-boxcomment "comment 26" (om-make-point 41 34) (quote "afil") "" (om-make-point 398 47) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 28 253) (quote "|$|$|$|$|$$$") "" (om-make-point 503 20) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Synt" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 91 30) "smpl-a1_A" "\"smpl-a1_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 308 355)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 40 120) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-a1_A" :type "aiff")) nil "Synt") (om-load-editor-box1 "smpl-a1_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 52 190) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-a1_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-a1_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment 8" (om-make-point 48 34) (quote "wrap") "" (om-make-point 462 122) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 473 151) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 7" (om-make-point 48 34) (quote "win") "" (om-make-point 427 122) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 8" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 376 142) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 431 151) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcomment "comment 6" (om-make-point 48 34) (quote "aenv") "" (om-make-point 376 120) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 344 152) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 5" (om-make-point 48 34) (quote "skip") "" (om-make-point 336 122) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 31 27) (quote "f0") "" (om-make-point 170 125) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 171 152) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 505 475)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 128 122) nil (list 5 (list 0 2 4 6 8)) nil "C#ed") (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 137 77) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 3" (om-make-point 51 34) (quote "durs") "" (om-make-point 130 53) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 298 34) (quote "Tutorial SMPL-A1") "" (om-make-point 56 2) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "sine.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 376 70) (om-make-point 83 46) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "sine" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sine.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil t) (om-load-boxcomment "comment" (om-make-point 44 88) (quote "A") "" (om-make-point 48 56) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((3 0 4 0 nil 0) (16 0 5 1 nil 1) (16 1 5 4 nil 2) (27 0 5 5 nil 3) (19 0 5 7 nil 4) (28 0 5 8 nil 1) (31 0 5 9 nil 0) (20 0 5 10 nil 3) (22 0 5 11 nil 1) (24 0 5 12 nil 1) (4 0 5 13 nil 1) (13 0 5 14 nil 5) (11 0 5 15 nil 2) (26 0 5 16 nil 3) (30 0 5 17 nil 5) (5 0 7 0 nil 2) (7 0 8 0 nil 0) (27 0 16 0 nil 3) (24 0 16 1 nil 1) (38 0 47 0 nil 3) (43 0 47 1 nil 1) (56 0 55 0 nil 0) (58 0 56 0 nil 2) (47 0 58 1 nil 1) (47 1 58 4 nil 2) (38 0 58 5 nil 3) (44 0 58 7 nil 4) (37 0 58 8 nil 1) (34 0 58 9 nil 0) (33 0 58 10 nil 2) (43 0 58 11 nil 1) (41 0 58 12 nil 2) (59 0 58 13 nil 1) (50 0 58 14 nil 5) (52 0 58 15 nil 2) (39 0 58 16 nil 3) (35 0 58 17 nil 5) (60 0 59 0 nil 0) (67 0 78 0 nil 3) (74 0 78 1 nil 1) (87 0 86 0 nil 0) (90 0 87 0 nil 2) (78 0 90 1 nil 1) (78 1 90 4 nil 2) (67 0 90 5 nil 3) (75 0 90 7 nil 4) (66 0 90 8 nil 1) (63 0 90 9 nil 0) (74 0 90 10 nil 1) (72 0 90 11 nil 1) (70 0 90 12 nil 2) (91 0 90 13 nil 1) (81 0 90 14 nil 5) (83 0 90 15 nil 2) (68 0 90 16 nil 3) (64 0 90 17 nil 5) (92 0 91 0 nil 0) (97 0 98 0 nil 3) (94 0 99 0 nil 1) (96 0 99 1 nil 4) (95 0 99 2 nil 5) (98 0 99 3 nil 8) (102 0 113 0 nil 3) (99 0 113 1 nil 1) (123 0 122 0 nil 0) (125 0 123 0 nil 2) (113 0 125 1 nil 1) (113 1 125 4 nil 2) (102 0 125 5 nil 3) (110 0 125 7 nil 4) (101 0 125 8 nil 1) (99 0 125 9 nil 1) (109 0 125 10 nil 4) (107 0 125 11 nil 1) (105 0 125 12 nil 2) (138 0 125 13 nil 1) (116 0 125 14 nil 5) (118 0 125 15 nil 2) (103 0 125 16 nil 3) (120 0 125 17 nil 5) (153 0 136 1 nil 1) (153 1 136 4 nil 2) (154 0 136 5 nil 3) (152 0 136 7 nil 4) (134 0 136 8 nil 1) (133 0 136 9 nil 5) (131 0 136 10 nil 4) (129 0 136 11 nil 1) (127 0 136 12 nil 2) (157 0 136 13 ((om-make-point 395 114) (om-make-point 395 159) (om-make-point 402 159) (om-make-point 401 190)) 3) (149 0 136 14 nil 2) (146 0 136 15 nil 2) (147 0 136 16 nil 3) (144 0 136 17 nil 5) (137 0 138 0 nil 0) (136 0 141 0 nil 2) (141 0 142 0 nil 0) (154 0 153 0 nil 3) (134 0 153 1 nil 1))) nil 6.0602))
