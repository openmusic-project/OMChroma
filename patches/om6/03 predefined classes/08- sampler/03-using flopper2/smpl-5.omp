; OM File Header - Saved 2013/10/29 22:34:30
; (6.0602 :patc (om-make-point 226 10) (om-make-point 172 88) (om-make-point 1367 806) "" 183 0 "2012/12/10 13:00:11" "2013/08/31 17:51:19")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../out-files/smpl-5_H.aiff" "../../../../out-files/smpl-5_F.aiff" "../../../../out-files/smpl-5_E.aiff" "../../../../out-files/smpl-5_D.aiff" "../../../../out-files/smpl-5_C.aiff" "../../../../out-files/smpl-5_B.aiff" "../../../../out-files/smpl-5_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "smpl-5" (quote ((om-load-boxcall (quote abstraction) "Synt&T" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 94 70) (om-make-point 357 30) "f10 0 0 -1 \"OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 0 -1 \\\"OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 107 106) (om-make-point 351 30) "f11 0 0 -1 \"OMChroma_Tutorial/in-files/gliss.aiff\" 0 0 0" "\"f11 0 0 -1 \\\"OMChroma_Tutorial/in-files/gliss.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 150 158) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 39 47) (om-make-point 84 30) "smpl-5_H" "\"smpl-5_H\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (3 0 6 1 nil 0) (2 0 6 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 440 558) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-5_H" :type "aiff")) nil "Synt&T") (om-load-boxcall (quote abstraction) "Synt&T 8" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 94 70) (om-make-point 357 30) "f10 0 0 -1 \"OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 0 -1 \\\"OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 107 106) (om-make-point 351 30) "f11 0 0 -1 \"OMChroma_Tutorial/in-files/gliss.aiff\" 0 0 0" "\"f11 0 0 -1 \\\"OMChroma_Tutorial/in-files/gliss.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 150 158) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 39 46) (om-make-point 82 30) "smpl-5_F" "\"smpl-5_F\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (3 0 6 1 nil 0) (2 0 6 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 846 345) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-5_H" :type "aiff")) nil "Synt&T") (om-load-boxcall (quote abstraction) "Synt&T 7" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 94 70) (om-make-point 357 30) "f10 0 0 -1 \"OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 0 -1 \\\"OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 107 106) (om-make-point 351 30) "f11 0 0 -1 \"OMChroma_Tutorial/in-files/gliss.aiff\" 0 0 0" "\"f11 0 0 -1 \\\"OMChroma_Tutorial/in-files/gliss.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 150 158) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 39 46) (om-make-point 85 30) "smpl-5_G" "\"smpl-5_G\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (3 0 6 1 nil 0) (2 0 6 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 31 564) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-5_H" :type "aiff")) nil "Synt&T") (om-load-boxcall (quote abstraction) "Synt&T 6" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 94 70) (om-make-point 357 30) "f10 0 0 -1 \"OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 0 -1 \\\"OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 107 106) (om-make-point 351 30) "f11 0 0 -1 \"OMChroma_Tutorial/in-files/gliss.aiff\" 0 0 0" "\"f11 0 0 -1 \\\"OMChroma_Tutorial/in-files/gliss.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 150 158) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 39 46) (om-make-point 83 30) "smpl-5_E" "\"smpl-5_E\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (3 0 6 1 nil 0) (2 0 6 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 439 342) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-5_H" :type "aiff")) nil "Synt&T") (om-load-boxcall (quote abstraction) "Synt&T 5" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 94 70) (om-make-point 357 30) "f10 0 0 -1 \"OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 0 -1 \\\"OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 107 106) (om-make-point 351 30) "f11 0 0 -1 \"OMChroma_Tutorial/in-files/gliss.aiff\" 0 0 0" "\"f11 0 0 -1 \\\"OMChroma_Tutorial/in-files/gliss.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 150 158) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 39 46) (om-make-point 84 30) "smpl-5_D" "\"smpl-5_D\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (3 0 6 1 nil 0) (2 0 6 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 30 344) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-5_H" :type "aiff")) nil "Synt&T") (om-load-boxcall (quote abstraction) "Synt&T 4" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 94 70) (om-make-point 357 30) "f10 0 0 -1 \"OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 0 -1 \\\"OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 107 106) (om-make-point 351 30) "f11 0 0 -1 \"OMChroma_Tutorial/in-files/gliss.aiff\" 0 0 0" "\"f11 0 0 -1 \\\"OMChroma_Tutorial/in-files/gliss.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 150 158) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 39 46) (om-make-point 84 30) "smpl-5_C" "\"smpl-5_C\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (3 0 6 1 nil 0) (2 0 6 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 855 117) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-5_H" :type "aiff")) nil "Synt&T") (om-load-boxcall (quote abstraction) "Synt&T 3" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 94 70) (om-make-point 357 30) "f10 0 0 -1 \"OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 0 -1 \\\"OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 107 106) (om-make-point 351 30) "f11 0 0 -1 \"OMChroma_Tutorial/in-files/gliss.aiff\" 0 0 0" "\"f11 0 0 -1 \\\"OMChroma_Tutorial/in-files/gliss.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 150 158) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 39 46) (om-make-point 84 30) "smpl-5_B" "\"smpl-5_B\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (3 0 6 1 nil 0) (2 0 6 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 439 118) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-5_H" :type "aiff")) nil "Synt&T") (om-load-boxcall (quote abstraction) "Synt&T 2" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 94 70) (om-make-point 357 30) "f10 0 0 -1 \"OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 0 -1 \\\"OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 107 106) (om-make-point 351 30) "f11 0 0 -1 \"OMChroma_Tutorial/in-files/gliss.aiff\" 0 0 0" "\"f11 0 0 -1 \\\"OMChroma_Tutorial/in-files/gliss.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 150 158) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 39 46) (om-make-point 84 30) "smpl-5_A" "\"smpl-5_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (3 0 6 1 nil 0) (2 0 6 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 34 123) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-5_H" :type "aiff")) nil "Synt&T") (om-load-boxcomment "comment 34" (om-make-point 1274 63) (quote "_____________________________________________________") "" (om-make-point 21 442) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 90" (om-make-point 1231 62) (quote "_____________________________________________________") "" (om-make-point 27 216) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 64" (quote t) (quote nil) (om-make-point 624 585) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 63" (quote t) (quote nil) (om-make-point 673 518) (om-make-point 59 30) (list 0 1 2) "(0 1 2)" nil) (om-load-boxcall (quote bastype) "aux 62" (quote t) (quote nil) (om-make-point 747 584) (om-make-point 27 30) 3 "3" nil) (om-load-boxcomment "comment 89" (om-make-point 45 51) (quote "lp$end") "" (om-make-point 742 539) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 61" (quote t) (quote nil) (om-make-point 713 584) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 88" (om-make-point 45 51) (quote "lp$beg") "" (om-make-point 707 539) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 60" (quote t) (quote nil) (om-make-point 783 584) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 59" (quote t) (quote nil) (om-make-point 512 526) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "aux 58" (quote t) (quote nil) (om-make-point 582 585) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 57" (quote t) (quote nil) (om-make-point 550 585) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 87" (om-make-point 28 253) (quote "|$|$|$|") "" (om-make-point 824 498) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 86" (om-make-point 47 88) (quote "H") "" (om-make-point 451 499) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 85" (om-make-point 51 34) (quote "durs") "" (om-make-point 507 502) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 505 560) nil (list 3 (list 0 6 12)) nil "C#ed") (om-load-boxcomment "comment 84" (om-make-point 31 27) (quote "f0") "" (om-make-point 552 562) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 83" (om-make-point 48 34) (quote "skip") "" (om-make-point 616 559) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 82" (om-make-point 48 34) (quote "aenv") "" (om-make-point 659 554) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 11" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 657 575) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 81" (om-make-point 48 34) (quote "win") "" (om-make-point 774 555) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-5_H.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 443 633) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-5_H" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-5_H.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 298 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 80" (om-make-point 41 34) (quote "afil") "" (om-make-point 579 560) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-5 8" (quote smpl-5) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpbeg" (quote :lpbeg) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpend" (quote :lpend) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "mode" (quote :mode) nil nil))) (om-make-point 499 633) (om-make-point 317 61) (let ((rep (if (find-class (quote smpl-5) nil) (let ((rep (make-instance (quote smpl-5) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 6 12))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote durs)) 6)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote f0)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote skip)) 0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) 2)) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpend)) 3)) (when (member (quote win) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote win)) 0)) (when (member (quote mode) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote mode)) (list 0 1 2))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 6 12) (list 6 6 6) (list 0.0 0.0 0.0) (list 1 1 1) (list 10 10 10) (list 0 0 0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 2 2 2) (list 3 3 3) (list 0 0 0) (list 0 1 2))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 79" (om-make-point 60 34) (quote "mode") "" (om-make-point 676 495) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 56" (quote t) (quote nil) (om-make-point 245 525) (om-make-point 103 30) (list 0 0.1 0.5 1 2) "(0 0.1 0.5 1 2)" nil) (om-load-boxcall (quote bastype) "aux 55" (quote t) (quote nil) (om-make-point 304 590) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 78" (om-make-point 45 51) (quote "lp$end") "" (om-make-point 333 543) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 77" (om-make-point 45 51) (quote "lp$beg") "" (om-make-point 298 543) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 54" (quote t) (quote nil) (om-make-point 214 589) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 53" (quote t) (quote nil) (om-make-point 378 590) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 52" (quote t) (quote nil) (om-make-point 103 530) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "aux 51" (quote t) (quote nil) (om-make-point 173 589) (om-make-point 34 30) 11 "11" nil) (om-load-boxcall (quote bastype) "aux 50" (quote t) (quote nil) (om-make-point 338 590) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "aux 49" (quote t) (quote nil) (om-make-point 141 589) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 76" (om-make-point 28 253) (quote "|$|$|$|$") "" (om-make-point 414 500) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 75" (om-make-point 46 88) (quote "G") "" (om-make-point 40 503) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 74" (om-make-point 51 34) (quote "durs") "" (om-make-point 98 506) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 97 564) nil (list 5 (list 0 6 12 18 24)) nil "C#ed") (om-load-boxcomment "comment 73" (om-make-point 31 27) (quote "f0") "" (om-make-point 143 566) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 72" (om-make-point 48 34) (quote "skip") "" (om-make-point 207 564) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 71" (om-make-point 48 34) (quote "aenv") "" (om-make-point 248 559) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 10" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 246 580) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 70" (om-make-point 48 34) (quote "win") "" (om-make-point 271 497) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-5_F.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 34 637) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-5_F" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-5_F.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 298 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 69" (om-make-point 41 34) (quote "afil") "" (om-make-point 174 564) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-5 7" (quote smpl-5) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpbeg" (quote :lpbeg) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpend" (quote :lpend) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "mode" (quote :mode) nil nil))) (om-make-point 90 637) (om-make-point 317 61) (let ((rep (if (find-class (quote smpl-5) nil) (let ((rep (make-instance (quote smpl-5) :numcols 5))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 6 12 18 24))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote durs)) 6)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote f0)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote afil)) 11)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote skip)) 0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) 2)) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpend)) 3)) (when (member (quote win) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote win)) (list 0 0.1 0.5 1 2))) (when (member (quote mode) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote mode)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 6 12 18 24) (list 6 6 6 6 6) (list 0.0 0.0 0.0 0.0 0.0) (list 1 1 1 1 1) (list 11 11 11 11 11) (list 0 0 0 0 0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 2 2 2 2 2) (list 3 3 3 3 3) (list 0 0.1 0.5 1 2) (list 0 0 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 68" (om-make-point 60 34) (quote "mode") "" (om-make-point 368 561) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 32" (quote t) (quote nil) (om-make-point 1029 369) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 1193 370) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 30" (quote t) (quote nil) (om-make-point 1078 306) (om-make-point 59 30) (list 3 4 5) "(3 4 5)" nil) (om-load-boxcall (quote bastype) "aux 29" (quote t) (quote nil) (om-make-point 1119 370) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 45" (om-make-point 45 51) (quote "lp$beg") "" (om-make-point 1113 323) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 918 310) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "aux 27" (quote t) (quote nil) (om-make-point 988 369) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 1153 370) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 956 369) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 43" (om-make-point 40 88) (quote "F") "" (om-make-point 858 283) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 42" (om-make-point 51 34) (quote "durs") "" (om-make-point 913 286) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 912 344) nil (list 3 (list 0 6 12)) nil "C#ed") (om-load-boxcomment "comment 41" (om-make-point 31 27) (quote "f0") "" (om-make-point 958 346) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 40" (om-make-point 48 34) (quote "skip") "" (om-make-point 1020 344) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 39" (om-make-point 48 34) (quote "aenv") "" (om-make-point 1063 339) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 1061 360) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 38" (om-make-point 48 34) (quote "win") "" (om-make-point 1152 341) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-5_F.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 849 417) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-5_F" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-5_F.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 298 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 37" (om-make-point 41 34) (quote "afil") "" (om-make-point 989 344) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-5 4" (quote smpl-5) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpbeg" (quote :lpbeg) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpend" (quote :lpend) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "mode" (quote :mode) nil nil))) (om-make-point 905 417) (om-make-point 317 61) (let ((rep (if (find-class (quote smpl-5) nil) (let ((rep (make-instance (quote smpl-5) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 6 12))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote durs)) 6)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote f0)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote skip)) 1)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) 2)) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpend)) (list 3 4 5))) (when (member (quote win) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote mode) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote mode)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 6 12) (list 6 6 6) (list 0.0 0.0 0.0) (list 1 1 1) (list 10 10 10) (list 1 1 1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 2 2 2) (list 3 4 5) (list 0.1 0.1 0.1) (list 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 36" (om-make-point 60 34) (quote "lpend") "" (om-make-point 1077 276) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 35" (om-make-point 60 34) (quote "mode") "" (om-make-point 1183 341) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 48" (quote t) (quote nil) (om-make-point 511 310) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "aux 47" (quote t) (quote nil) (om-make-point 712 370) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "aux 46" (quote t) (quote nil) (om-make-point 671 306) (om-make-point 70 30) (list 0 1 2 3) "(0 1 2 3)" nil) (om-load-boxcall (quote bastype) "aux 45" (quote t) (quote nil) (om-make-point 623 370) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 44" (quote t) (quote nil) (om-make-point 581 369) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 43" (quote t) (quote nil) (om-make-point 746 370) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcall (quote bastype) "aux 42" (quote t) (quote nil) (om-make-point 549 369) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 67" (om-make-point 28 253) (quote "|$|$|$|$$") "" (om-make-point 822 288) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 66" (om-make-point 41 88) (quote "E") "" (om-make-point 450 283) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 65" (om-make-point 51 34) (quote "durs") "" (om-make-point 506 286) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 505 344) nil (list 4 (list 0 6 12 18)) nil "C#ed") (om-load-boxcomment "comment 64" (om-make-point 31 27) (quote "f0") "" (om-make-point 551 346) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 63" (om-make-point 48 34) (quote "skip") "" (om-make-point 614 343) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 62" (om-make-point 48 34) (quote "aenv") "" (om-make-point 658 340) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 9" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 656 361) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 61" (om-make-point 48 34) (quote "win") "" (om-make-point 745 341) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-5_E.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 442 417) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-5_E" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-5_E.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 298 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 60" (om-make-point 41 34) (quote "afil") "" (om-make-point 582 344) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-5 6" (quote smpl-5) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpbeg" (quote :lpbeg) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpend" (quote :lpend) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "mode" (quote :mode) nil nil))) (om-make-point 498 417) (om-make-point 317 61) (let ((rep (if (find-class (quote smpl-5) nil) (let ((rep (make-instance (quote smpl-5) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 6 12 18))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote durs)) 6)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote f0)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote skip)) 1)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) (list 0 1 2 3))) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpend)) 4)) (when (member (quote win) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote mode) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote mode)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 6 12 18) (list 6 6 6 6) (list 0.0 0.0 0.0 0.0) (list 1 1 1 1) (list 10 10 10 10) (list 1 1 1 1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0 1 2 3) (list 4 4 4 4) (list 0.1 0.1 0.1 0.1) (list 0 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 59" (om-make-point 60 34) (quote "lpbeg") "" (om-make-point 674 280) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 58" (om-make-point 45 51) (quote "lp$end") "" (om-make-point 706 324) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 52" (om-make-point 60 34) (quote "mode") "" (om-make-point 776 341) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 41" (quote t) (quote nil) (om-make-point 786 370) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 40" (quote t) (quote nil) (om-make-point 103 309) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "aux 39" (quote t) (quote nil) (om-make-point 304 369) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "aux 38" (quote t) (quote nil) (om-make-point 265 369) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 37" (quote t) (quote nil) (om-make-point 224 367) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 36" (quote t) (quote nil) (om-make-point 176 368) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 35" (quote t) (quote nil) (om-make-point 338 369) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcall (quote bastype) "aux 34" (quote t) (quote nil) (om-make-point 141 368) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 57" (om-make-point 28 253) (quote "|$|$|$|") "" (om-make-point 414 280) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 56" (om-make-point 46 88) (quote "D") "" (om-make-point 42 282) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 55" (om-make-point 51 34) (quote "durs") "" (om-make-point 98 285) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 95 343) nil (list 4 (list 0 6 12 18)) nil "C#ed") (om-load-boxcomment "comment 54" (om-make-point 31 27) (quote "f0") "" (om-make-point 143 345) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 53" (om-make-point 48 34) (quote "skip") "" (om-make-point 217 342) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 51" (om-make-point 48 34) (quote "win") "" (om-make-point 337 340) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-5_D.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 34 415) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-5_D" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-5_D.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 685 118) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 50" (om-make-point 41 34) (quote "afil") "" (om-make-point 177 343) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-5 5" (quote smpl-5) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpbeg" (quote :lpbeg) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpend" (quote :lpend) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "mode" (quote :mode) nil nil))) (om-make-point 90 416) (om-make-point 317 61) (let ((rep (if (find-class (quote smpl-5) nil) (let ((rep (make-instance (quote smpl-5) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 6 12 18))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote durs)) 6)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote f0)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote skip)) 0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote aenv)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 99 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) 2)) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpend)) 3)) (when (member (quote win) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote mode) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote mode)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 6 12 18) (list 6 6 6 6) (list 0.0 0.0 0.0 0.0) (list 1 1 1 1) (list 10 10 10 10) (list 0 0 0 0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 99 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 2 2 2 2) (list 3 3 3 3) (list 0.1 0.1 0.1 0.1) (list 0 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 49" (om-make-point 45 51) (quote "lp$beg") "" (om-make-point 260 322) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 48" (om-make-point 45 51) (quote "lp$end") "" (om-make-point 298 323) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 47" (om-make-point 60 34) (quote "mode") "" (om-make-point 368 340) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 33" (quote t) (quote nil) (om-make-point 378 369) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 200 295) nil nil nil nil 1) (om-load-editor-box1 "BPF 8" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 376 284) (om-make-point 41 40) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 99 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF 7" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 332 284) (om-make-point 39 41) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 46" (om-make-point 51 34) (quote "aenv") "" (om-make-point 155 297) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 286 285) (om-make-point 38 41) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 244 286) (om-make-point 39 40) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 1165 146) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 975 87) (om-make-point 48 30) (list 0 1) "(0 1)" nil) (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 1000 145) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 968 145) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 33" (om-make-point 43 88) (quote "C") "" (om-make-point 866 59) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 32" (om-make-point 51 34) (quote "durs") "" (om-make-point 925 62) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 930 86) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 923 120) nil (list 2 (list 0 6)) nil "C#ed") (om-load-boxcomment "comment 31" (om-make-point 31 27) (quote "f0") "" (om-make-point 970 122) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 30" (om-make-point 48 34) (quote "skip") "" (om-make-point 973 62) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 29" (om-make-point 48 34) (quote "aenv") "" (om-make-point 1042 116) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 1040 137) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 28" (om-make-point 48 34) (quote "win") "" (om-make-point 1164 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-5_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 861 193) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-5_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-5_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 298 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 27" (om-make-point 41 34) (quote "afil") "" (om-make-point 1001 120) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-5 3" (quote smpl-5) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpbeg" (quote :lpbeg) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpend" (quote :lpend) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "mode" (quote :mode) nil nil))) (om-make-point 917 193) (om-make-point 317 61) (let ((rep (if (find-class (quote smpl-5) nil) (let ((rep (make-instance (quote smpl-5) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 6))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote durs)) 6)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote f0)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote skip)) (list 0 1))) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) 2)) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpend)) 3)) (when (member (quote win) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote mode) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote mode)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 6) (list 6 6) (list 0.0 0.0) (list 1 1) (list 10 10) (list 0 1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 2 2) (list 3 3) (list 0.1 0.1) (list 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 26" (om-make-point 45 51) (quote "lp$beg") "" (om-make-point 1090 99) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 1095 146) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 1131 146) (om-make-point 27 30) 3 "3" nil) (om-load-boxcomment "comment 14" (om-make-point 45 51) (quote "lp$end") "" (om-make-point 1125 100) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 60 34) (quote "mode") "" (om-make-point 1195 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 1205 146) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 25" (om-make-point 28 253) (quote "|$|$|$|$") "" (om-make-point 824 61) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 558 89) (om-make-point 62 30) (list 10 11) "(10 11)" nil) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 590 147) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 24" (om-make-point 44 88) (quote "B") "" (om-make-point 448 61) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 23" (om-make-point 51 34) (quote "durs") "" (om-make-point 508 64) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 513 88) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 506 122) nil (list 2 (list 0 5)) nil "C#ed") (om-load-boxcomment "comment 22" (om-make-point 31 27) (quote "f0") "" (om-make-point 553 124) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 21" (om-make-point 48 34) (quote "skip") "" (om-make-point 585 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 20" (om-make-point 48 34) (quote "aenv") "" (om-make-point 625 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 748 148) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 623 139) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 19" (om-make-point 48 34) (quote "win") "" (om-make-point 747 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-5_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 444 195) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-5_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-5_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 298 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 18" (om-make-point 41 34) (quote "afil") "" (om-make-point 566 63) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 551 147) (om-make-point 27 30) 1 "1" nil) (om-load-editor-box1 "SMPL-5 2" (quote smpl-5) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpbeg" (quote :lpbeg) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpend" (quote :lpend) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "mode" (quote :mode) nil nil))) (om-make-point 500 195) (om-make-point 317 61) (let ((rep (if (find-class (quote smpl-5) nil) (let ((rep (make-instance (quote smpl-5) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 5))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote durs)) 5)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote f0)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote afil)) (list 10 11))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote skip)) 2)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) 1)) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpend)) 2)) (when (member (quote win) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote mode) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote mode)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 5) (list 5 5) (list 0.0 0.0) (list 1 1) (list 10 11) (list 2 2) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 1 1) (list 2 2) (list 0.1 0.1) (list 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 17" (om-make-point 45 51) (quote "lp$beg") "" (om-make-point 673 101) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 678 148) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 714 148) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 16" (om-make-point 45 51) (quote "lp$end") "" (om-make-point 708 102) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 15" (om-make-point 60 34) (quote "mode") "" (om-make-point 778 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 788 148) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 212 30) (quote "negative values are not allowed. ") "" (om-make-point 168 66) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 381 149) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 12" (om-make-point 60 34) (quote "mode") "" (om-make-point 371 120) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 11" (om-make-point 45 51) (quote "lp$end") "" (om-make-point 301 103) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 307 149) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 271 149) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 10" (om-make-point 45 51) (quote "lp$beg") "" (om-make-point 266 102) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-5" (quote smpl-5) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpbeg" (quote :lpbeg) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "lpend" (quote :lpend) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "mode" (quote :mode) nil nil))) (om-make-point 93 196) (om-make-point 317 61) (let ((rep (if (find-class (quote smpl-5) nil) (let ((rep (make-instance (quote smpl-5) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 5))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote durs)) 5)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote f0)) (list 1 1.2))) (when (member (quote afil) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote skip)) 5)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) 1)) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpend)) 3)) (when (member (quote win) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote mode) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote mode)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 5) (list 5 5) (list 0.0 0.0) (list 1 1.2) (list 10 10) (list 5 5) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 1 1) (list 3 3) (list 0.1 0.1) (list 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 144 148) (om-make-point 34 30) 10 "10" nil) (om-load-boxcomment "comment 8" (om-make-point 41 34) (quote "afil") "" (om-make-point 142 120) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-5_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 37 197) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-5_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-5_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 298 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 7" (om-make-point 48 34) (quote "win") "" (om-make-point 340 120) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 216 140) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 341 149) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcomment "comment 6" (om-make-point 48 34) (quote "aenv") "" (om-make-point 218 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 48 34) (quote "skip") "" (om-make-point 178 120) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 31 27) (quote "f0") "" (om-make-point 149 65) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 98 123) nil (list 2 (list 0 5)) nil "C#ed") (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 106 89) (om-make-point 27 30) 5 "5" nil) (om-load-boxcomment "comment 3" (om-make-point 51 34) (quote "durs") "" (om-make-point 101 65) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 44 88) (quote "A") "" (om-make-point 43 63) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 183 148) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 151 90) (om-make-point 59 30) (list 1 1.2) "(1 1.2)" nil) (om-load-boxcomment "comment 9" (om-make-point 28 253) (quote "|$|$|$|$$") "" (om-make-point 417 63) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 153 34) (quote "Tutorial SMPL-5") "" (om-make-point 56 2) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((31 0 0 0 nil 0) (75 0 1 0 nil 0) (54 0 2 0 nil 0) (96 0 3 0 nil 0) (117 0 4 0 nil 0) (143 0 5 0 nil 0) (166 0 6 0 nil 0) (180 0 7 0 nil 0) (17 0 23 0 nil 3) (11 0 23 1 nil 1) (0 0 29 0 nil 0) (23 0 31 1 nil 0) (23 1 31 4 nil 1) (17 0 31 5 nil 3) (19 0 31 7 nil 6) (18 0 31 8 nil 4) (10 0 31 9 nil 3) (27 0 31 10 nil 5) (14 0 31 11 nil 0) (12 0 31 12 nil 0) (16 0 31 13 nil 0) (11 0 31 14 nil 1) (39 0 46 0 nil 3) (33 0 46 1 nil 1) (2 0 52 0 nil 0) (46 0 54 1 nil 0) (46 1 54 4 nil 1) (39 0 54 5 nil 3) (42 0 54 7 nil 6) (40 0 54 8 nil 4) (37 0 54 9 nil 3) (50 0 54 10 nil 5) (34 0 54 11 nil 0) (41 0 54 12 nil 0) (33 0 54 13 nil 1) (38 0 54 14 nil 0) (61 0 67 0 nil 3) (58 0 67 1 nil 1) (1 0 73 0 nil 0) (67 0 75 1 nil 0) (67 1 75 4 nil 1) (61 0 75 5 nil 3) (64 0 75 7 nil 6) (62 0 75 8 nil 4) (56 0 75 9 nil 3) (71 0 75 10 nil 5) (59 0 75 11 nil 0) (58 0 75 12 nil 1) (63 0 75 13 nil 0) (57 0 75 14 nil 0) (78 0 88 0 nil 3) (80 0 88 1 nil 1) (3 0 94 0 nil 0) (88 0 96 1 nil 0) (88 1 96 4 nil 1) (78 0 96 5 nil 3) (84 0 96 7 nil 6) (82 0 96 8 nil 4) (81 0 96 9 nil 3) (92 0 96 10 nil 5) (80 0 96 11 nil 1) (79 0 96 12 nil 1) (83 0 96 13 nil 0) (100 0 96 14 nil 0) (101 0 111 0 nil 3) (122 0 111 1 nil 1) (4 0 115 0 nil 0) (111 0 117 1 nil 0) (111 1 117 4 nil 1) (101 0 117 5 nil 3) (107 0 117 7 nil 6) (105 0 117 8 nil 4) (104 0 117 9 nil 5) (122 0 117 10 nil 1) (103 0 117 11 nil 3) (102 0 117 12 nil 1) (106 0 117 13 nil 0) (121 0 117 14 nil 0) (127 0 122 0 nil 0) (124 0 122 1 nil 0) (123 0 122 2 nil 0) (126 0 122 3 nil 0) (134 0 135 0 nil 3) (129 0 135 1 nil 1) (5 0 141 0 nil 0) (135 0 143 1 nil 0) (135 1 143 4 nil 1) (134 0 143 5 nil 3) (131 0 143 7 nil 6) (130 0 143 8 nil 4) (129 0 143 9 nil 1) (139 0 143 10 nil 5) (145 0 143 11 nil 3) (146 0 143 12 nil 1) (128 0 143 13 nil 0) (149 0 143 14 nil 0) (155 0 156 0 nil 3) (151 0 156 1 nil 1) (6 0 163 0 nil 0) (156 0 166 1 nil 0) (156 1 166 4 nil 1) (155 0 166 5 nil 3) (165 0 166 7 nil 6) (151 0 166 8 nil 1) (152 0 166 9 nil 3) (161 0 166 10 nil 5) (168 0 166 11 nil 3) (169 0 166 12 nil 1) (160 0 166 13 nil 0) (172 0 166 14 nil 0) (190 0 180 1 nil 0) (190 1 180 4 nil 1) (191 0 180 5 nil 3) (195 0 180 7 nil 1) (181 0 180 8 nil 2) (194 0 180 9 nil 3) (185 0 180 10 nil 5) (178 0 180 11 nil 3) (177 0 180 12 nil 1) (186 0 180 13 nil 0) (174 0 180 14 nil 0) (7 0 183 0 nil 0) (191 0 190 0 nil 3) (195 0 190 1 nil 1))) nil 6.0602))
