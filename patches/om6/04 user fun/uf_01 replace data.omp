; OM File Header - Saved 2013/10/29 22:34:30
; (6.0602 :patc (om-make-point 118 110) (om-make-point 1160 264) (om-make-point 498 529) "" 183 0 "2013/02/21 11:49:17" "2013/09/03 9:38:34")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/uf1_A.aiff") (list (quote :text) "../../out-files/uf1_A.sco"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "uf_01 replace data" (quote ((om-load-boxcomment "comment 2" (om-make-point 226 60) (quote "select$nil to see the .sco file in the textfile$t to call the Csound synthesis") "" (om-make-point 210 224) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 120 116) (om-make-point 59 30) (list 0 1 2) "(0 1 2)" nil) (om-load-boxcomment "comment 8" (om-make-point 42 30) (quote ":run") "" (om-make-point 90 239) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 45 58) (quote "A") "" (om-make-point 34 54) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 332 34) (quote "Tutorial User-fun 01 - Replace data") "" (om-make-point 57 0) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 130 81) (om-make-point 101 30) (list 440 660 880) "(440 660 880)" nil) (om-load-boxcall (quote abstraction) "uf1_A" (om-load-patch-abs1 "uf1_A" (quote ((om-load-boxcomment "comment 3" (om-make-point 269 30) (quote "<- only to print in the OM Listener") "" (om-make-point 269 95) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 232 85) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 261 198) (om-make-point 41 30) 200 "200" nil) (om-load-boxcomment "comment 7" (om-make-point 348 30) (quote "<- to connect the lambda patch to the OMChroma class") "" (om-make-point 234 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 386 30) (quote "<- to assign the value of the rightmost inlet to the field \"freq\" ") "" (om-make-point 241 246) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 269 30) (quote "<- first of all you must get the component") "" (om-make-point 233 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 240 55) (quote "<- how the matrix is read in sequential order from 0 to n-1 lines") "" (om-make-point 294 29) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 148 30) (quote "input of the matrix ->") "" (om-make-point 31 80) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 203 198) (om-make-point 53 30) "freq" "\"freq\"" nil) (om-load-boxcall (quote genfun) "COMP-FIELD 2" (quote comp-field) (quote ((om-load-inputfun (quote input-funbox) "a class-array component" "SELF" nil) (om-load-inputfun (quote input-funbox) "a line identifier" "LINEID" 0) (om-load-inputfun (quote input-funbox) "a value" "VAL" nil))) (om-make-point 179 241) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GET-COMP" (quote get-comp) (quote ((om-load-inputfun (quote input-funbox) "a class-array instance" "SELF" nil) (om-load-inputfun (quote input-funbox) "component number" "N" 0))) (om-make-point 167 141) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 199 302) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "list" nil) (om-load-boxin "comp-num" 1 (om-make-point 217 23) "" "comp-num" nil nil) (om-load-boxin "matrix" 0 (om-make-point 168 72) "" "matrix" nil nil))) (quote ((12 0 1 0 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (2 0 9 2 nil 0) (13 0 10 0 nil 0) (1 0 10 1 nil 0) (9 0 11 0 nil 0))) 6.0602 nil "" (om-make-point 182 493) (om-make-point 661 396)) (quote ((om-load-inputfun (quote input-funbox) "" "matrix" nil) (om-load-inputfun (quote input-funbox) "" "comp-num" nil))) (om-make-point 71 62) nil nil "l" "uf1_A") (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil))) (om-make-point 33 249) nil nil nil nil 1) (om-load-editor-box1 "SINGLE-ITEM-LIST" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 146 215) (om-make-point 55 78) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 39 45) "untitled" :range (quote ("nil" "t"))))) (setf (di-data rep) (quote (nil t))) (om-set-selected-item-index rep 1) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 141 307) nil nil nil nil 2))) (setf (numouts box) 2) box) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 128 377) (om-make-point 86 52) (load-textfile (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "uf1_A" :type "sco") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "uf1_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 45 317) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "uf1_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "uf1_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 476 293) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 54 209) (om-make-point 63 30) "uf1_A" "\"uf1_A\"" nil) (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) 1 nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) -6.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 440.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) (list (quote make-cs-table) (quote (quote gen07)) (list (quote list) 0 2048 4096) (list (quote list) 0 100 0) 1 "?" 4097) nil))) (om-make-point 34 146) (om-make-point 183 61) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 440 660 880))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2) (list 1 1 1) (list -6.0 -6.0 -6.0) (list 440 660 880) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 562 87) (om-make-point 589 331) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 39 111) (om-make-point 27 30) 3 "3" nil))) (quote ((13 0 7 0 nil 0) (12 0 7 1 nil 0) (8 0 7 2 nil 2) (7 0 9 0 nil 0) (9 1 10 0 nil 0) (7 0 11 0 nil 0) (14 0 13 1 nil 0) (6 0 13 3 nil 0) (1 0 13 4 nil 0) (5 0 13 7 nil 0))) nil 6.0602))
