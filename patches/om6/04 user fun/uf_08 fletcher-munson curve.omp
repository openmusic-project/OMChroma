; OM File Header - Saved 2013/10/29 22:34:30
; (6.0602 :patc (om-make-point 176 149) (om-make-point 211 82) (om-make-point 451 530) "" 183 0 "2013/02/23 14:58:18" "2013/09/03 9:38:34")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/uf8_a.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "uf_08 fletcher-munson curve" (quote ((om-load-boxcomment "comment 2" (om-make-point 226 60) (quote "select$nil to see the .sco file in the textfile$t to call the Csound synthesis") "" (om-make-point 212 259) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 25 41) (om-make-point 176 30) (list 55 110 220 440 880 1760) "(55 110 220 440 880 1760)" nil) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 48 217) (om-make-point 62 30) "uf8_a" "\"uf8_a\"" nil) (om-load-boxcall (quote abstraction) "uf8_a" (om-load-patch-abs1 "uf8_a" (quote ((om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 184 124) (om-make-point 105 73) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (10 20 30 40 50 60 70 80 90 100 200 300 400 500 600 700 800 900 1000 1500 2000 3000 4000 5000 6000 7000 8000 9000 10000 20000)) (quote (0 -10 -20 -28 -32 -35 -38 -40 -42 -45 -57 -61 -63 -65 -66 -67 -68 -69 -70 -70 -75 -80 -80 -75 -70 -68 -66 -64 -62 -60)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 113 234) (om-make-point 55 30) "amp" "\"amp\"" nil) (om-load-boxcall (quote genfun) "X-TRANSFER" (quote x-transfer) (quote ((om-load-inputfun (quote input-funbox) "a list or BPF" "SELF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0.0S0 0.0S0 0.0S0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "X value" "X-VAL" (list 0 100)))) (om-make-point 181 211) nil nil nil nil 1) (om-load-boxcall (quote genfun) "COMP-FIELD 2" (quote comp-field) (quote ((om-load-inputfun (quote input-funbox) "a class-array component" "SELF" nil) (om-load-inputfun (quote input-funbox) "a line identifier" "LINEID" 0) (om-load-inputfun (quote input-funbox) "a value" "VAL" nil))) (om-make-point 88 288) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 154 85) (om-make-point 53 30) "freq" "\"freq\"" nil) (om-load-boxcall (quote genfun) "COMP-FIELD" (quote comp-field) (quote ((om-load-inputfun (quote input-funbox) "a class-array component" "SELF" nil) (om-load-inputfun (quote input-funbox) "a line identifier" "LINEID" 0))) (om-make-point 111 133) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GET-COMP" (quote get-comp) (quote ((om-load-inputfun (quote input-funbox) "a class-array instance" "SELF" nil) (om-load-inputfun (quote input-funbox) "component number" "N" 0))) (om-make-point 76 72) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 92 351) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "user-fun" nil) (om-load-boxin "comp-num" 1 (om-make-point 105 6) "" "comp-num" nil nil) (om-load-boxin "matrix" 0 (om-make-point 61 6) "" "matrix" nil nil))) (quote ((0 0 2 0 nil 2) (5 0 2 1 nil 0) (6 0 3 0 nil 1) (1 0 3 1 nil 0) (2 0 3 2 nil 0) (6 0 5 0 nil 1) (4 0 5 1 nil 0) (9 0 6 0 nil 0) (8 0 6 1 nil 0) (3 0 7 0 nil 0))) 6.0602 nil "" (om-make-point 2163 215) (om-make-point 350 454)) (quote ((om-load-inputfun (quote input-funbox) "" "matrix" nil) (om-load-inputfun (quote input-funbox) "" "comp" nil))) (om-make-point 58 73) nil nil "l" "uf8_a") (om-load-boxcomment "comment 15" (om-make-point 44 88) (quote "A") "" (om-make-point 19 54) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 42 30) (quote ":run") "" (om-make-point 87 238) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE 5" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil))) (om-make-point 9 265) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 23 108) (om-make-point 27 30) 6 "6" nil) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 102 108) (om-make-point 92 30) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 155 219) (om-make-point 51 30) (list nil (quote t)) "(nil t)" nil) (om-load-editor-box1 "SINGLE-ITEM-LIST 5" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 151 253) (om-make-point 55 78) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 39 45) "untitled" :range (quote ("nil" "t"))))) (setf (di-data rep) (quote (nil t))) (om-set-selected-item-index rep 1) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS 5" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 71 269) nil nil nil nil 2))) (setf (numouts box) 2) box) (om-load-editor-box1 "TEXTFILE 7" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 109 348) (om-make-point 70 50) (load-buffer-textfile (quote ("" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t) (om-load-editor-box1 "ADD-1 5" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) 1 nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) -6.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 440.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) (list (quote make-cs-table) (quote (quote gen07)) (list (quote list) 0 2048 4096) (list (quote list) 0 100 0) 1 "?" 4097) nil))) (om-make-point 12 144) (om-make-point 165 63) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 6))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3 4 5))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 55 110 220 440 880 1760))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3 4 5) (list 1 1 1 1 1 1) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 55 110 220 440 880 1760) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "uf8_a.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 21 348) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "uf8_a" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "uf8_a.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 476 293) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 351 34) (quote "Tutorial User Fun 8 Fletcher-Munson curve") "" (om-make-point 52 1) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((13 0 6 0 nil 0) (2 0 6 1 nil 0) (10 0 6 2 nil 2) (9 0 10 0 nil 0) (6 0 11 0 nil 0) (11 1 12 0 nil 0) (7 0 13 1 nil 0) (3 0 13 3 nil 0) (8 0 13 4 nil 0) (1 0 13 7 nil 2) (6 0 14 0 nil 0))) nil 6.0602))
