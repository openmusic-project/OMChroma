; OM File Header - Saved 2013/10/29 22:34:29
; (6.0602 :patc (om-make-point 10 10) (om-make-point 443 168) (om-make-point 801 548) "" 183 0 nil "2013/09/02 14:40:17")
; End File Header
; External resources 
; (list (list (quote :picture) "../../resources/pict/arrow_down_1") (list (quote :sound) "../../out-files/gs_04__B.aiff" "../../out-files/gs_04_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "gs_04 f-gen reserved number" (quote ((om-load-boxcomment "comment 14" (om-make-point 44 88) (quote "B") "" (om-make-point 433 52) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 19" (om-make-point 29 465) (quote "|$|$|$|$|$|$|$|$|$|$$") "" (om-make-point 355 48) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 16" (om-make-point 60 30) (quote "numcols") "" (om-make-point 423 156) nil (om-make-color 0.9989267 0.059780777 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 60 30) (quote "numcols") "" (om-make-point 54 164) nil (om-make-color 0.9989267 0.059780777 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 15" (om-make-point 39 30) (quote ":edel") "" (om-make-point 477 143) nil (om-make-color 1.0 0.0 0.035351754) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 39 30) (quote ":edel") "" (om-make-point 107 151) nil (om-make-color 1.0 0.0 0.035351754) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 39 30) (quote ":durs") "" (om-make-point 511 115) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 39 30) (quote ":durs") "" (om-make-point 141 122) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 18" (om-make-point 39 30) (quote ":amp") "" (om-make-point 523 87) nil (om-make-color 1.0 0.7482287 0.12633056) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 12" (om-make-point 39 30) (quote ":amp") "" (om-make-point 152 95) nil (om-make-color 1.0 0.7482287 0.12633056) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 17" (om-make-point 39 30) (quote ":freq") "" (om-make-point 514 61) nil (om-make-color 0.022194267 0.14122498 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 44 88) (quote "A") "" (om-make-point 74 54) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 514 147) (om-make-point 53 30) (list 0 1.5) "(0 1.5)" nil) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 613 146) (om-make-point 42 30) (list 1 2) "(1 2)" nil) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 565 325) (om-make-point 172 30) "f2 0 1024 7 0 24 1 1000 0" "\"f2 0 1024 7 0 24 1 1000 0\"" nil) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 536 299) (om-make-point 172 30) "f1 0 1024 7 0 1000 1 24 0" "\"f1 0 1024 7 0 1000 1 24 0\"" nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 611 357) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 487 274) (om-make-point 86 30) "gs_04__B" "\"gs_04__B\"" nil) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 552 65) (om-make-point 70 30) (list 440 660) "(440 660)" nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 560 91) (om-make-point 21 30) 0 "0" nil) (om-load-editor-box1 "gs_04__B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 434 408) (om-make-point 171 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gs_04__B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gs_04__B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "ADD-1 2" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 449 187) (om-make-point 173 76) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1.5))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 440 660))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (list 1 2))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1.5) (list 1 1) (list 0 0) (list 440 660) (list 1 2))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 548 119) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 401 129) (om-make-point 43 43) nil nil nil 1) (om-load-boxcomment "comment 11" (om-make-point 44 30) (quote ":aenv") "" (om-make-point 568 142) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 447 343) nil nil nil nil 1) (om-load-boxcomment "comment 10" (om-make-point 49 30) (quote ":name") "" (om-make-point 481 295) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 49 30) (quote ":tables") "" (om-make-point 562 373) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 161 308) (om-make-point 179 30) "f10 0 1024 7 0 1000 1 24 0" "\"f10 0 1024 7 0 1000 1 24 0\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 235 366) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 170 334) (om-make-point 179 30) "f11 0 1024 7 0 24 1 1000 0" "\"f11 0 1024 7 0 24 1 1000 0\"" nil) (om-load-editor-box1 "gs_04_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 64 416) (om-make-point 171 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gs_04_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gs_04_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 78 196) (om-make-point 173 76) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1.5))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 440 660))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (list 10 11))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1.5) (list 1 1) (list 0 0) (list 440 660) (list 10 11))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 143 155) (om-make-point 53 30) (list 0 1.5) "(0 1.5)" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 177 127) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 189 100) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 181 74) (om-make-point 70 30) (list 440 660) "(440 660)" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 33 136) (om-make-point 43 43) nil nil nil 1) (om-load-boxcomment "comment 5" (om-make-point 39 30) (quote ":freq") "" (om-make-point 145 69) nil (om-make-color 0.022194267 0.14122498 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 44 30) (quote ":aenv") "" (om-make-point 197 151) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 76 352) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 113 283) (om-make-point 79 30) "gs_04_A" "\"gs_04_A\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 242 155) (om-make-point 56 30) (list 10 11) "(10 11)" nil) (om-load-boxcomment "comment 3" (om-make-point 49 30) (quote ":name") "" (om-make-point 106 308) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 49 30) (quote ":tables") "" (om-make-point 184 382) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 435 34) (quote "Tutorial Getting Started 04 - f-GEN Reserved Number") "" (om-make-point 54 0) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((15 0 16 0 nil 0) (14 0 16 1 nil 0) (25 0 20 0 nil 0) (23 0 21 1 nil 5) (12 0 21 4 nil 2) (22 0 21 5 nil 3) (19 0 21 6 nil 4) (18 0 21 7 nil 1) (13 0 21 8 nil 0) (12 0 23 0 nil 2) (21 0 25 0 nil 0) (17 0 25 1 nil 0) (16 0 25 2 nil 0) (28 0 29 0 nil 0) (30 0 29 1 nil 0) (40 0 31 0 nil 0) (37 0 32 1 nil 5) (33 0 32 4 nil 2) (34 0 32 5 nil 3) (35 0 32 6 nil 4) (36 0 32 7 nil 1) (42 0 32 8 nil 0) (33 0 37 0 nil 2) (32 0 40 0 nil 0) (41 0 40 1 nil 0) (29 0 40 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "arrow_down_1" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "arrow_down_1" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 622 190)) (setf (pict-size newpict) (om-make-point 37 97)) newpict) (let ((newpict (make-instance (quote patch-picture) :name "arrow_down_1" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "arrow_down_1" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 251 197)) (setf (pict-size newpict) (om-make-point 43 99)) newpict)) 6.0602))
