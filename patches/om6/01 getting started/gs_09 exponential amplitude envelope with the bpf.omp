; OM File Header - Saved 2013/10/29 22:34:29
; (6.060017 :patc (om-make-point 10 60) (om-make-point 71 32) (om-make-point 1182 794) "" 183 0 "2012/11/15 8:18:09" "2013/10/29 10:40:31")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../out-files/GS_09_B.aiff" "../../../out-files/GS_09_C.aiff" "../../../out-files/GS_09_F.aiff" "../../../out-files/GS_09_D.aiff" "../../../out-files/GS_09_A.aiff" "../../../out-files/GS_09_E.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "gs_09 exponential amplitude envelope with the bpf" (quote ((om-load-boxcall (quote abstraction) "name 6" (om-load-patch-abs1 "name" (quote ((om-load-boxout "output" 0 (om-make-point 70 82) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 32 48) (om-make-point 83 30) "GS_09_B" "\"GS_09_B\"" nil))) (quote ((1 0 0 0 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 233 520) nil nil nil nil) (om-load-boxcomment "comment 35" (om-make-point 69 34) (quote "GEN05") "" (om-make-point 180 310) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 33" (om-make-point 69 34) (quote "GEN07") "" (om-make-point 36 312) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE 7" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 161 532) nil nil nil nil 1) (om-load-editor-box1 "ADD-1 6" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 170 454) (om-make-point 95 66) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 10)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) 11)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 10) (list -6.0) (list 440.0) (list 11))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-editor-box1 "GS_09_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 168 596) (om-make-point 100 69) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "GS_09_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "GS_09_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 304 29) (om-make-point 892 646) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 160 333) (om-make-point 104 52) "f11 0 1025 5 32768 1025 1" "\"f11 0 1025 5 32768 1025 1\"" nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 245 414) (om-make-point 34 30) 11 "11" nil) (om-load-boxcomment "comment 34" (om-make-point 108 85) (quote "linear$decay$Csound $GEN07") "" (om-make-point 12 97) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 32" (om-make-point 24 737) (quote "|$|$|$|$|$|$|$|$|$|$|$|$|$|$$") "" (om-make-point 139 41) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 31" (om-make-point 53 51) (quote "aenv$#11") "" (om-make-point 238 374) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 105 64) (quote "A") "" (om-make-point 14 48) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 37 105) (quote "dB$0$-12$-24$-36$-96") "" (om-make-point 415 237) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "name 5" (om-load-patch-abs1 "name" (quote ((om-load-boxout "output" 0 (om-make-point 68 82) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 36 51) (om-make-point 81 30) "GS_09_F" "\"GS_09_F\"" nil))) (quote ((1 0 0 0 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 987 524) nil nil nil nil) (om-load-boxcall (quote abstraction) "name 4" (om-load-patch-abs1 "name" (quote ((om-load-boxout "output" 0 (om-make-point 66 82) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 32 48) (om-make-point 82 30) "GS_09_E" "\"GS_09_E\"" nil))) (quote ((1 0 0 0 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 742 521) nil nil nil nil) (om-load-boxcall (quote abstraction) "name 3" (om-load-patch-abs1 "name" (quote ((om-load-boxout "output" 0 (om-make-point 66 82) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 32 48) (om-make-point 83 30) "GS_09_D" "\"GS_09_D\"" nil))) (quote ((1 0 0 0 nil 0))) 6.060017 nil "" (om-make-point 697 407) (om-make-point 500 400)) (quote nil) (om-make-point 540 520) nil nil nil nil) (om-load-boxcall (quote abstraction) "name 2" (om-load-patch-abs1 "name" (quote ((om-load-boxout "output" 0 (om-make-point 84 82) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 32 48) (om-make-point 83 30) "GS_09_C" "\"GS_09_C\"" nil))) (quote ((1 0 0 0 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 382 521) nil nil nil nil) (om-load-boxcall (quote abstraction) "name" (om-load-patch-abs1 "name" (quote ((om-load-boxout "output" 0 (om-make-point 33 72) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 15 38) (om-make-point 83 30) "GS_09_A" "\"GS_09_A\"" nil))) (quote ((1 0 0 0 nil 0))) 6.060017 nil "" (om-make-point 1143 344) (om-make-point 200 182)) (quote nil) (om-make-point 94 522) nil nil nil nil) (om-load-boxcomment "comment 30" (om-make-point 66 68) (quote "linear $view $----->") "" (om-make-point 856 176) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 19" (om-make-point 63 68) (quote "exp.$view$----->") "" (om-make-point 864 391) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 29" (om-make-point 268 34) (quote "exponential amplitude envelope") "" (om-make-point 866 84) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 28" (om-make-point 105 64) (quote "F") "" (om-make-point 866 40) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 27" (om-make-point 108 68) (quote "exponential$decay$1 dB steps") "" (om-make-point 605 89) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 26" (om-make-point 105 64) (quote "E") "" (om-make-point 605 45) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 25" (om-make-point 108 68) (quote "exponential$decay$6 dB steps") "" (om-make-point 462 90) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 24" (om-make-point 24 737) (quote "|$|$|$|$|$|$|$|$|$|$|$|$|$|$$") "" (om-make-point 443 32) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 23" (om-make-point 108 68) (quote "exponential$decay$handmade") "" (om-make-point 314 91) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 319 226) (om-make-point 88 30) (list 0 2 4 6 15) "(0 2 4 6 15)" nil) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 365 260) (om-make-point 50 83) (list 32768 8192 2048 512 1) "(32768 $8192 $2048$512$1)" nil) (om-load-editor-box1 "GS_09_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 319 593) (om-make-point 100 69) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "GS_09_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "GS_09_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 297 627) (om-make-point 893 646) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-editor-box1 "ADD-1 2" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 327 454) (om-make-point 95 66) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 10)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 15)) (quote (32768 8192 2024 512 1)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 10) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 15)) (quote (32768 8192 2024 512 1)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 44 40))) nil nil nil t) (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 312 528) nil nil nil nil 1) (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 327 347) (om-make-point 84 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 15)) (quote (32768 8192 2024 512 1)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 22" (om-make-point 96 46) (quote "steps' $resolution$") "" (om-make-point 1055 200) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 21" (om-make-point 37 34) (quote "dB") "" (om-make-point 1004 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 20" (om-make-point 112 34) (quote "step time %") "" (om-make-point 875 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 18" (om-make-point 43 34) (quote "durs") "" (om-make-point 1023 406) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 17" (om-make-point 32 654) (quote "|$|$|$|$|$|$|$|$|$|$|$|$|$|$$") "" (om-make-point 589 33) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 16" (om-make-point 105 64) (quote "D") "" (om-make-point 462 46) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 15" (om-make-point 105 64) (quote "C") "" (om-make-point 314 46) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 14" (om-make-point 105 64) (quote "B") "" (om-make-point 162 44) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 12" (om-make-point 63 68) (quote "6 dB $step$----->") "" (om-make-point 460 234) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 11" (om-make-point 32 654) (quote "|$|$|$|$|$|$|$|$|$|$|$|$|$|$$") "" (om-make-point 839 32) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 10" (om-make-point 100 68) (quote "amplitude $steps' $range") "" (om-make-point 750 163) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 63 68) (quote "exp.$view$----->") "" (om-make-point 632 380) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 66 85) (quote "linear $to dB $(exp.)$----->") "" (om-make-point 635 293) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 53 51) (quote "aenv$#11") "" (om-make-point 94 371) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 24 737) (quote "|$|$|$|$|$|$|$|$|$|$|$|$|$|$$") "" (om-make-point 291 34) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 66 68) (quote "linear $view $----->") "" (om-make-point 611 160) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 141 34) (quote "dB from 96 to 0") "" (om-make-point 712 106) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 51 34) (quote "durs") "" (om-make-point 10 387) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 108 85) (quote "exponential$decay$Csound $GEN05") "" (om-make-point 161 89) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 605 34) (quote "Tutorial Getting Started 09 - Exponential Amplitude Envelope with the BPF") "" (om-make-point 57 3) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 1029 434) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 910 535) nil nil nil nil 1) (om-load-editor-box1 "GS_09_F.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 917 597) (om-make-point 100 69) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "GS_09_F" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "GS_09_F.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 303 29) (om-make-point 894 647) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 925 463) (om-make-point 95 66) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 10)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.31 0.36 0.41 0.46 0.51 0.56 0.61 0.66 0.71 0.76 0.81 0.86 0.92 0.97 2.17 5.68 9.19 12.69 16.2 19.71 23.22 26.73 30.24 33.75 37.25 40.76 44.27 47.78 51.29 54.8 58.31 61.81 65.32 68.83 71.02 72.54 74.07 75.59 77.12 78.64 80.17 81.69 83.22 84.75 86.27 87.8 89.32 90.85 92.37 93.9 95.42 96.95 98.47 100.0)) (quote (1.0 1.76 3.09 5.43 9.54 16.77 29.47 51.8 91.04 160.01 281.23 494.27 868.7 1526.78 2683.37 4716.14 8288.81 14567.94 25603.78 44999.73 62527.4 54305.53 47164.77 40962.97 35576.62 30898.6 26835.67 23306.96 20242.28 17580.57 15268.86 13261.13 11517.38 10002.93 8687.62 7545.27 6553.12 5691.44 4943.06 4293.08 3089.65 2024.09 1326.02 868.7 569.1 372.83 244.25 160.01 104.83 68.67 44.99 29.47 19.31 12.65 8.29 5.43 3.56 2.33 1.53 1.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 10) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.31 0.36 0.41 0.46 0.51 0.56 0.61 0.66 0.71 0.76 0.81 0.86 0.92 0.97 2.17 5.68 9.19 12.69 16.2 19.71 23.22 26.73 30.24 33.75 37.25 40.76 44.27 47.78 51.29 54.8 58.31 61.81 65.32 68.83 71.02 72.54 74.07 75.59 77.12 78.64 80.17 81.69 83.22 84.75 86.27 87.8 89.32 90.85 92.37 93.9 95.42 96.95 98.47 100.0)) (quote (1.0 1.76 3.09 5.43 9.54 16.77 29.47 51.8 91.04 160.01 281.23 494.27 868.7 1526.78 2683.37 4716.14 8288.81 14567.94 25603.78 44999.73 62527.4 54305.53 47164.77 40962.97 35576.62 30898.6 26835.67 23306.96 20242.28 17580.57 15268.86 13261.13 11517.38 10002.93 8687.62 7545.27 6553.12 5691.44 4943.06 4293.08 3089.65 2024.09 1326.02 868.7 569.1 372.83 244.25 160.01 104.83 68.67 44.99 29.47 19.31 12.65 8.29 5.43 3.56 2.33 1.53 1.0)) (quote gen07) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1060 244) (om-make-point 34 30) 20 "20" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 882 144) (om-make-point 91 30) (list 0 1 70 100) "(0 1 70 100)" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 768 224) (om-make-point 34 30) 96 "96" nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 988 144) (om-make-point 84 30) (list 0 96 72 0) "(0 96 72 0)" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1007 275) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 979 246) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1019 240) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 1006 176) (om-make-point 43 43) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1021 354) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 947 281) (om-make-point 27 30) 2 "2" nil) (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 920 388) (om-make-point 84 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.05 0.1 0.15 0.2 0.25 0.31 0.36 0.41 0.46 0.51 0.56 0.61 0.66 0.71 0.76 0.81 0.86 0.92 0.97 2.17 5.68 9.19 12.69 16.2 19.71 23.22 26.73 30.24 33.75 37.25 40.76 44.27 47.78 51.29 54.8 58.31 61.81 65.32 68.83 71.02 72.54 74.07 75.59 77.12 78.64 80.17 81.69 83.22 84.75 86.27 87.8 89.32 90.85 92.37 93.9 95.42 96.95 98.47 100.0)) (quote (1.0 1.76 3.09 5.43 9.54 16.77 29.47 51.8 91.04 160.01 281.23 494.27 868.7 1526.78 2683.37 4716.14 8288.81 14567.94 25603.78 44999.73 62527.4 54305.53 47164.77 40962.97 35576.62 30898.6 26835.67 23306.96 20242.28 17580.57 15268.86 13261.13 11517.38 10002.93 8687.62 7545.27 6553.12 5691.44 4943.06 4293.08 3089.65 2024.09 1326.02 868.7 569.1 372.83 244.25 160.01 104.83 68.67 44.99 29.47 19.31 12.65 8.29 5.43 3.56 2.33 1.53 1.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote abstraction) "dB" (om-load-patch-abs1 "dB" (quote ((om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 8 39) (om-make-point 123 30) 1.122462 "1.12246204830937" nil) (om-load-boxout "output" 0 (om-make-point 71 163) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "dB" nil) (om-load-boxin "input" 0 (om-make-point 95 50) "" "input" nil nil) (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 11 117) (om-make-point 149 39) nil nil nil 1))) (quote ((3 0 1 0 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0))) 6.060017 nil "" (om-make-point 1142 497) (om-make-point 204 270)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 984 311) nil nil nil "dB") (om-load-boxcall (quote genfun) "OM-SPLINE" (quote om-spline) (quote ((om-load-inputfun (quote input-funbox) "a BPF or BPC" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of points" "RESOLUTION" 100) (om-load-inputfun (quote input-funbox) "interpolation degree" "DEGREE" 3))) (om-make-point 911 322) nil nil nil nil 3) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 911 175) (om-make-point 84 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 70 100)) (quote (0 96 72 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 490 357) (om-make-point 84 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400)) (quote (32768 16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 760 347) (om-make-point 27 30) 2 "2" nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 686 378) (om-make-point 84 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.05 2.11 3.16 4.21 5.26 6.32 7.37 8.42 9.47 10.53 11.58 12.63 13.68 14.74 15.79 16.84 17.89 18.95 20.0 21.05 22.11 23.16 24.21 25.26 26.32 27.37 28.42 29.47 30.53 31.58 32.63 33.68 34.74 35.79 36.84 37.89 38.95 40.0 41.05 42.11 43.16 44.21 45.26 46.32 47.37 48.42 49.47 50.53 51.58 52.63 53.68 54.74 55.79 56.84 57.89 58.95 60.0 61.05 62.11 63.16 64.21 65.26 66.32 67.37 68.42 69.47 70.53 71.58 72.63 73.68 74.74 75.79 76.84 77.89 78.95 80.0 81.05 82.11 83.16 84.21 85.26 86.32 87.37 88.42 89.47 90.53 91.58 92.63 93.68 94.74 95.79 96.84 97.89 98.95 100.0)) (quote (65535.92 58314.9 51889.52 46172.15 41084.71 36557.86 32529.76 28945.49 25756.16 22918.25 20393.02 18146.03 16146.64 14367.54 12784.46 11375.82 10122.39 9007.07 8014.62 7131.55 6345.76 5646.56 5024.4 4470.79 3978.18 3539.85 3149.81 2802.76 2493.94 2219.14 1974.63 1757.06 1563.46 1391.19 1237.9 1101.5 980.14 872.14 776.04 690.54 614.45 546.75 486.5 432.9 385.2 342.76 304.99 271.39 241.48 214.88 191.2 170.13 151.39 134.71 119.86 106.66 94.91 84.45 75.14 66.86 59.5 52.94 47.11 41.92 37.3 33.19 29.53 26.28 23.38 20.81 18.51 16.47 14.66 13.04 11.61 10.33 9.19 8.18 7.28 6.47 5.76 5.13 4.56 4.06 3.61 3.21 2.86 2.54 2.26 2.01 1.79 1.6 1.42 1.26 1.12 1.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE 5" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 470 533) nil nil nil nil 1) (om-load-editor-box1 "ADD-1 5" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 485 452) (om-make-point 95 66) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 10)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400)) (quote (32768 16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 10) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400)) (quote (32768 16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-editor-box1 "GS_09_D.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 477 598) (om-make-point 100 69) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "GS_09_D" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "GS_09_D.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 303 29) (om-make-point 894 647) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 517 308) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 32" (quote t) (quote nil) (om-make-point 498 209) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 523 260) (om-make-point 45 39) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 551 167) (om-make-point 34 30) 15 "15" nil) (om-load-boxcall (quote bastype) "aux 30" (quote t) (quote nil) (om-make-point 515 167) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 521 197) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 101 411) (om-make-point 34 30) 11 "11" nil) (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 19 339) (om-make-point 99 43) "f11 0 1025 7 32768 1025 1" "\"f11 0 1025 7 32768 1025 1\"" nil) (om-load-editor-box1 "GS_09_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 24 596) (om-make-point 100 69) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "GS_09_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "GS_09_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 304 29) (om-make-point 892 646) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-editor-box1 "ADD-1 4" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 26 454) (om-make-point 95 66) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 10)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) 11)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 10) (list -6.0) (list 440.0) (list 11))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote genfun) "SYNTHESIZE 4" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 17 532) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 15 412) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote genfun) "SYNTHESIZE 3" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 671 533) nil nil nil nil 1) (om-load-editor-box1 "ADD-1 3" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 686 454) (om-make-point 95 66) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 10)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.05 2.11 3.16 4.21 5.26 6.32 7.37 8.42 9.47 10.53 11.58 12.63 13.68 14.74 15.79 16.84 17.89 18.95 20.0 21.05 22.11 23.16 24.21 25.26 26.32 27.37 28.42 29.47 30.53 31.58 32.63 33.68 34.74 35.79 36.84 37.89 38.95 40.0 41.05 42.11 43.16 44.21 45.26 46.32 47.37 48.42 49.47 50.53 51.58 52.63 53.68 54.74 55.79 56.84 57.89 58.95 60.0 61.05 62.11 63.16 64.21 65.26 66.32 67.37 68.42 69.47 70.53 71.58 72.63 73.68 74.74 75.79 76.84 77.89 78.95 80.0 81.05 82.11 83.16 84.21 85.26 86.32 87.37 88.42 89.47 90.53 91.58 92.63 93.68 94.74 95.79 96.84 97.89 98.95 100.0)) (quote (65535.92 58314.9 51889.52 46172.15 41084.71 36557.86 32529.76 28945.49 25756.16 22918.25 20393.02 18146.03 16146.64 14367.54 12784.46 11375.82 10122.39 9007.07 8014.62 7131.55 6345.76 5646.56 5024.4 4470.79 3978.18 3539.85 3149.81 2802.76 2493.94 2219.14 1974.63 1757.06 1563.46 1391.19 1237.9 1101.5 980.14 872.14 776.04 690.54 614.45 546.75 486.5 432.9 385.2 342.76 304.99 271.39 241.48 214.88 191.2 170.13 151.39 134.71 119.86 106.66 94.91 84.45 75.14 66.86 59.5 52.94 47.11 41.92 37.3 33.19 29.53 26.28 23.38 20.81 18.51 16.47 14.66 13.04 11.61 10.33 9.19 8.18 7.28 6.47 5.76 5.13 4.56 4.06 3.61 3.21 2.86 2.54 2.26 2.01 1.79 1.6 1.42 1.26 1.12 1.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 10) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.05 2.11 3.16 4.21 5.26 6.32 7.37 8.42 9.47 10.53 11.58 12.63 13.68 14.74 15.79 16.84 17.89 18.95 20.0 21.05 22.11 23.16 24.21 25.26 26.32 27.37 28.42 29.47 30.53 31.58 32.63 33.68 34.74 35.79 36.84 37.89 38.95 40.0 41.05 42.11 43.16 44.21 45.26 46.32 47.37 48.42 49.47 50.53 51.58 52.63 53.68 54.74 55.79 56.84 57.89 58.95 60.0 61.05 62.11 63.16 64.21 65.26 66.32 67.37 68.42 69.47 70.53 71.58 72.63 73.68 74.74 75.79 76.84 77.89 78.95 80.0 81.05 82.11 83.16 84.21 85.26 86.32 87.37 88.42 89.47 90.53 91.58 92.63 93.68 94.74 95.79 96.84 97.89 98.95 100.0)) (quote (65535.92 58314.9 51889.52 46172.15 41084.71 36557.86 32529.76 28945.49 25756.16 22918.25 20393.02 18146.03 16146.64 14367.54 12784.46 11375.82 10122.39 9007.07 8014.62 7131.55 6345.76 5646.56 5024.4 4470.79 3978.18 3539.85 3149.81 2802.76 2493.94 2219.14 1974.63 1757.06 1563.46 1391.19 1237.9 1101.5 980.14 872.14 776.04 690.54 614.45 546.75 486.5 432.9 385.2 342.76 304.99 271.39 241.48 214.88 191.2 170.13 151.39 134.71 119.86 106.66 94.91 84.45 75.14 66.86 59.5 52.94 47.11 41.92 37.3 33.19 29.53 26.28 23.38 20.81 18.51 16.47 14.66 13.04 11.61 10.33 9.19 8.18 7.28 6.47 5.76 5.13 4.56 4.06 3.61 3.21 2.86 2.54 2.26 2.01 1.79 1.6 1.42 1.26 1.12 1.0)) (quote gen07) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 44 40))) nil nil nil t) (om-load-editor-box1 "GS_09_E.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 678 598) (om-make-point 100 69) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "GS_09_E" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "GS_09_E.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 303 29) (om-make-point 893 646) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 755 136) (om-make-point 55 30) (list 96 0) "(96 0)" nil) (om-load-editor-box1 "BPF 14" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 663 157) (om-make-point 84 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (96 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "OM-SPLINE 4" (quote om-spline) (quote ((om-load-inputfun (quote input-funbox) "a BPF or BPC" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of points" "RESOLUTION" 100) (om-load-inputfun (quote input-funbox) "interpolation degree" "DEGREE" 3))) (om-make-point 684 258) (om-make-point 76 54) nil nil nil 3) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 729 230) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote abstraction) "dB" (om-load-patch-abs1 "dB" (quote ((om-load-boxcomment "comment" (om-make-point 207 30) (quote "This number is  a 1 dB increase.") "" (om-make-point 11 32) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 18 59) (om-make-point 129 30) 1.122462 "1.12246204830937" nil) (om-load-boxout "output" 0 (om-make-point 90 155) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "dB" nil) (om-load-boxin "input" 0 (om-make-point 155 53) "" "input" nil nil) (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 30 112) (om-make-point 149 39) nil nil nil 1))) (quote ((4 0 2 0 nil 0) (1 0 4 0 nil 0) (3 0 4 1 nil 0))) 6.060017 nil "" (om-make-point 53 314) (om-make-point 228 245)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 723 313) nil nil nil "dB"))) (quote ((4 0 3 0 nil 0) (0 0 3 1 nil 2) (6 0 3 2 nil 1) (88 0 4 5 nil 2) (7 0 4 8 nil 0) (3 0 5 0 nil 0) (31 0 29 0 nil 0) (88 0 30 5 nil 2) (32 0 30 8 nil 1) (30 0 31 0 nil 0) (16 0 31 1 nil 0) (27 0 32 1 nil 0) (28 0 32 2 nil 0) (56 0 54 0 nil 0) (13 0 54 1 nil 0) (54 0 55 0 nil 0) (53 0 56 5 nil 2) (67 0 56 8 nil 0) (63 0 61 0 nil 0) (57 0 61 1 nil 0) (64 0 63 0 nil 0) (62 0 63 1 nil 2) (60 0 64 0 nil 0) (69 1 67 1 nil 0) (68 0 67 2 nil 0) (65 0 67 3 nil 2) (69 2 68 0 nil 0) (70 0 69 0 nil 0) (61 0 69 1 nil 12) (66 0 69 2 nil 2) (58 0 70 1 nil 0) (60 0 70 2 nil 0) (77 0 71 2 nil 0) (94 1 73 1 nil 0) (96 0 73 2 nil 0) (72 0 73 3 nil 0) (75 0 74 0 nil 0) (15 0 74 1 nil 0) (88 0 75 5 nil 2) (71 0 75 8 nil 1) (74 0 76 0 nil 0) (79 0 77 0 nil 0) (78 0 79 0 nil 0) (82 0 79 1 nil 0) (81 0 82 0 nil 0) (80 0 82 1 nil 0) (87 0 85 0 nil 0) (88 0 86 5 nil 2) (83 0 86 8 nil 0) (86 0 87 0 nil 0) (17 0 87 1 nil 2) (84 0 87 2 nil 1) (90 0 89 0 nil 0) (14 0 89 1 nil 0) (88 0 90 5 nil 2) (73 0 90 8 nil 1) (89 0 91 0 nil 0) (92 0 93 2 nil 0) (93 0 94 0 nil 0) (59 0 94 1 nil 1) (95 0 94 2 nil 0) (94 2 96 0 nil 0))) nil 6.060017))
