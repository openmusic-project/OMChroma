; OM File Header - Saved 2013/10/29 22:34:30
; (6.0602 :patc (om-make-point 226 10) (om-make-point 188 123) (om-make-point 745 357) "" 183 0 "2012/12/10 12:13:17" "2013/08/31 17:51:19")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../out-files/smpl-4_A.aiff" "../../../../out-files/smpl-4_B.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "smpl-4" (quote ((om-load-boxcomment "comment 11" (om-make-point 75 34) (quote "SMPL-4") "" (om-make-point 159 260) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 10" (om-make-point 75 34) (quote "SMPL-3") "" (om-make-point 520 257) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-4" (quote smpl-4) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil))) (om-make-point 79 193) (om-make-point 240 69) (let ((rep (if (find-class (quote smpl-4) nil) (let ((rep (make-instance (quote smpl-4) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 5))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote durs)) 5)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote f0)) (list 1 -1))) (when (member (quote afil) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.5)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 5) (list 5 5) (list 0.0 0.0) (list 1 -1) (list 10 10) (list 0.5 0.5) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.1 0.1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 157 147) (om-make-point 34 30) 10 "10" nil) (om-load-boxcomment "comment 8" (om-make-point 41 34) (quote "afil") "" (om-make-point 155 124) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Synt&T" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 58 3) (om-make-point 351 30) "f10 0 0 -1 \"OMChroma_Tutorial/in-files/gliss.aiff\" 0 0 0" "\"f10 0 0 -1 \\\"OMChroma_Tutorial/in-files/gliss.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 110 36) (om-make-point 84 30) "smpl-4_A" "\"smpl-4_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 78 37) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 155 162) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 145 98) nil nil nil nil 1))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 4 2 nil 0))) 6.0602 nil "" (om-make-point 894 182) (om-make-point 432 246)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 14 128) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host :unspecific :name "smpl-4_A" :type "aiff")) nil "Synt&T") (om-load-editor-box1 "smpl-4_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 26 198) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-4_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-4_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment 7" (om-make-point 48 34) (quote "win") "" (om-make-point 281 122) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 232 145) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 282 147) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcomment "comment 6" (om-make-point 48 34) (quote "aenv") "" (om-make-point 233 122) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 48 34) (quote "skip") "" (om-make-point 188 123) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 31 27) (quote "f0") "" (om-make-point 132 66) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 77 124) nil (list 2 (list 0 5)) nil "C#ed") (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 85 90) (om-make-point 27 30) 5 "5" nil) (om-load-boxcomment "comment 3" (om-make-point 51 34) (quote "durs") "" (om-make-point 75 66) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 44 88) (quote "A") "" (om-make-point 23 63) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 192 147) (om-make-point 38 30) 0.5 "0.5" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 123 90) (om-make-point 53 30) (list 1 -1) "(1 -1)" nil) (om-load-editor-box1 "SMPL-3" (quote smpl-3) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil))) (om-make-point 430 190) (om-make-point 259 69) (let ((rep (if (find-class (quote smpl-3) nil) (let ((rep (make-instance (quote smpl-3) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 5))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote durs)) 5)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote f0)) (list 1 -1))) (when (member (quote afil) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote skip)) 2)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 5) (list 5 5) (list 0.0 0.0) (list 1 -1) (list 10 10) (list 2 2) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.1 0.1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 550 585) (om-make-point 56 40))) nil nil nil t) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 469 84) (om-make-point 53 30) (list 1 -1) "(1 -1)" nil) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 554 140) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 29" (om-make-point 44 88) (quote "B") "" (om-make-point 371 60) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 28" (om-make-point 51 34) (quote "durs") "" (om-make-point 424 59) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 433 83) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 426 117) nil (list 2 (list 0 5)) nil "C#ed") (om-load-boxcomment "comment 27" (om-make-point 31 27) (quote "f0") "" (om-make-point 479 58) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 25" (om-make-point 48 34) (quote "skip") "" (om-make-point 551 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 24" (om-make-point 48 34) (quote "aenv") "" (om-make-point 599 116) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 650 140) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 600 141) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 23" (om-make-point 48 34) (quote "win") "" (om-make-point 649 116) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-4_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 373 196) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-4_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-4_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt&T" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 158 106) (om-make-point 351 30) "f10 0 0 -1 \"OMChroma_Tutorial/in-files/gliss.aiff\" 0 0 0" "\"f10 0 0 -1 \\\"OMChroma_Tutorial/in-files/gliss.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 86 79) (om-make-point 84 30) "smpl-4_B" "\"smpl-4_B\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 102 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 92 143) nil nil nil nil 1))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 4 2 nil 0))) 6.0602 nil "" (om-make-point 814 164) (om-make-point 750 418)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 361 126) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-4_B" :type "aiff")) nil "Synt&T") (om-load-boxcomment "comment 20" (om-make-point 41 34) (quote "afil") "" (om-make-point 510 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 512 140) (om-make-point 34 30) 10 "10" nil) (om-load-boxcomment "comment 9" (om-make-point 28 253) (quote "|$|$|$|$|$$$") "" (om-make-point 324 22) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 298 34) (quote "Tutorial Smpl-4") "" (om-make-point 56 2) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((13 0 2 1 nil 0) (13 1 2 4 nil 0) (14 0 2 5 nil 3) (18 0 2 7 nil 1) (3 0 2 8 nil 0) (17 0 2 9 nil 0) (8 0 2 10 nil 0) (9 0 2 11 nil 0) (2 0 5 0 nil 2) (5 0 6 0 nil 0) (14 0 13 0 nil 3) (18 0 13 1 nil 1) (25 0 19 1 nil 0) (25 1 19 4 nil 0) (24 0 19 5 nil 3) (20 0 19 7 nil 1) (35 0 19 8 nil 0) (21 0 19 9 nil 0) (30 0 19 10 nil 0) (29 0 19 11 nil 0) (24 0 25 0 nil 3) (20 0 25 1 nil 1) (33 0 32 0 nil 0) (19 0 33 0 nil 2))) nil 6.0602))
