; OM File Header - Saved 2025/02/06 18:22:39
; (6.070009 :patc (om-make-point 181 183) (om-make-point 50 50) (om-make-point 668 643) "No documentation " 183 0 nil "2025/02/06 18:22:39")
; End File Header
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "all_advanced_classes" (quote ((om-load-boxcomment "comment11111112" (om-make-point 87 56) (quote "Sampling:$Deferred GEN$with flooper") "" (om-make-point 316 215) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "smpl-lp" (om-load-patch-abs1 "smpl-lp" (quote ((om-load-boxcomment "comment12111112" (om-make-point 59 28) (quote "NOT YET") "" (om-make-point 37 72) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote nil) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 318 263) nil nil nil "smpl-lp") (om-load-boxcomment "comment11111112" (om-make-point 87 42) (quote "Sampling:$Deferred GEN") "" (om-make-point 233 225) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "smpl-def" (om-load-patch-abs1 "smpl-def" (quote ((om-load-boxout "output 2" 1 (om-make-point 175 236) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "2synt" nil) (om-load-boxout "output" 0 (om-make-point 28 234) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "2synt" nil) (om-load-boxcomment "comment12111112 2" (om-make-point 51 28) (quote "smpl-a4") "" (om-make-point 211 176) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SMPL-A4" (quote smpl-a4) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil))) (om-make-point 175 108) (om-make-point 112 50) (let ((rep (if (find-class (quote smpl-a4) nil) (let ((rep (make-instance (quote smpl-a4) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote f0max)) 2.0)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.1)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 1.0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote jta)) 0.5)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list 2.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list 0.5) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t) (om-load-boxcomment "comment12111112" (om-make-point 51 28) (quote "smpl-a3") "" (om-make-point 91 176) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SMPL-A3" (quote smpl-a3) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil))) (om-make-point 28 109) (om-make-point 112 50) (let ((rep (if (find-class (quote smpl-a3) nil) (let ((rep (make-instance (quote smpl-a3) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote f0max)) 2.0)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.1)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 1.0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote jta)) 0.5)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote afil)) 31.0)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list 2.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list 0.5) (list 31.0) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t))) (quote ((3 0 0 0 nil 0) (5 0 1 0 nil 0))) 6.070009 nil "" (om-make-point 445 156) (om-make-point 400 500)) (quote nil) (om-make-point 251 261) nil (list (let ((rep (if (find-class (quote smpl-a3) nil) (let ((rep (make-instance (quote smpl-a3) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote f0max)) 2.0)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.1)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 1.0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote jta)) 0.5)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote afil)) 31.0)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a3)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list 2.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list 0.5) (list 31.0) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote smpl-a4) nil) (let ((rep (make-instance (quote smpl-a4) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote f0max)) 2.0)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.1)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 1.0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote jta)) 0.5)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote afil)) 31)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a4)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list 2.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list 0.5) (list 31) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01))) rep)))) (put-precision rep (list 3)) rep)) nil "smpl-def") (om-load-boxcomment "comment1111112" (om-make-point 71 56) (quote "Random$Amp$Modulation") "" (om-make-point 67 218) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "ran" (om-load-patch-abs1 "ran" (quote ((om-load-boxcomment "comment121121" (om-make-point 59 28) (quote "NOT YET") "" (om-make-point 22 45) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote nil) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 69 261) (om-make-point 32 66) nil nil "ran") (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 243 421) (om-make-point 119 30) "all_adv_classes" "\"all_adv_classes\"" nil) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 365 478) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport microplay zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 nil 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment11111112" (om-make-point 65 42) (quote "Sampling:$From disk") "" (om-make-point 151 228) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "smpl-dk" (om-load-patch-abs1 "smpl-dk" (quote ((om-load-editor-box1 "SMPL-A2" (quote smpl-a2) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 287 148) (om-make-point 120 50) (let ((rep (if (find-class (quote smpl-a2) nil) (let ((rep (make-instance (quote smpl-a2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0)) -2.0)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0max)) -1.0)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.1)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 1.0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote jta)) 0.5)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "marco" "Documents" "Workspaces" "Chromawk" "in-files" "Snd")) :device nil :host nil :name "santuri_96" :type "aif"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list -2.0) (list -1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list 0.5) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65536.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "SMPL-A1" (quote smpl-a1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :f0 :f0max :f0env :f0jta :f0dur :jta :afil :skip :aenv :win :wrap)" "Keyword input" (quote :afil) nil nil))) (om-make-point 135 149) (om-make-point 120 50) (let ((rep (if (find-class (quote smpl-a1) nil) (let ((rep (make-instance (quote smpl-a1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0max)) 2.0)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.1)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 1.0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0.5)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "marco" "Documents" "Workspaces" "Chromawk" "in-files" "Snd")) :device nil :host nil :name "santuri_96" :type "aif"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list 2.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list 0.5) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65536.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "SMPL-A1" (quote smpl-a1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 6 147) (om-make-point 120 50) (let ((rep (if (find-class (quote smpl-a1) nil) (let ((rep (make-instance (quote smpl-a1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0max)) 2.0)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.1)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 1.0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0.5)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "marco" "Documents" "Workspaces" "Chromawk" "in-files" "Snd")) :device nil :host nil :name "santuri_96" :type "aif"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list 2.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list 0.5) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65536.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment12111112" (om-make-point 52 28) (quote "smpl-a2") "" (om-make-point 321 202) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output2" 2 (om-make-point 230 239) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxout "output1" 1 (om-make-point 126 238) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxcomment "comment1211111211" (om-make-point 22 58) (quote "a") "" (om-make-point 98 69) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 24 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment12111112" (om-make-point 51 28) (quote "smpl-a1") "" (om-make-point 65 205) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 55 29) (om-make-point 97 30) "basmba.aiff" "\"basmba.aiff\"" nil) (om-load-boxcall (quote genfun) "INFILE2" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "NAME" nil))) (om-make-point 127 72) nil nil nil nil 1))) (quote ((10 0 1 4 nil 0) (0 0 4 0 nil 0) (1 0 5 0 nil 0) (2 0 6 0 nil 0) (9 0 10 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 161 260) nil (list (let ((rep (if (find-class (quote smpl-a1) nil) (let ((rep (make-instance (quote smpl-a1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0max)) 2.0)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.1)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 1.0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0.5)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65536.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list 2.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list 0.5) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65536.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote smpl-a1) nil) (let ((rep (make-instance (quote smpl-a1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0max)) 2.0)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.1)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 1.0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0.5)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "basmba" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65536.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list 2.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list 0.5) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "basmba" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65536.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote smpl-a2) nil) (let ((rep (make-instance (quote smpl-a2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0)) -2.0)) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0max)) -1.0)) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.1)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 1.0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote jta)) 0.5)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65536.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list -2.0) (list -1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 100.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list 0.5) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65536.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep)) nil "smpl-dk") (om-load-boxcomment "comment111111112" (om-make-point 369 42) (quote "OPEN THE RED PATCHES$AND TYPE d ON EACH CLASS TO GET THE DOCUMENTATION") "" (om-make-point 10 537) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "mixadd" (om-load-patch-abs1 "mixadd" (quote ((om-load-boxcomment "comment1211212" (om-make-point 59 28) (quote "NOT YET") "" (om-make-point 10 65) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote nil) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 363 364) nil nil nil "mixadd") (om-load-boxcall (quote abstraction) "wshp" (om-load-patch-abs1 "wshp" (quote ((om-load-boxcomment "comment121121111" (om-make-point 59 28) (quote "NOT YET") "" (om-make-point 17 51) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote nil) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 99 376) nil nil nil "wshp") (om-load-boxcall (quote abstraction) "sub" (om-load-patch-abs1 "sub" (quote ((om-load-boxcomment "comment12112111" (om-make-point 59 28) (quote "NOT YET") "" (om-make-point 33 64) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote nil) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 19 379) nil nil nil "sub") (om-load-boxcall (quote abstraction) "pluck" (om-load-patch-abs1 "pluck" (quote ((om-load-boxcomment "comment1211211" (om-make-point 59 28) (quote "NOT YET") "" (om-make-point 20 49) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote nil) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 20 260) nil nil nil "pluck") (om-load-boxcall (quote abstraction) "fog" (om-load-patch-abs1 "fog" (quote ((om-load-boxcomment "comment121121" (om-make-point 59 28) (quote "NOT YET") "" (om-make-point 22 45) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote nil) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 300 140) (om-make-point 32 66) nil nil "fog") (om-load-boxcall (quote abstraction) "fof" (om-load-patch-abs1 "fof" (quote ((om-load-editor-box1 "FOF-A4" (quote fof-a4) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 154 103) (om-make-point 240 50) (let ((rep (if (find-class (quote fof-a4) nil) (let ((rep (make-instance (quote fof-a4) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote f0)) 131.0)) (when (member (quote f0max) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote f0max)) 165.0)) (when (member (quote f0env) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.06)) (when (member (quote freq) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote freq)) 2.0)) (when (member (quote fqmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote fqmax)) 1.0)) (when (member (quote fqenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote fqenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote fqjta) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote fqjta)) 0.1)) (when (member (quote bw) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.0)) (when (member (quote bwmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote bwmax)) 0.0)) (when (member (quote bwenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote bwenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote aenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote winmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote winmax)) 0.1)) (when (member (quote winenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote winenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote wdur) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.1)) (when (member (quote wdurmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote wdurmax)) 1.0)) (when (member (quote wdurenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote wdurenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote wout) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.02)) (when (member (quote woutmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote woutmax)) 0.2)) (when (member (quote woutenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote woutenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote oct) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (when (member (quote octmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote octmax)) 1.0)) (when (member (quote octenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote octenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote afil) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote afil)) 32)) (when (member (quote mode) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote mode)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 131.0) (list 165.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.06) (list 2.0) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.1) (list 0.0) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.003) (list 0.1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.02) (list 0.2) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.0) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 32) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t)) (list 14 (quote t)) (list 15 (quote t)) (list 16 (quote t)) (list 17 (quote t)) (list 18 (quote t)) (list 19 (quote t)) (list 20 (quote t)) (list 21 (quote t)) (list 22 (quote t)) (list 23 (quote t)) (list 24 (quote t)) (list 25 (quote t)) (list 26 (quote t)) (list 27 (quote t)) (list 28 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil) (list 14 nil) (list 15 nil) (list 16 nil) (list 17 nil) (list 18 nil) (list 19 nil) (list 20 nil) (list 21 nil) (list 22 nil) (list 23 nil) (list 24 nil) (list 25 nil) (list 26 nil) (list 27 nil) (list 28 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "FOF-A1" (quote fof-a1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 15 100) (om-make-point 112 50) (let ((rep (if (find-class (quote fof-a1) nil) (let ((rep (make-instance (quote fof-a1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote bw) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 720.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote oct) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (when (member (quote phs) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (when (member (quote par1) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote par1)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 220.0) (list 609.0) (list 77.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1600.0 7200.0 65536.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.003) (list 0.02) (list 0.007) (list 0.0) (list 0) (list 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxout "output1" 1 (om-make-point 103 191) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxcomment "comment121122" (om-make-point 42 28) (quote "fof-a4") "" (om-make-point 221 66) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment12112" (om-make-point 40 28) (quote "fof-a1") "" (om-make-point 20 59) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 17 188) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil))) (quote ((0 0 2 0 nil 0) (1 0 5 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 220 140) (om-make-point 50 67) (list (let ((rep (if (find-class (quote fof-a1) nil) (let ((rep (make-instance (quote fof-a1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote freq)) 609.0)) (when (member (quote bw) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote bw)) 77.0)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1600.0 7200.0 65536.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.007)) (when (member (quote oct) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (when (member (quote phs) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote phs)) 0)) (when (member (quote par1) (get-init-slots-of-class (quote fof-a1)) :key (quote car)) (setf (slot-value rep (quote par1)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 220.0) (list 609.0) (list 77.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1600.0 7200.0 65536.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.003) (list 0.02) (list 0.007) (list 0.0) (list 0) (list 0))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote fof-a4) nil) (let ((rep (make-instance (quote fof-a4) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote f0)) 131.0)) (when (member (quote f0max) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote f0max)) 165.0)) (when (member (quote f0env) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.06)) (when (member (quote freq) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote freq)) 2.0)) (when (member (quote fqmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote fqmax)) 1.0)) (when (member (quote fqenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote fqenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote fqjta) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote fqjta)) 0.1)) (when (member (quote bw) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.0)) (when (member (quote bwmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote bwmax)) 0.0)) (when (member (quote bwenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote bwenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote aenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote winmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote winmax)) 0.1)) (when (member (quote winenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote winenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote wdur) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.1)) (when (member (quote wdurmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote wdurmax)) 1.0)) (when (member (quote wdurenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote wdurenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote wout) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.02)) (when (member (quote woutmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote woutmax)) 0.2)) (when (member (quote woutenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote woutenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote oct) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (when (member (quote octmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote octmax)) 1.0)) (when (member (quote octenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote octenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote afil) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote afil)) 32)) (when (member (quote mode) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote mode)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 131.0) (list 165.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.06) (list 2.0) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.1) (list 0.0) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.003) (list 0.1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.02) (list 0.2) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 0.0) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 65536.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 32) (list 1))) rep)))) (put-precision rep (list 3)) rep)) nil "fof") (om-load-boxcall (quote abstraction) "fm" (om-load-patch-abs1 "fm" (quote ((om-load-boxcomment "comment12111111" (om-make-point 59 28) (quote "NOT YET") "" (om-make-point 40 40) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote nil) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 140 140) nil nil nil "fm") (om-load-boxcall (quote abstraction) "buzz" (om-load-patch-abs1 "buzz" (quote ((om-load-boxcomment "comment121111" (om-make-point 59 28) (quote "NOT YET") "" (om-make-point 21 40) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote nil) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 80 140) nil nil nil "buzz") (om-load-boxcall (quote abstraction) "add" (om-load-patch-abs1 "add" (quote ((om-load-editor-box1 "ADD-A1" (quote add-a1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 16 61) (om-make-point 70 50) (let ((rep (if (find-class (quote add-a1) nil) (let ((rep (make-instance (quote add-a1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) 500.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 256.0 513.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote fdev) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote fdev)) 1.0)) (when (member (quote fenv) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote fenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 256.0 513.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 500.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65537.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65537.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment1211" (om-make-point 45 28) (quote "add-a1") "" (om-make-point 18 40) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 46 153) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil))) (quote ((0 0 2 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 20 140) nil (list (let ((rep (if (find-class (quote add-a1) nil) (let ((rep (make-instance (quote add-a1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) 500.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65537.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (when (member (quote fdev) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote fdev)) 1.0)) (when (member (quote fenv) (get-init-slots-of-class (quote add-a1)) :key (quote car)) (setf (slot-value rep (quote fenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65537.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 500.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65537.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 32768.0 65537.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 65537) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep)) nil "add") (om-load-boxcomment "comment121121221" (om-make-point 180 68) (quote "Connect one of the outputs$of each patch to synthesize$to try out how it sounds.") "" (om-make-point 457 472) nil (om-make-color 1 0 0) (om-make-font "Skia" 14 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :patch :sound :duration)" "Keyword input" (quote :name) nil nil))) (om-make-point 154 469) (om-make-point 146 58) nil nil nil 1) (om-load-boxcomment "comment111111111" (om-make-point 69 68) (quote "Mixed$additive$synthesis") "" (om-make-point 407 362) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 14 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11111111" (om-make-point 37 28) (quote "Buzz") "" (om-make-point 80 120) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1111111" (om-make-point 71 42) (quote "Frequency$Modulation") "" (om-make-point 140 106) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment111111" (om-make-point 52 42) (quote "Karplus$Strong") "" (om-make-point 15 224) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11111" (om-make-point 85 28) (quote "Waveshaping") "" (om-make-point 99 357) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1111" (om-make-point 71 42) (quote "Subtractive$synthesis") "" (om-make-point 17 344) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment111" (om-make-point 64 56) (quote "Granular$synthesis:$fog") "" (om-make-point 297 98) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 65 42) (quote "Formantic$Waveform") "" (om-make-point 220 109) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 54 28) (quote "Additive") "" (om-make-point 20 120) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Helvetica" 12 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 525 129) (quote "PRE-DEFINED$ADVANCED CLASSES: MONO") "" (om-make-point 64 0) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Sand" 36 :family "Sand" :style (quote (:bold)) :mode (quote nil))))) (quote ((21 0 7 0 nil 0) (3 1 21 0 nil 0) (6 0 21 1 nil 0))) nil 6.070009))
