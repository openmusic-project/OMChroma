; OM File Header - Saved 2025/02/06 18:22:39
; (6.070009 :patc (om-make-point 268 234) (om-make-point 50 50) (om-make-point 722 633) "No documentation " 183 0 nil "2025/02/06 18:22:39")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../out-files/smpl-def.aiff\""))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "all_basic_classes" (quote ((om-load-boxcomment "comment11111112 2" (om-make-point 160 56) (quote "Open this patch to see$an alternate way to specify$a global table") "" (om-make-point 366 262) nil (om-make-color 0.6 0.4 0.2) (om-make-font "Helvetica" 12.0 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11111112" (om-make-point 87 56) (quote "Sampling:$Deferred GEN$with flooper") "" (om-make-point 316 212) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "smpl-lp" (om-load-patch-abs1 "smpl-lp" (quote ((om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 304 450) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 267 386) (om-make-point 159 30) "f33 0 0 -1 \"~a\" 0 0 0" "\"f33 0 0 -1 \\\"~a\\\" 0 0 0\"" nil) (om-load-boxcall (quote lispfun) "FORMAT" (quote format) (quote ((om-load-inputfun (quote input-funbox) "DESTINATION" "DESTINATION" nil) (om-load-inputfun (quote input-funbox) "CONTROL-STRING" "CONTROL-STRING" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 367 436) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 394 298) (om-make-point 97 30) "basmba.aiff" "\"basmba.aiff\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 476 328) (om-make-point 49 30) (quote :unix) ":unix" nil) (om-load-boxcall (quote genfun) "INFILE" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" "") (om-load-inputkeyword (quote input-keyword) "unix format" "unix" (quote :unix) nil nil))) (om-make-point 456 358) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 209 30) (quote "-- or use the structure below.") nil (om-make-point 350 246) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 209 30) (quote "Write here your absolute path --") nil (om-make-point 330 146) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 391 34) (quote "ALTERNATE WAY TO SPECIFY A GLOBAL TABLE") nil (om-make-point 282 116) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-6" (quote smpl-6) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 217 38) (om-make-point 96 50) (let ((rep (if (find-class (quote smpl-6) nil) (let ((rep (make-instance (quote smpl-6) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote f0)) 2.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote afil)) 31.0)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.5)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) 0.3)) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote lpend)) 0.6)) (when (member (quote win) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote win)) 0.3)) (when (member (quote mode) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote mode)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 2.0) (list 31.0) (list 0.5) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.3) (list 0.6) (list 0.3) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "SMPL-51" (quote smpl-5) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :f0 :afil :skip :aenv :lpbeg :lpend :win :mode)" "Keyword input" (quote :afil) nil nil))) (om-make-point 113 38) (om-make-point 96 50) (let ((rep (if (find-class (quote smpl-5) nil) (let ((rep (make-instance (quote smpl-5) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote f0)) 2.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote afil)) 33)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) 0.2)) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpend)) 0.7)) (when (member (quote win) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote win)) 0.5)) (when (member (quote mode) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote mode)) 2)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 2.0) (list 33) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.2) (list 0.7) (list 0.5) (list 2))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "SMPL-5" (quote smpl-5) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 11 42) (om-make-point 96 50) (let ((rep (if (find-class (quote smpl-5) nil) (let ((rep (make-instance (quote smpl-5) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote f0)) 2.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote afil)) 31.0)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) 0.2)) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpend)) 0.7)) (when (member (quote win) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote win)) 0.5)) (when (member (quote mode) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote mode)) 2)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 2.0) (list 31.0) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.2) (list 0.7) (list 0.5) (list 2))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote bastype) "list11" (quote list) (quote nil) (om-make-point 174 182) (om-make-point 581 30) (list "f33  0 0  -1  \"/Users/concert/Documents/Workspaces/OM67_Chroma/in-files/count.aiff\" 0 0 0") "(\"f33  0 0  -1  \\\"/Users/concert/Documents/Workspaces/OM67_Chroma/in-files/count.aiff\\\" 0 0 0\")" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 155 7) (om-make-point 26 28) 33 "33" nil) (om-load-editor-box1 "smpl-def.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 19 353) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-def" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-def.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 108 206) (om-make-point 80 30) "smpl-def" "\"smpl-def\"" nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :patch :sound :duration)" "Keyword input" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :patch :sound :duration)" "Keyword input" (quote :tables) nil nil))) (om-make-point 81 269) nil nil nil nil 1) (om-load-boxcomment "comment12111112" (om-make-point 45 28) (quote "smpl-6") "" (om-make-point 248 89) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output1" 1 (om-make-point 228 125) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxout "output" 0 (om-make-point 5 130) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxcomment "comment12111112" (om-make-point 45 28) (quote "smpl-5") "" (om-make-point 48 102) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote ((2 0 0 0 nil 0) (1 0 2 1 nil 0) (5 0 2 2 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (13 0 10 4 nil 0) (16 0 14 0 nil 0) (10 0 16 0 nil 0) (15 0 16 1 nil 0) (0 0 16 2 nil 0) (9 0 18 0 nil 0) (11 0 19 0 nil 0))) 6.070009 nil "" (om-make-point 515 80) (om-make-point 804 517)) (quote nil) (om-make-point 317 258) nil (list (let ((rep (if (find-class (quote smpl-5) nil) (let ((rep (make-instance (quote smpl-5) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote f0)) 2.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote afil)) 31.0)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) 0.2)) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote lpend)) 0.7)) (when (member (quote win) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote win)) 0.5)) (when (member (quote mode) (get-init-slots-of-class (quote smpl-5)) :key (quote car)) (setf (slot-value rep (quote mode)) 2)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 2.0) (list 31.0) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.2) (list 0.7) (list 0.5) (list 2))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote smpl-6) nil) (let ((rep (make-instance (quote smpl-6) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote f0)) 2.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote afil)) 31.0)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.5)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote lpbeg) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote lpbeg)) 0.3)) (when (member (quote lpend) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote lpend)) 0.6)) (when (member (quote win) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote win)) 0.3)) (when (member (quote mode) (get-init-slots-of-class (quote smpl-6)) :key (quote car)) (setf (slot-value rep (quote mode)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 2.0) (list 31.0) (list 0.5) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.3) (list 0.6) (list 0.3) (list 1))) rep)))) (put-precision rep (list 3)) rep)) nil "smpl-lp") (om-load-boxcomment "comment11111112" (om-make-point 87 42) (quote "Sampling:$Deferred GEN") "" (om-make-point 233 225) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "smpl-def" (om-load-patch-abs1 "smpl-def" (quote ((om-load-editor-box1 "SMPL-4" (quote smpl-4) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 107 58) (om-make-point 72 50) (let ((rep (if (find-class (quote smpl-4) nil) (let ((rep (make-instance (quote smpl-4) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote f0)) -1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote afil)) 31.0)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.5)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4097.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list -1.0) (list 31.0) (list 0.5) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4097.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "SMPL-3" (quote smpl-3) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 22 55) (om-make-point 72 50) (let ((rep (if (find-class (quote smpl-3) nil) (let ((rep (make-instance (quote smpl-3) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote afil)) 31.0)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list 31.0) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment12111112" (om-make-point 45 28) (quote "smpl-4") "" (om-make-point 120 26) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output1" 1 (om-make-point 112 157) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxout "output" 0 (om-make-point 5 150) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxcomment "comment12111112" (om-make-point 45 28) (quote "smpl-3") "" (om-make-point 41 29) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote ((0 0 3 0 nil 0) (1 0 4 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 228 262) nil (list (let ((rep (if (find-class (quote smpl-3) nil) (let ((rep (make-instance (quote smpl-3) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote afil)) 31.0)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-3)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list 31.0) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote smpl-4) nil) (let ((rep (make-instance (quote smpl-4) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote f0)) -1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote afil)) 31.0)) (when (member (quote skip) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.5)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4097.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-4)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list -1.0) (list 31.0) (list 0.5) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4097.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01))) rep)))) (put-precision rep (list 3)) rep)) nil "smpl-def") (om-load-boxcomment "comment1111112" (om-make-point 71 56) (quote "Random$Amp$Modulation") "" (om-make-point 67 218) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "ran" (om-load-patch-abs1 "ran" (quote ((om-load-boxout "output1" 1 (om-make-point 143 190) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-editor-box1 "RANFL-1" (quote ranfl-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 129 77) (om-make-point 80 50) (let ((rep (if (find-class (quote ranfl-1) nil) (let ((rep (make-instance (quote ranfl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 263.8)) (when (member (quote freq) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1600.0)) (when (member (quote bw) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 500.0)) (when (member (quote aenv) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.03)) (when (member (quote wout) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.5)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 263.8) (list 1600.0) (list 500.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.03) (list 0.5))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment1211211" (om-make-point 44 28) (quote "ranfl-1") "" (om-make-point 136 45) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "RAN-1" (quote ran-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 24 72) (om-make-point 70 50) (let ((rep (if (find-class (quote ran-1) nil) (let ((rep (make-instance (quote ran-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote jtf) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 50.0)) (when (member (quote atk) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote atk)) 0.2)) (when (member (quote dec) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.3)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list 50.0) (list 0.2) (list 0.3))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxout "output" 0 (om-make-point 33 185) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxcomment "comment121121" (om-make-point 37 28) (quote "ran-1") "" (om-make-point 22 45) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote ((1 0 0 0 nil 0) (3 0 4 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 69 261) (om-make-point 32 66) (list (let ((rep (if (find-class (quote ran-1) nil) (let ((rep (make-instance (quote ran-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote jtf) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 50.0)) (when (member (quote atk) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote atk)) 0.2)) (when (member (quote dec) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.3)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list 50.0) (list 0.2) (list 0.3))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote ranfl-1) nil) (let ((rep (make-instance (quote ranfl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 263.8)) (when (member (quote freq) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1600.0)) (when (member (quote bw) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 500.0)) (when (member (quote aenv) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.03)) (when (member (quote wout) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.5)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 263.8) (list 1600.0) (list 500.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.03) (list 0.5))) rep)))) (put-precision rep (list 3)) rep)) nil "ran") (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 284 438) (om-make-point 127 30) "all_basic_classes" "\"all_basic_classes\"" nil) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 362 481) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport microplay zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 nil 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment11111112" (om-make-point 65 42) (quote "Sampling:$From disk") "" (om-make-point 151 228) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "smpl-dk" (om-load-patch-abs1 "smpl-dk" (quote ((om-load-boxcomment "comment12111112" (om-make-point 46 28) (quote "smpl-2") "" (om-make-point 248 199) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SMPL-2" (quote smpl-2) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 229 149) (om-make-point 80 50) (let ((rep (if (find-class (quote smpl-2) nil) (let ((rep (make-instance (quote smpl-2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote f0)) -1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "marco" "Documents" "Workspaces" "Chromawk" "in-files" "Snd")) :device nil :host nil :name "santuri_96" :type "aif"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote skip)) 1.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list -1.0) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff")) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxout "output2" 2 (om-make-point 230 239) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxout "output1" 1 (om-make-point 126 238) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-editor-box1 "SMPL-1" (quote smpl-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 14 149) (om-make-point 80 50) (let ((rep (if (find-class (quote smpl-1) nil) (let ((rep (make-instance (quote smpl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "marco" "Documents" "Workspaces" "Chromawk" "in-files" "Snd")) :device nil :host nil :name "santuri_96" :type "aif"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxcomment "comment1211111211" (om-make-point 22 58) (quote "a") "" (om-make-point 98 69) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 24 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment12111112" (om-make-point 45 28) (quote "smpl-1") "" (om-make-point 65 205) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 20 32) (om-make-point 97 30) "basmba.aiff" "\"basmba.aiff\"" nil) (om-load-boxcall (quote genfun) "INFILE2" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "NAME" nil))) (om-make-point 127 72) nil nil nil nil 1) (om-load-editor-box1 "SMPL-121" (quote smpl-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :xpf :afil :skip :aenv :wxin)" "Keyword input" (quote :afil) nil nil))) (om-make-point 101 149) (om-make-point 101 49) (let ((rep (if (find-class (quote smpl-1) nil) (let ((rep (make-instance (quote smpl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "marco" "Documents" "Workspaces" "Chromawk" "in-files" "Snd")) :device nil :host nil :name "santuri_96" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil))) (quote ((1 0 2 0 nil 0) (10 0 3 0 nil 0) (4 0 5 0 nil 0) (8 0 9 0 nil 0) (9 0 10 4 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 161 260) nil (list (let ((rep (if (find-class (quote smpl-1) nil) (let ((rep (make-instance (quote smpl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote smpl-1) nil) (let ((rep (make-instance (quote smpl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "basmba" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list 1.0) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "basmba" :type "aiff")) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote smpl-2) nil) (let ((rep (make-instance (quote smpl-2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote f0)) -1.0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote skip)) 1.0)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-2)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 0.0) (list -1.0) (list (om-make-pathname :directory (quote (:absolute "Users" "concert" "Documents" "Workspaces" "OM67_Chroma" "in-files")) :device nil :host nil :name "santuri" :type "aiff")) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 1))) rep)))) (put-precision rep (list 3)) rep)) nil "smpl-dk") (om-load-boxcomment "comment111111112" (om-make-point 340 42) (quote "OPEN THE RED PATCHES AND$TYPE d ON EACH CLASS TO GET THE DOCUMENTATION") "" (om-make-point 124 60) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "mixadd" (om-load-patch-abs1 "mixadd" (quote ((om-load-boxout "output1" 1 (om-make-point 124 146) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-editor-box1 "SNARE-1" (quote snare-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 128 82) (om-make-point 72 50) (let ((rep (if (find-class (quote snare-1) nil) (let ((rep (make-instance (quote snare-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 200.0)) (when (member (quote freq) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 20.0)) (when (member (quote inha) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote inha)) 75.0)) (when (member (quote jta) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jta)) 250.0)) (when (member (quote jtf) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 4000.0)) (when (member (quote bw) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 1500.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 200.0) (list 20.0) (list 75.0) (list 250.0) (list 4000.0) (list 1500.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "RAN-1" (quote ran-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 12 86) (om-make-point 70 50) (let ((rep (if (find-class (quote ran-1) nil) (let ((rep (make-instance (quote ran-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote jtf) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 50.0)) (when (member (quote atk) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote atk)) 0.2)) (when (member (quote dec) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.3)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list 50.0) (list 0.2) (list 0.3))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment12112121" (om-make-point 48 28) (quote "snare-1") "" (om-make-point 127 64) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1211212" (om-make-point 37 28) (quote "ran-1") "" (om-make-point 10 65) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11111111111" (om-make-point 82 56) (quote "Noise+$Inharmonic+$Fundamental") "" (om-make-point 128 13) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1111111111" (om-make-point 121 42) (quote "Random modulation$of amplitude") "" (om-make-point 8 28) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 10 149) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil))) (quote ((1 0 0 0 nil 0) (2 0 7 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 246 363) nil (list (let ((rep (if (find-class (quote ran-1) nil) (let ((rep (make-instance (quote ran-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote jtf) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 50.0)) (when (member (quote atk) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote atk)) 0.2)) (when (member (quote dec) (get-init-slots-of-class (quote ran-1)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.3)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list 50.0) (list 0.2) (list 0.3))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote snare-1) nil) (let ((rep (make-instance (quote snare-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 200.0)) (when (member (quote freq) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 20.0)) (when (member (quote inha) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote inha)) 75.0)) (when (member (quote jta) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jta)) 250.0)) (when (member (quote jtf) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 4000.0)) (when (member (quote bw) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 1500.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 200.0) (list 20.0) (list 75.0) (list 250.0) (list 4000.0) (list 1500.0))) rep)))) (put-precision rep (list 3)) rep)) nil "mixadd") (om-load-boxcall (quote abstraction) "wshp" (om-load-patch-abs1 "wshp" (quote ((om-load-editor-box1 "WSHP-11" (quote wshp-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 14 74) (om-make-point 70 50) (let ((rep (if (find-class (quote wshp-1) nil) (let ((rep (make-instance (quote wshp-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote wshp-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote wshp-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote wshp-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote wshp-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 220.0)) (when (member (quote atk) (get-init-slots-of-class (quote wshp-1)) :key (quote car)) (setf (slot-value rep (quote atk)) 0.085)) (when (member (quote dec) (get-init-slots-of-class (quote wshp-1)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.64)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 500.0) (list 220.0) (list 0.085) (list 0.64))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment121121111" (om-make-point 47 23) (quote "wshp-1") "" (om-make-point 17 51) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 14 144) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil))) (quote ((0 0 2 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 99 366) nil (list (let ((rep (if (find-class (quote wshp-1) nil) (let ((rep (make-instance (quote wshp-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote wshp-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote wshp-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote wshp-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 500.0)) (when (member (quote freq) (get-init-slots-of-class (quote wshp-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 220.0)) (when (member (quote atk) (get-init-slots-of-class (quote wshp-1)) :key (quote car)) (setf (slot-value rep (quote atk)) 0.085)) (when (member (quote dec) (get-init-slots-of-class (quote wshp-1)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.64)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 500.0) (list 220.0) (list 0.085) (list 0.64))) rep)))) (put-precision rep (list 3)) rep)) nil "wshp") (om-load-boxcall (quote abstraction) "sub" (om-load-patch-abs1 "sub" (quote ((om-load-editor-box1 "SUB-1" (quote sub-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 35 85) (om-make-point 70 50) (let ((rep (if (find-class (quote sub-1) nil) (let ((rep (make-instance (quote sub-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote sub-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote sub-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote sub-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote sub-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 2000.0)) (when (member (quote bw) (get-init-slots-of-class (quote sub-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.01)) (when (member (quote aenv) (get-init-slots-of-class (quote sub-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 256.0 512.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 2000.0) (list 0.01) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment12112111" (om-make-point 41 23) (quote "sub-1") "" (om-make-point 33 64) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 21 150) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil))) (quote ((0 0 2 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 19 369) nil (list (let ((rep (if (find-class (quote sub-1) nil) (let ((rep (make-instance (quote sub-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote sub-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote sub-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote sub-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote sub-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 2000.0)) (when (member (quote bw) (get-init-slots-of-class (quote sub-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.01)) (when (member (quote aenv) (get-init-slots-of-class (quote sub-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 2000.0) (list 0.01) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep)) nil "sub") (om-load-boxcall (quote abstraction) "pluck" (om-load-patch-abs1 "pluck" (quote ((om-load-boxcomment "comment12112111" (om-make-point 47 28) (quote "pluck-2") "" (om-make-point 120 48) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output1" 1 (om-make-point 119 137) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-editor-box1 "PLUCK-2" (quote pluck-2) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 118 80) (om-make-point 88 50) (let ((rep (if (find-class (quote pluck-2) nil) (let ((rep (make-instance (quote pluck-2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote buf) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote buf)) 220.0)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.8)) (when (member (quote ranfun) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote ranfun)) 0)) (when (member (quote meth) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote meth)) 4)) (when (member (quote par1) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par1)) 0.5)) (when (member (quote par2) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par2)) 2.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list 220.0) (list 0.8) (list 0) (list 4) (list 0.5) (list 10.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "PLUCK-1" (quote pluck-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 20 80) (om-make-point 70 50) (let ((rep (if (find-class (quote pluck-1) nil) (let ((rep (make-instance (quote pluck-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.8)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list 0.8))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment1211211" (om-make-point 47 28) (quote "pluck-1") "" (om-make-point 20 49) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 17 140) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil))) (quote ((2 0 1 0 nil 0) (3 0 5 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 20 260) nil (list (let ((rep (if (find-class (quote pluck-1) nil) (let ((rep (make-instance (quote pluck-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-1)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.8)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list 0.8))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote pluck-2) nil) (let ((rep (make-instance (quote pluck-2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote buf) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote buf)) 220.0)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.8)) (when (member (quote ranfun) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote ranfun)) 0)) (when (member (quote meth) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote meth)) 4)) (when (member (quote par1) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par1)) 0.5)) (when (member (quote par2) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par2)) 10.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list 220.0) (list 0.8) (list 0) (list 4) (list 0.5) (list 10.0))) rep)))) (put-precision rep (list 3)) rep)) nil "pluck") (om-load-boxcall (quote abstraction) "fog" (om-load-patch-abs1 "fog" (quote ((om-load-boxout "output" 0 (om-make-point 33 185) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-editor-box1 "FOG-1" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 16 80) (om-make-point 112 50) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100.0)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.0)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 31.0)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1.0)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.1)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.05)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 100.0) (list 1.0) (list 0.0) (list 31.0) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 0.1) (list 0.05) (list 0.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment121121" (om-make-point 37 28) (quote "fog-1") "" (om-make-point 22 45) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))))) (quote ((1 0 0 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 300 140) (om-make-point 32 66) (list (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100.0)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.0)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 31.0)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1.0)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.1)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.05)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 100.0) (list 1.0) (list 0.0) (list 31.0) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 0.1) (list 0.05) (list 0.0))) rep)))) (put-precision rep (list 3)) rep)) nil "fog") (om-load-boxcall (quote abstraction) "fof" (om-load-patch-abs1 "fof" (quote ((om-load-boxout "output3" 3 (om-make-point 330 195) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxout "output2" 2 (om-make-point 211 196) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxcomment "comment12112211" (om-make-point 35 28) (quote "fof-4") "" (om-make-point 330 62) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1211221" (om-make-point 35 28) (quote "fof-3") "" (om-make-point 211 60) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "FOF-4" (quote fof-4) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 329 100) (om-make-point 104 50) (let ((rep (if (find-class (quote fof-4) nil) (let ((rep (make-instance (quote fof-4) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote freq)) 5.0)) (when (member (quote bw) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.05)) (when (member (quote oct) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (when (member (quote afil) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote afil)) 32)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 220.0) (list 5.0) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.003) (list 0.02) (list 0.05) (list 0.0) (list 32))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "FOF-3" (quote fof-3) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 217 99) (om-make-point 104 50) (let ((rep (if (find-class (quote fof-3) nil) (let ((rep (make-instance (quote fof-3) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote f0)) 2.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote freq)) 880.0)) (when (member (quote bw) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote bw)) 1.5)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote wdur)) 1.0)) (when (member (quote wout) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.2)) (when (member (quote oct) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote oct)) 1.0)) (when (member (quote fdev) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote fdev)) 1.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 2.0) (list 880.0) (list 1.5) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list 0.2) (list 1.0) (list 1.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxout "output1" 1 (om-make-point 103 191) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-editor-box1 "FOF-2" (quote fof-2) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 100 100) (om-make-point 104 50) (let ((rep (if (find-class (quote fof-2) nil) (let ((rep (make-instance (quote fof-2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 4.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 609)) (when (member (quote bw) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote bw)) 1.5)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.2)) (when (member (quote wout) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.1)) (when (member (quote oct) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 4.0) (list 609) (list 1.5) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 0.2) (list 0.1) (list 0.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "FOF-1" (quote fof-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 20 100) (om-make-point 70 50) (let ((rep (if (find-class (quote fof-1) nil) (let ((rep (make-instance (quote fof-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 609)) (when (member (quote bw) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 77)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 80.0 3600.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 220.0) (list 609) (list 77) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 80.0 3600.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment121122" (om-make-point 35 28) (quote "fof-2") "" (om-make-point 99 60) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment12112" (om-make-point 34 28) (quote "fof-1") "" (om-make-point 20 60) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 17 188) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil))) (quote ((4 0 0 0 nil 0) (5 0 1 0 nil 0) (7 0 6 0 nil 0) (8 0 11 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 220 140) nil (list (let ((rep (if (find-class (quote fof-1) nil) (let ((rep (make-instance (quote fof-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 609)) (when (member (quote bw) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 77)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 80.0 3600.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 220.0) (list 609) (list 77) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 80.0 3600.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote fof-2) nil) (let ((rep (make-instance (quote fof-2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 4.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 609)) (when (member (quote bw) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote bw)) 1.5)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.2)) (when (member (quote wout) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.1)) (when (member (quote oct) (get-init-slots-of-class (quote fof-2)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 4.0) (list 609) (list 1.5) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 0.2) (list 0.1) (list 0.0))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote fof-3) nil) (let ((rep (make-instance (quote fof-3) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote f0)) 2.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote freq)) 880.0)) (when (member (quote bw) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote bw)) 1.5)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote wdur)) 1.0)) (when (member (quote wout) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.2)) (when (member (quote oct) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote oct)) 1.0)) (when (member (quote fdev) (get-init-slots-of-class (quote fof-3)) :key (quote car)) (setf (slot-value rep (quote fdev)) 1.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 2.0) (list 880.0) (list 1.5) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 512.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.1) (list 1.0) (list 0.2) (list 1.0) (list 1.0))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote fof-4) nil) (let ((rep (make-instance (quote fof-4) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote freq)) 5.0)) (when (member (quote bw) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.0)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.02)) (when (member (quote wout) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.05)) (when (member (quote oct) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (when (member (quote afil) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote afil)) 32)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 220.0) (list 5.0) (list 0.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.003) (list 0.02) (list 0.05) (list 0.0) (list 32))) rep)))) (put-precision rep (list 3)) rep)) nil "fof") (om-load-boxcall (quote abstraction) "fm" (om-load-patch-abs1 "fm" (quote ((om-load-boxcomment "comment121111111" (om-make-point 35 28) (quote "fm-2") "" (om-make-point 160 40) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment12111111" (om-make-point 34 28) (quote "fm-1") "" (om-make-point 40 40) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output1" 1 (om-make-point 161 189) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-editor-box1 "FM-2" (quote fm-2) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 160 80) (om-make-point 88 50) (let ((rep (if (find-class (quote fm-2) nil) (let ((rep (make-instance (quote fm-2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 100.0)) (when (member (quote freq) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 500.0)) (when (member (quote fmod) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote fmod)) 100.0)) (when (member (quote imax) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote imax)) 5)) (when (member (quote imin) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote imin)) 0)) (when (member (quote aenv) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote ienv) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote ienv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 100.0) (list 500.0) (list 100.0) (list 5) (list 0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "FM-1" (quote fm-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 19 80) (om-make-point 88 50) (let ((rep (if (find-class (quote fm-1) nil) (let ((rep (make-instance (quote fm-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 55.0)) (when (member (quote n1) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote n1)) 5)) (when (member (quote n2) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote n2)) 7)) (when (member (quote imax) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote imax)) 10)) (when (member (quote imin) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote imin)) 1)) (when (member (quote aenv) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen05) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0E-4)) (quote gen05) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote ienv) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote ienv)) (let ((newobj (when (find-class (quote gen05) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 0.1)) (quote gen05) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 55.0) (list 5) (list 7) (list 10) (list 1) (list (let ((newobj (when (find-class (quote gen05) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0E-4)) (quote gen05) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list (let ((newobj (when (find-class (quote gen05) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 0.1)) (quote gen05) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxout "output" 0 (om-make-point 38 181) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil))) (quote ((3 0 2 0 nil 0) (4 0 5 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 139 140) nil (list (let ((rep (if (find-class (quote fm-1) nil) (let ((rep (make-instance (quote fm-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 55.0)) (when (member (quote n1) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote n1)) 5)) (when (member (quote n2) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote n2)) 7)) (when (member (quote imax) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote imax)) 10)) (when (member (quote imin) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote imin)) 1)) (when (member (quote aenv) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen05) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0E-4)) (quote gen05) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (when (member (quote ienv) (get-init-slots-of-class (quote fm-1)) :key (quote car)) (setf (slot-value rep (quote ienv)) (let ((newobj (when (find-class (quote gen05) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 0.1)) (quote gen05) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 55.0) (list 5) (list 7) (list 10) (list 1) (list (let ((newobj (when (find-class (quote gen05) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 1.0E-4)) (quote gen05) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list (let ((newobj (when (find-class (quote gen05) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (1.0 0.1)) (quote gen05) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote fm-2) nil) (let ((rep (make-instance (quote fm-2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 100.0)) (when (member (quote freq) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 500.0)) (when (member (quote fmod) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote fmod)) 100.0)) (when (member (quote imax) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote imax)) 5)) (when (member (quote imin) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote imin)) 0)) (when (member (quote aenv) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote ienv) (get-init-slots-of-class (quote fm-2)) :key (quote car)) (setf (slot-value rep (quote ienv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 100.0) (list 500.0) (list 100.0) (list 5) (list 0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep)) nil "fm") (om-load-boxcall (quote abstraction) "buzz" (om-load-patch-abs1 "buzz" (quote ((om-load-boxcomment "comment12111111" (om-make-point 46 28) (quote "bzfl-1") "" (om-make-point 218 38) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output2" 2 (om-make-point 223 179) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-editor-box1 "BZFL-1" (quote bzfl-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset (s)" "action-time" 0) (om-load-inputfun (quote input-funbox) "A parsing function applied to each component" "user-fun" nil))) (om-make-point 218 80) (om-make-point 104 50) (let ((rep (if (find-class (quote bzfl-1) nil) (let ((rep (make-instance (quote bzfl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 263.8)) (when (member (quote freq) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1000.0)) (when (member (quote aenv) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote bzl) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote bzl)) 1)) (when (member (quote bzh) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote bzh)) 0.9)) (when (member (quote bzm) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote bzm)) 1.0)) (when (member (quote bzmenv) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote bzmenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.03)) (when (member (quote wout) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.07)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 263.8) (list 1000.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 1) (list 0.9) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.03) (list 0.07))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "BUZZ-2" (quote buzz-2) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 120 80) (om-make-point 80 50) (let ((rep (if (find-class (quote buzz-2) nil) (let ((rep (make-instance (quote buzz-2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 100.0)) (when (member (quote aenv) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote bzl) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote bzl)) 200.0)) (when (member (quote bzh) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote bzh)) 5000.0)) (when (member (quote bzm) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote bzm)) 0.95)) (when (member (quote bzmenv) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote bzmenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 100.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 200.0) (list 5000.0) (list 0.95) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxout "output1" 1 (om-make-point 119 180) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-editor-box1 "BUZZ-1" (quote buzz-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 20 80) (om-make-point 80 50) (let ((rep (if (find-class (quote buzz-1) nil) (let ((rep (make-instance (quote buzz-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote aenv) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote bzl) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzl)) 1)) (when (member (quote bzh) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzh)) 1.0)) (when (member (quote bzm) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzm)) 0.95)) (when (member (quote bzmenv) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzmenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 220.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 1) (list 1.0) (list 0.95) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment1211111" (om-make-point 46 28) (quote "buzz-2") "" (om-make-point 120 40) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment121111" (om-make-point 45 28) (quote "buzz-1") "" (om-make-point 20 40) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 19 180) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil))) (quote ((2 0 1 0 nil 0) (3 0 4 0 nil 0) (5 0 8 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 80 140) nil (list (let ((rep (if (find-class (quote buzz-1) nil) (let ((rep (make-instance (quote buzz-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote aenv) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote bzl) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzl)) 1)) (when (member (quote bzh) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzh)) 1.0)) (when (member (quote bzm) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzm)) 0.95)) (when (member (quote bzmenv) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzmenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 220.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 1) (list 1.0) (list 0.95) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote buzz-2) nil) (let ((rep (make-instance (quote buzz-2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 100.0)) (when (member (quote aenv) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote bzl) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote bzl)) 200.0)) (when (member (quote bzh) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote bzh)) 5000.0)) (when (member (quote bzm) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote bzm)) 0.95)) (when (member (quote bzmenv) (get-init-slots-of-class (quote buzz-2)) :key (quote car)) (setf (slot-value rep (quote bzmenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 100.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 200.0) (list 5000.0) (list 0.95) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote bzfl-1) nil) (let ((rep (make-instance (quote bzfl-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 263.8)) (when (member (quote freq) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1000.0)) (when (member (quote aenv) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote bzl) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote bzl)) 1)) (when (member (quote bzh) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote bzh)) 0.9)) (when (member (quote bzm) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote bzm)) 1.0)) (when (member (quote bzmenv) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote bzmenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.03)) (when (member (quote wout) (get-init-slots-of-class (quote bzfl-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.07)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 263.8) (list 1000.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 1) (list 0.9) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.03) (list 0.07))) rep)))) (put-precision rep (list 3)) rep)) nil "buzz") (om-load-boxcall (quote abstraction) "add" (om-load-patch-abs1 "add" (quote ((om-load-editor-box1 "ADD-3" (quote add-3) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 180 80) (om-make-point 72 50) (let ((rep (if (find-class (quote add-3) nil) (let ((rep (make-instance (quote add-3) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote fdev) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote fdev)) 0.06)) (when (member (quote vfq) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote vfq)) 1.0)) (when (member (quote fenv) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote fenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.06) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "ADD-2" (quote add-2) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 100 80) (om-make-point 72 50) (let ((rep (if (find-class (quote add-2) nil) (let ((rep (make-instance (quote add-2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 440.0)) (when (member (quote atk) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote atk)) 0.003)) (when (member (quote dec) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.01)) (when (member (quote scal) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote scal)) 1.0)) (when (member (quote jtf) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote jtf)) 0.02)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list 0.003) (list 0.01) (list 1.0) (list 0.02))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxout "output2" 2 (om-make-point 160 220) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxout "output1" 1 (om-make-point 100 220) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil) (om-load-boxcomment "comment121112" (om-make-point 40 28) (quote "add-3") "" (om-make-point 180 40) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment12111" (om-make-point 40 28) (quote "add-2") "" (om-make-point 100 40) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1211" (om-make-point 39 28) (quote "add-1") "" (om-make-point 18 40) nil (om-make-color 28/51 97/255 11/51) (om-make-font "Skia" 12 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numrows" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 20 80) (om-make-point 70 50) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 500.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 256.0 513.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxout "output" 0 (om-make-point 40 220) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "2synt" nil))) (quote ((0 0 2 0 nil 0) (1 0 3 0 nil 0) (7 0 8 0 nil 0))) 6.070009 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 20 140) nil (list (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote add-2) nil) (let ((rep (make-instance (quote add-2) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 440.0)) (when (member (quote atk) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote atk)) 0.003)) (when (member (quote dec) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.01)) (when (member (quote scal) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote scal)) 1.0)) (when (member (quote jtf) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote jtf)) 0.02)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list 0.003) (list 0.01) (list 1.0) (list 0.02))) rep)))) (put-precision rep (list 3)) rep) (let ((rep (if (find-class (quote add-3) nil) (let ((rep (make-instance (quote add-3) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote fdev) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote fdev)) 0.06)) (when (member (quote vfq) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote vfq)) 1.0)) (when (member (quote fenv) (get-init-slots-of-class (quote add-3)) :key (quote car)) (setf (slot-value rep (quote fenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.06) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4096.0)) (quote (0.0 1.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep)) nil "add") (om-load-boxcomment "comment121121221" (om-make-point 180 68) (quote "Connect one of the outputs$of each patch to synthesize$to try out how it sounds.") "" (om-make-point 457 472) nil (om-make-color 1 0 0) (om-make-font "Skia" 14 :family "Skia" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:name :sr :rescale :run :evt-test :resolution :kr :tables :nchnls :patch :sound :duration)" "Keyword input" (quote :name) nil nil))) (om-make-point 154 469) (om-make-point 146 58) nil nil nil 1) (om-load-boxcomment "comment111111111" (om-make-point 69 68) (quote "Mixed$additive$synthesis") "" (om-make-point 290 362) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 14 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11111111" (om-make-point 37 28) (quote "Buzz") "" (om-make-point 80 120) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1111111" (om-make-point 71 42) (quote "Frequency$Modulation") "" (om-make-point 140 106) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment111111" (om-make-point 52 42) (quote "Karplus$Strong") "" (om-make-point 15 224) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11111" (om-make-point 85 28) (quote "Waveshaping") "" (om-make-point 99 347) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1111" (om-make-point 71 42) (quote "Subtractive$synthesis") "" (om-make-point 17 334) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment111" (om-make-point 64 56) (quote "Granular$synthesis:$fog") "" (om-make-point 297 98) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 65 42) (quote "Formantic$Waveform") "" (om-make-point 220 109) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Sand" 12 :family "Sand" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 54 28) (quote "Additive") "" (om-make-point 20 120) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Helvetica" 12 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 575 86) (quote "PRE-DEFINED CLASSES: MONO") "" (om-make-point 57 0) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Sand" 36 :family "Sand" :style (quote (:bold)) :mode (quote nil))))) (quote ((22 0 8 0 nil 0) (12 1 22 0 nil 0) (7 0 22 1 nil 0))) nil 6.070009))
