; OM File Header - Saved 2025/02/06 18:22:39
; (6.0602 :patc (om-make-point 226 10) (om-make-point 436 232) (om-make-point 1183 559) "" 183 0 nil "2025/02/06 18:22:39")
; End File Header
; External resources 
; (list (list (quote :sound) "../out-files/ranfl-1_E.aiff" "../out-files/ranfl-1_A.aiff" "../out-files/ranfl-1_C.aiff" "../out-files/ranfl-1_B.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "ranfl-1" (quote ((om-load-boxcomment "comment 53" (om-make-point 1069 88) (quote "______________________________________________") "" (om-make-point 29 206) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 36" (quote t) (quote nil) (om-make-point 978 361) (om-make-point 48 30) 2000 "2000" nil) (om-load-boxcall (quote bastype) "aux 35" (quote t) (quote nil) (om-make-point 929 361) (om-make-point 48 30) 1000 "1000" nil) (om-load-boxcall (quote bastype) "aux 34" (quote t) (quote nil) (om-make-point 913 303) (om-make-point 128 30) (list 0.01 0.05 0.1 0.5) "(0.01 0.05 0.1 0.5)" nil) (om-load-boxcall (quote bastype) "aux 33" (quote t) (quote nil) (om-make-point 881 361) (om-make-point 48 30) 1000 "1000" nil) (om-load-boxcomment "comment 55" (om-make-point 56 34) (quote "win") "" (om-make-point 1069 335) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 32" (quote t) (quote nil) (om-make-point 1075 360) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-editor-box1 "BPF 10" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 1029 360) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 54" (om-make-point 48 34) (quote "aenv") "" (om-make-point 1026 335) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "RANFL-1 6" (quote ranfl-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil))) (om-make-point 837 407) (om-make-point 273 62) (let ((rep (if (find-class (quote ranfl-1) nil) (let ((rep (make-instance (quote ranfl-1) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6))) (when (member (quote durs) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1000)) (when (member (quote freq) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1000)) (when (member (quote bw) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 2000)) (when (member (quote aenv) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote win) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote wout) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote wout)) (list 0.01 0.05 0.1 0.5))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6) (list 2 2 2 2) (list -6.0 -6.0 -6.0 -6.0) (list 1000 1000 1000 1000) (list 1000 1000 1000 1000) (list 2000 2000 2000 2000) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.1 0.1 0.1 0.1) (list 0.01 0.05 0.1 0.5))) rep)))) (setf (precision rep) (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil) (om-load-boxcomment "comment 52" (om-make-point 40 31) (quote "bw") "" (om-make-point 976 336) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 51" (om-make-point 44 88) (quote "F") "" (om-make-point 789 278) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 50" (om-make-point 51 34) (quote "durs") "" (om-make-point 843 275) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 853 299) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote abstraction) "C#ed 6" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 844 337) nil nil nil "C#ed") (om-load-boxcomment "comment 49" (om-make-point 40 31) (quote "f0") "" (om-make-point 889 336) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "ranfl-1_E.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 783 409) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ranfl-1_E" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ranfl-1_E.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 410 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 6" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 89) (om-make-point 82 30) "ranfl-1_E" "\"ranfl-1_E\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 782 340) (om-make-point 51 67) nil nil "Synt") (om-load-boxcomment "comment 48" (om-make-point 51 34) (quote "freq") "" (om-make-point 934 336) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 47" (om-make-point 48 34) (quote "wout") "" (om-make-point 956 277) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 46" (om-make-point 25 207) (quote "|$|$|$|$$") "" (om-make-point 392 276) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 30" (quote t) (quote nil) (om-make-point 551 304) (om-make-point 128 30) (list 0.01 0.05 0.1 0.5) "(0.01 0.05 0.1 0.5)" nil) (om-load-boxcall (quote bastype) "aux 29" (quote t) (quote nil) (om-make-point 519 362) (om-make-point 48 30) 1000 "1000" nil) (om-load-boxcomment "comment 45" (om-make-point 56 34) (quote "wout") "" (om-make-point 707 336) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 713 361) (om-make-point 38 30) 0.5 "0.5" nil) (om-load-editor-box1 "BPF 9" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 667 361) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 44" (om-make-point 48 34) (quote "aenv") "" (om-make-point 664 336) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "RANFL-1 5" (quote ranfl-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil))) (om-make-point 475 408) (om-make-point 273 62) (let ((rep (if (find-class (quote ranfl-1) nil) (let ((rep (make-instance (quote ranfl-1) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6))) (when (member (quote durs) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1000)) (when (member (quote freq) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1000)) (when (member (quote bw) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 2000)) (when (member (quote aenv) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote win) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote win)) (list 0.01 0.05 0.1 0.5))) (when (member (quote wout) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.5)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6) (list 2 2 2 2) (list -6.0 -6.0 -6.0 -6.0) (list 1000 1000 1000 1000) (list 1000 1000 1000 1000) (list 2000 2000 2000 2000) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.01 0.05 0.1 0.5) (list 0.5 0.5 0.5 0.5))) rep)))) (setf (precision rep) (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil) (om-load-boxcomment "comment 43" (om-make-point 25 207) (quote "|$|$|$|$$") "" (om-make-point 753 272) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 27" (quote t) (quote nil) (om-make-point 616 362) (om-make-point 48 30) 2000 "2000" nil) (om-load-boxcomment "comment 42" (om-make-point 40 31) (quote "bw") "" (om-make-point 614 337) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 567 362) (om-make-point 48 30) 1000 "1000" nil) (om-load-boxcomment "comment 41" (om-make-point 44 88) (quote "E") "" (om-make-point 427 279) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 40" (om-make-point 51 34) (quote "durs") "" (om-make-point 481 276) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 491 300) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote abstraction) "C#ed 5" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 482 338) nil nil nil "C#ed") (om-load-boxcomment "comment 33" (om-make-point 40 31) (quote "f0") "" (om-make-point 527 337) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "ranfl-1_E.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 421 410) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ranfl-1_E" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ranfl-1_E.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 410 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 5" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 89) (om-make-point 82 30) "ranfl-1_E" "\"ranfl-1_E\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 420 341) (om-make-point 51 67) nil nil "Synt") (om-load-boxcomment "comment 31" (om-make-point 51 34) (quote "freq") "" (om-make-point 572 337) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 30" (om-make-point 48 34) (quote "win") "" (om-make-point 594 279) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 39" (om-make-point 51 34) (quote "freq") "" (om-make-point 165 338) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 211 363) (om-make-point 41 30) 100 "100" nil) (om-load-boxcall (quote abstraction) "Synt 4" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 89) (om-make-point 83 30) "ranfl-1_D" "\"ranfl-1_D\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 13 342) (om-make-point 51 67) nil nil "Synt") (om-load-editor-box1 "ranfl-1_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 14 411) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ranfl-1_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ranfl-1_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 410 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 38" (om-make-point 40 31) (quote "f0") "" (om-make-point 120 338) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 37" (om-make-point 32 34) (quote "bw") "" (om-make-point 212 337) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 116 363) (om-make-point 48 30) 1000 "1000" nil) (om-load-boxcall (quote abstraction) "C#ed 4" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 75 339) nil nil nil "C#ed") (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 84 301) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 36" (om-make-point 51 34) (quote "durs") "" (om-make-point 74 277) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 35" (om-make-point 44 88) (quote "D") "" (om-make-point 20 280) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 167 363) (om-make-point 41 30) 500 "500" nil) (om-load-boxcomment "comment 34" (om-make-point 40 31) (quote "win") "" (om-make-point 255 337) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 257 362) (om-make-point 45 30) 0.03 "0.03" nil) (om-load-editor-box1 "RANFL-1 4" (quote ranfl-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil))) (om-make-point 68 409) (om-make-point 273 62) (let ((rep (if (find-class (quote ranfl-1) nil) (let ((rep (make-instance (quote ranfl-1) :numcols 5))) (when (member (quote e-dels) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6 8))) (when (member (quote durs) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1000)) (when (member (quote freq) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 500)) (when (member (quote bw) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 100)) (when (member (quote aenv) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 99 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 893 1911 2758 3261 3267 4021 4342 4520 5504 6525 7272 8023 8085 8451 8654 8800 8944 9911 10784 11697 12669 13669 14242 15029)) (quote (0 3 6 7 15 9 23 14 30 9 25 18 4 8 13 1 16 10 23 16 12 10 7 4 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)))) (when (member (quote win) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.03)) (when (member (quote wout) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.5)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6 8) (list 2 2 2 2 2) (list -6.0 -6.0 -6.0 -6.0 -6.0) (list 1000 1000 1000 1000 1000) (list 500 500 500 500 500) (list 100 100 100 100 100) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 99 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 893 1911 2758 3261 3267 4021 4342 4520 5504 6525 7272 8023 8085 8451 8654 8800 8944 9911 10784 11697 12669 13669 14242 15029)) (quote (0 3 6 7 15 9 23 14 30 9 25 18 4 8 13 1 16 10 23 16 12 10 7 4 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.03 0.03 0.03 0.03 0.03) (list 0.5 0.5 0.5 0.5 0.5))) rep)))) (setf (precision rep) (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 306 362) (om-make-point 38 30) 0.5 "0.5" nil) (om-load-boxcomment "comment 32" (om-make-point 56 34) (quote "wout") "" (om-make-point 300 337) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 8" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 347 295) (om-make-point 43 42) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 893 1911 2758 3261 3267 4021 4342 4520 5504 6525 7272 8023 8085 8451 8654 8800 8944 9911 10784 11697 12669 13669 14242 15029)) (quote (0 3 6 7 15 9 23 14 30 9 25 18 4 8 13 1 16 10 23 16 12 10 7 4 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote abstraction) "rnd" (om-load-patch-abs1 "rnd" (quote ((om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 170 252) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 261 252) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 198 282) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 259 142) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 249 172) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 122 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "random_bpf" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 118 25) (om-make-point 48 30) 1024 "1024" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 233 24) (om-make-point 34 30) 32 "32" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 154 364) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 903 1151 1428 1431 1814 2061 2983 3456 3601 3746 4060 4998 5340 5666 6078 6412 7202 7932 8870 9492 9962 10651 11324 12280)) (quote (0 32 7 13 28 8 6 10 31 21 13 30 21 12 18 11 15 6 5 22 2 8 28 5 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 57 192) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 86 232) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 204 210) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 186 24) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 187 65) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 158 121) (om-make-point 34 30) 24 "24" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 88 163) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 71 25) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 71 66) nil nil nil nil 1))) (quote ((0 0 2 0 nil 0) (11 0 2 1 nil 0) (1 0 2 2 nil 0) (14 0 4 0 nil 0) (3 0 4 1 nil 0) (8 0 5 0 nil 0) (10 0 8 1 nil 0) (2 0 8 2 nil 0) (9 0 10 0 nil 0) (15 0 10 1 nil 0) (13 0 11 0 nil 0) (4 0 11 1 nil 0) (12 0 13 0 nil 0) (7 0 13 1 nil 0) (17 0 15 0 nil 0) (14 0 15 1 nil 0) (16 0 17 0 nil 0) (6 0 17 1 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 348 345) nil nil nil "rnd") (om-load-boxcomment "comment 29" (om-make-point 51 34) (quote "aenv") "" (om-make-point 255 271) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 125 309) (om-make-point 50 43) nil nil nil 1) (om-load-editor-box1 "BPF 7" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 215 296) (om-make-point 43 42) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 171 296) (om-make-point 43 42) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 303 295) (om-make-point 43 42) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 99 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 259 295) (om-make-point 43 42) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 846 137) (om-make-point 48 30) 1000 "1000" nil) (om-load-boxcomment "comment 28" (om-make-point 48 34) (quote "bw") "" (om-make-point 905 51) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 27" (om-make-point 51 34) (quote "freq") "" (om-make-point 895 112) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 853 76) (om-make-point 144 30) (list 1 10 100 1000 2000) "(1 10 100 1000 2000)" nil) (om-load-boxcall (quote abstraction) "Synt 3" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 89) (om-make-point 83 30) "ranfl-1_C" "\"ranfl-1_C\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 743 116) (om-make-point 51 67) nil nil "Synt") (om-load-editor-box1 "ranfl-1_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 744 185) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ranfl-1_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ranfl-1_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 410 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 26" (om-make-point 40 31) (quote "f0") "" (om-make-point 850 112) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 3" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 805 113) nil nil nil "C#ed") (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 814 75) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 25" (om-make-point 51 34) (quote "durs") "" (om-make-point 804 51) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 24" (om-make-point 44 88) (quote "C") "" (om-make-point 750 54) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 897 137) (om-make-point 41 30) 500 "500" nil) (om-load-boxcomment "comment 21" (om-make-point 40 31) (quote "win") "" (om-make-point 985 111) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 987 136) (om-make-point 45 30) 0.03 "0.03" nil) (om-load-editor-box1 "RANFL-1 3" (quote ranfl-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil))) (om-make-point 798 183) (om-make-point 273 62) (let ((rep (if (find-class (quote ranfl-1) nil) (let ((rep (make-instance (quote ranfl-1) :numcols 5))) (when (member (quote e-dels) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6 8))) (when (member (quote durs) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1000)) (when (member (quote freq) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 500)) (when (member (quote bw) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 1 10 100 1000 2000))) (when (member (quote aenv) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote win) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.03)) (when (member (quote wout) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.5)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6 8) (list 2 2 2 2 2) (list -6.0 -6.0 -6.0 -6.0 -6.0) (list 1000 1000 1000 1000 1000) (list 500 500 500 500 500) (list 1 10 100 1000 2000) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.03 0.03 0.03 0.03 0.03) (list 0.5 0.5 0.5 0.5 0.5))) rep)))) (setf (precision rep) (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil) (om-load-boxcomment "comment 17" (om-make-point 48 34) (quote "aenv") "" (om-make-point 939 112) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 940 136) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1036 136) (om-make-point 38 30) 0.5 "0.5" nil) (om-load-boxcomment "comment 16" (om-make-point 56 34) (quote "wout") "" (om-make-point 1030 111) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 15" (om-make-point 51 34) (quote "bw") "" (om-make-point 539 113) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 496 74) (om-make-point 140 30) (list 250 500 1000 2000) "(250 500 1000 2000)" nil) (om-load-boxcall (quote abstraction) "Synt" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 87 98) (om-make-point 83 30) "ranfl-1_B" "\"ranfl-1_B\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 387 117) (om-make-point 51 67) nil nil "Synt") (om-load-editor-box1 "ranfl-1_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 388 186) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ranfl-1_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ranfl-1_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 410 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 14" (om-make-point 40 31) (quote "f0") "" (om-make-point 494 113) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 48 34) (quote "freq") "" (om-make-point 542 52) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 490 138) (om-make-point 48 30) 1000 "1000" nil) (om-load-boxcall (quote abstraction) "C#ed 2" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 449 114) nil nil nil "C#ed") (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 458 76) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 12" (om-make-point 51 34) (quote "durs") "" (om-make-point 448 52) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 11" (om-make-point 44 88) (quote "B") "" (om-make-point 394 55) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 541 138) (om-make-point 41 30) 500 "500" nil) (om-load-boxcomment "comment 10" (om-make-point 40 31) (quote "win") "" (om-make-point 629 112) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 631 137) (om-make-point 45 30) 0.03 "0.03" nil) (om-load-boxcomment "comment 8" (om-make-point 25 207) (quote "|$|$|$|$$") "" (om-make-point 720 48) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "RANFL-1 2" (quote ranfl-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil))) (om-make-point 442 184) (om-make-point 273 62) (let ((rep (if (find-class (quote ranfl-1) nil) (let ((rep (make-instance (quote ranfl-1) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6))) (when (member (quote durs) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 1000)) (when (member (quote freq) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 250 500 1000 2000))) (when (member (quote bw) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 500)) (when (member (quote aenv) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote win) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.03)) (when (member (quote wout) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.5)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6) (list 2 2 2 2) (list -6.0 -6.0 -6.0 -6.0) (list 1000 1000 1000 1000) (list 250 500 1000 2000) (list 500 500 500 500) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.03 0.03 0.03 0.03) (list 0.5 0.5 0.5 0.5))) rep)))) (setf (precision rep) (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil) (om-load-boxcomment "comment 7" (om-make-point 48 34) (quote "aenv") "" (om-make-point 583 113) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 584 137) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 680 137) (om-make-point 38 30) 0.5 "0.5" nil) (om-load-boxcomment "comment 6" (om-make-point 56 34) (quote "wout") "" (om-make-point 674 112) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 56 34) (quote "wout") "" (om-make-point 321 113) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 327 138) (om-make-point 38 30) 0.5 "0.5" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 234 138) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 4" (om-make-point 48 34) (quote "aenv") "" (om-make-point 230 114) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "RANFL-1" (quote ranfl-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil))) (om-make-point 89 185) (om-make-point 273 62) (let ((rep (if (find-class (quote ranfl-1) nil) (let ((rep (make-instance (quote ranfl-1) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6))) (when (member (quote durs) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote f0)) (list 250 500 1000 2000))) (when (member (quote freq) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1000)) (when (member (quote bw) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 500)) (when (member (quote aenv) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote win) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.03)) (when (member (quote wout) (get-init-slots-of-class (quote ranfl-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.5)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6) (list 2 2 2 2) (list -6.0 -6.0 -6.0 -6.0) (list 250 500 1000 2000) (list 1000 1000 1000 1000) (list 500 500 500 500) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.03 0.03 0.03 0.03) (list 0.5 0.5 0.5 0.5))) rep)))) (setf (precision rep) (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil) (om-load-boxcomment "comment 3" (om-make-point 25 207) (quote "|$|$|$|$$") "" (om-make-point 367 49) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 278 138) (om-make-point 45 30) 0.03 "0.03" nil) (om-load-boxcomment "comment" (om-make-point 40 31) (quote "win") "" (om-make-point 276 113) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 185 139) (om-make-point 41 30) 500 "500" nil) (om-load-boxcomment "comment 23" (om-make-point 44 88) (quote "A") "" (om-make-point 41 56) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 22" (om-make-point 51 34) (quote "durs") "" (om-make-point 95 53) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 105 77) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 96 115) nil nil nil "C#ed") (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 134 139) (om-make-point 48 30) 1000 "1000" nil) (om-load-boxcomment "comment 20" (om-make-point 32 34) (quote "f0") "" (om-make-point 199 53) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 18" (om-make-point 40 31) (quote "freq") "" (om-make-point 138 114) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "ranfl-1_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 35 188) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "ranfl-1_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ranfl-1_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 768 309) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 2" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 89) (om-make-point 83 30) "ranfl-1_A" "\"ranfl-1_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 34 118) (om-make-point 51 67) nil nil "Synt") (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 144 78) (om-make-point 140 30) (list 250 500 1000 2000) "(250 500 1000 2000)" nil) (om-load-boxcomment "comment 9" (om-make-point 51 34) (quote "bw") "" (om-make-point 186 114) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 152 34) (quote "Tutorial RANFL-1") "" (om-make-point 57 2) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((14 0 9 1 nil 1) (14 1 9 4 nil 2) (13 0 9 5 nil 3) (4 0 9 7 nil 2) (2 0 9 8 nil 0) (1 0 9 9 nil 3) (7 0 9 10 nil 0) (6 0 9 11 nil 0) (3 0 9 12 nil 1) (13 0 14 0 nil 3) (3 0 14 1 nil 1) (17 0 16 0 nil 0) (9 0 17 0 nil 2) (35 0 27 1 nil 1) (35 1 27 4 nil 2) (34 0 27 5 nil 3) (22 0 27 7 nil 2) (31 0 27 8 nil 0) (29 0 27 9 nil 3) (25 0 27 10 nil 0) (21 0 27 11 nil 1) (24 0 27 12 nil 0) (34 0 35 0 nil 3) (21 0 35 1 nil 1) (38 0 37 0 nil 0) (27 0 38 0 nil 2) (55 0 43 0 nil 2) (43 0 44 0 nil 0) (49 0 48 0 nil 3) (61 0 48 1 nil 1) (48 0 55 1 nil 1) (48 1 55 4 nil 2) (49 0 55 5 nil 3) (47 0 55 7 nil 2) (52 0 55 8 nil 0) (42 0 55 9 nil 2) (61 0 55 10 nil 1) (54 0 55 11 nil 1) (56 0 55 12 nil 0) (59 0 58 0 nil 2) (63 0 61 0 nil 0) (62 0 61 1 nil 0) (65 0 61 2 nil 0) (64 0 61 3 nil 0) (58 0 61 4 nil 0) (80 0 70 0 nil 2) (70 0 71 0 nil 0) (74 0 73 0 nil 3) (69 0 73 1 nil 1) (73 0 80 1 nil 1) (73 1 80 4 nil 2) (74 0 80 5 nil 3) (66 0 80 7 nil 2) (77 0 80 8 nil 0) (69 0 80 9 nil 1) (82 0 80 10 nil 0) (79 0 80 11 nil 1) (83 0 80 12 nil 0) (100 0 87 0 nil 2) (87 0 88 0 nil 0) (93 0 92 0 nil 3) (86 0 92 1 nil 1) (92 0 100 1 nil 1) (92 1 100 4 nil 2) (93 0 100 5 nil 3) (91 0 100 7 nil 0) (86 0 100 8 nil 1) (96 0 100 9 nil 3) (102 0 100 10 nil 0) (98 0 100 11 nil 1) (103 0 100 12 nil 0) (117 0 109 1 nil 1) (117 1 109 4 nil 2) (116 0 109 5 nil 3) (123 0 109 7 nil 1) (118 0 109 8 nil 2) (113 0 109 9 nil 3) (107 0 109 10 nil 0) (111 0 109 11 nil 1) (106 0 109 12 nil 0) (116 0 117 0 nil 3) (123 0 117 1 nil 1) (122 0 121 0 nil 0) (109 0 122 0 nil 2))) nil 6.060017))
