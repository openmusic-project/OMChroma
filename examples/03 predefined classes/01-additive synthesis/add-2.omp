; OM File Header - Saved 2013/10/29 22:34:30
; (6.0602 :patc (om-make-point 334 160) (om-make-point 131 129) (om-make-point 1369 621) "" 183 0 "2012/11/23 12:21:12" "2013/08/30 16:10:45")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../out-files/add-2_D.aiff" "../../../out-files/add-2_C.aiff" "../../../out-files/add-2_B.aiff" "../../../out-files/add-2_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "add-2" (quote ((om-load-boxcomment "comment 29" (om-make-point 51 34) (quote "durs") "" (om-make-point 1054 96) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 4" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 1018 105) nil nil nil "C#ed") (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 1063 122) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 20" (om-make-point 51 34) (quote "durs") "" (om-make-point 737 96) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 3" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 701 105) nil nil nil "C#ed") (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 746 122) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 3" (om-make-point 51 34) (quote "durs") "" (om-make-point 423 96) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 2" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 387 105) nil nil nil "C#ed") (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 432 123) (om-make-point 27 30) 4 "4" nil) (om-load-boxcomment "comment 11" (om-make-point 51 34) (quote "durs") "" (om-make-point 114 93) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 78 102) nil nil nil "C#ed") (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 123 119) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote abstraction) "Synt 4" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 78 30) "add-2_D" "\"add-2_D\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 382 215) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 988 246) (om-make-point 51 67) nil nil "Synt") (om-load-editor-box1 "add-2_D.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 1043 244) (om-make-point 194 71) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "add-2_D" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "add-2_D.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 198 22) (om-make-point 914 885) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 3" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 78 30) "add-2_C" "\"add-2_C\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 345 209) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 687 246) (om-make-point 51 67) nil nil "Synt") (om-load-editor-box1 "add-2_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 742 244) (om-make-point 194 71) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "add-2_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "add-2_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 198 22) (om-make-point 914 885) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 2" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 78 30) "add-2_B" "\"add-2_B\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 367 198) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 361 247) (om-make-point 51 67) nil nil "Synt") (om-load-editor-box1 "add-2_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 416 245) (om-make-point 194 71) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "add-2_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "add-2_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 198 22) (om-make-point 914 885) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 78 30) "add-2_A" "\"add-2_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 416 204) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 50 247) (om-make-point 51 67) nil nil "Synt") (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 1224 141) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 1187 141) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 1139 141) (om-make-point 38 30) 0.5 "0.5" nil) (om-load-boxcomment "comment 37" (om-make-point 46 88) (quote "D") "" (om-make-point 980 99) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 1093 141) (om-make-point 38 30) 0.2 "0.2" nil) (om-load-boxcomment "comment 36" (om-make-point 43 34) (quote "jtr") "" (om-make-point 1224 113) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 35" (om-make-point 43 34) (quote "scal") "" (om-make-point 1178 114) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 34" (om-make-point 43 34) (quote "dec") "" (om-make-point 1138 114) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 33" (om-make-point 32 34) (quote "atk") "" (om-make-point 1094 114) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 32" (om-make-point 32 34) (quote "f0") "" (om-make-point 1124 50) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 1004 75) (om-make-point 268 30) (list 440 880 1320 1760 2200 2640 3080 3520) "(440 880 1320 1760 2200 2640 3080 3520)" nil) (om-load-editor-box1 "ADD-2 4" (quote add-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "atk" (quote :atk) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "scal" (quote :scal) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil))) (om-make-point 984 175) (om-make-point 277 60) (let ((rep (if (find-class (quote add-2) nil) (let ((rep (make-instance (quote add-2) :numcols 8))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6 8 10 12 14))) (when (member (quote durs) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote f0)) (list 440 880 1320 1760 2200 2640 3080 3520))) (when (member (quote atk) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote atk)) 0.2)) (when (member (quote dec) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.5)) (when (member (quote scal) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote scal)) 1)) (when (member (quote jtf) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote jtf)) 0.1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6 8 10 12 14) (list 2 2 2 2 2 2 2 2) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 440 880 1320 1760 2200 2640 3080 3520) (list 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2) (list 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5) (list 1 1 1 1 1 1 1 1) (list 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))))) nil nil nil nil) (om-load-boxcomment "comment 28" (om-make-point 33 396) (quote "|$|$|$|$|$|$") "" (om-make-point 953 34) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 27" (om-make-point 44 59) (quote "C") "" (om-make-point 669 102) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 873 140) (om-make-point 38 30) 0.5 "0.5" nil) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 829 140) (om-make-point 38 30) 0.2 "0.2" nil) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 809 76) (om-make-point 114 30) (list 1 2 3 4 5 6 7 8) "(1 2 3 4 5 6 7 8)" nil) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 915 140) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcomment "comment 26" (om-make-point 43 34) (quote "jtr") "" (om-make-point 916 112) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 25" (om-make-point 43 34) (quote "scal") "" (om-make-point 841 50) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 24" (om-make-point 43 34) (quote "dec") "" (om-make-point 873 113) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 23" (om-make-point 32 34) (quote "atk") "" (om-make-point 829 113) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 22" (om-make-point 32 34) (quote "f0") "" (om-make-point 790 113) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 786 140) (om-make-point 41 30) 440 "440" nil) (om-load-editor-box1 "ADD-2 3" (quote add-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "atk" (quote :atk) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "scal" (quote :scal) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil))) (om-make-point 680 175) (om-make-point 269 62) (let ((rep (if (find-class (quote add-2) nil) (let ((rep (make-instance (quote add-2) :numcols 8))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6 8 10 12 14))) (when (member (quote durs) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 440)) (when (member (quote atk) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote atk)) 0.2)) (when (member (quote dec) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.5)) (when (member (quote scal) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote scal)) (list 1 2 3 4 5 6 7 8))) (when (member (quote jtf) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote jtf)) 0.1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6 8 10 12 14) (list 2 2 2 2 2 2 2 2) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 440 440 440 440 440 440 440 440) (list 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2) (list 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5) (list 1 2 3 4 5 6 7 8) (list 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 466 101) (om-make-point 180 30) (list 0.2 0.2 0.2 0.2 0.2 0.5 1 2) "(0.2 0.2 0.2 0.2 0.2 0.5 1 2)" nil) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 432 61) (om-make-point 136 30) (list 0.2 0.5 1 2 2 2 2 2) "(0.2 0.5 1 2 2 2 2 2)" nil) (om-load-boxcomment "comment 19" (om-make-point 33 396) (quote "|$|$|$|$|$|$") "" (om-make-point 643 32) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 18" (om-make-point 44 88) (quote "B") "" (om-make-point 353 98) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 562 144) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 597 144) (om-make-point 45 30) 0.02 "0.02" nil) (om-load-boxcomment "comment 17" (om-make-point 43 34) (quote "jtr") "" (om-make-point 601 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 16" (om-make-point 43 34) (quote "scal") "" (om-make-point 557 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 15" (om-make-point 43 34) (quote "dec") "" (om-make-point 542 76) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 14" (om-make-point 32 34) (quote "atk") "" (om-make-point 483 37) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 32 34) (quote "f0") "" (om-make-point 515 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 511 143) (om-make-point 41 30) 440 "440" nil) (om-load-editor-box1 "ADD-2 2" (quote add-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "atk" (quote :atk) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "scal" (quote :scal) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil))) (om-make-point 354 175) (om-make-point 281 62) (let ((rep (if (find-class (quote add-2) nil) (let ((rep (make-instance (quote add-2) :numcols 8))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 4 8 12 16 20 24 28))) (when (member (quote durs) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 4)) (when (member (quote amp) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 440)) (when (member (quote atk) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote atk)) (list 0.2 0.5 1 2 2 2 2 2))) (when (member (quote dec) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote dec)) (list 0.2 0.2 0.2 0.2 0.2 0.5 1 2))) (when (member (quote scal) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote scal)) 1)) (when (member (quote jtf) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote jtf)) 0.02)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 4 8 12 16 20 24 28) (list 4 4 4 4 4 4 4 4) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 440 440 440 440 440 440 440 440) (list 0.2 0.5 1 2 2 2 2 2) (list 0.2 0.2 0.2 0.2 0.2 0.5 1 2) (list 1 1 1 1 1 1 1 1) (list 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))))) nil nil nil nil) (om-load-boxcomment "comment 10" (om-make-point 33 396) (quote "|$|$|$|$|$|$") "" (om-make-point 314 30) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 46 60) (quote "A") "" (om-make-point 40 93) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 113 72) (om-make-point 204 30) (list 0.01 0.025 0.05 0.1 0.25 0.5 1) "(0.01 0.025 0.05 0.1 0.25 0.5 1)" nil) (om-load-boxcomment "comment 8" (om-make-point 43 34) (quote "jtr") "" (om-make-point 196 47) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 43 34) (quote "scal") "" (om-make-point 280 110) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 43 34) (quote "dec") "" (om-make-point 241 110) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 32 34) (quote "atk") "" (om-make-point 197 110) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 32 34) (quote "f0") "" (om-make-point 158 110) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 220 34) (quote "Tutorial ADD-2") "" (om-make-point 57 4) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 285 137) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 242 137) (om-make-point 38 30) 0.2 "0.2" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 197 137) (om-make-point 38 30) 0.2 "0.2" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 154 137) (om-make-point 41 30) 440 "440" nil) (om-load-editor-box1 "add-2_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 105 245) (om-make-point 194 71) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "add-2_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "add-2_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 198 22) (om-make-point 914 885) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "ADD-2" (quote add-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "atk" (quote :atk) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "scal" (quote :scal) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil))) (om-make-point 49 175) (om-make-point 262 63) (let ((rep (if (find-class (quote add-2) nil) (let ((rep (make-instance (quote add-2) :numcols 7))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6 8 10 12))) (when (member (quote durs) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote f0)) 440)) (when (member (quote atk) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote atk)) 0.2)) (when (member (quote dec) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.2)) (when (member (quote scal) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote scal)) 1)) (when (member (quote jtf) (get-init-slots-of-class (quote add-2)) :key (quote car)) (setf (slot-value rep (quote jtf)) (list 0.01 0.025 0.05 0.1 0.25 0.5 1))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6 8 10 12) (list 2 2 2 2 2 2 2) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 440 440 440 440 440 440 440) (list 0.2 0.2 0.2 0.2 0.2 0.2 0.2) (list 0.2 0.2 0.2 0.2 0.2 0.2 0.2) (list 1 1 1 1 1 1 1) (list 0.01 0.025 0.05 0.1 0.25 0.5 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))))) nil nil nil nil))) (quote ((2 0 1 0 nil 3) (29 0 1 1 nil 1) (5 0 4 0 nil 3) (35 0 4 1 nil 1) (8 0 7 0 nil 3) (45 0 7 1 nil 1) (11 0 10 0 nil 3) (59 0 10 1 nil 1) (30 0 12 0 nil 0) (12 0 13 0 nil 0) (43 0 14 0 nil 0) (14 0 15 0 nil 0) (56 0 16 0 nil 0) (16 0 17 0 nil 0) (71 0 18 0 nil 0) (1 0 30 1 nil 1) (1 1 30 4 nil 2) (2 0 30 5 nil 3) (29 0 30 7 nil 1) (23 0 30 8 nil 7) (21 0 30 9 nil 2) (20 0 30 10 nil 3) (19 0 30 11 nil 5) (4 0 43 1 nil 1) (4 1 43 4 nil 2) (5 0 43 5 nil 3) (42 0 43 7 nil 5) (34 0 43 8 nil 7) (33 0 43 9 nil 2) (35 0 43 10 nil 1) (36 0 43 11 nil 5) (7 0 56 1 nil 1) (7 1 56 4 nil 2) (8 0 56 5 nil 3) (55 0 56 7 nil 5) (45 0 56 8 nil 1) (44 0 56 9 nil 0) (48 0 56 10 nil 3) (49 0 56 11 nil 5) (18 0 70 0 nil 0) (10 0 71 1 nil 1) (10 1 71 4 nil 2) (11 0 71 5 nil 3) (69 0 71 7 nil 5) (68 0 71 8 nil 4) (67 0 71 9 nil 2) (66 0 71 10 nil 3) (59 0 71 11 nil 1))) nil 6.0602))
