; OM File Header - Saved 2025/02/06 18:22:39
; (6.0602 :patc (om-make-point 280 210) (om-make-point 373 258) (om-make-point 943 411) "" 183 0 nil "2025/02/06 18:22:39")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../../out-files/PLUCK-2_G.aiff" "../../../../../out-files/PLUCK-2_F.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "pluck-2 buffer and runfun " (quote ((om-load-boxcomment "comment" (om-make-point 69 34) (quote "runfun") "" (om-make-point 403 48) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 367 76) (om-make-point 156 30) "f10 0 1025 7 0 1025 1" "\"f10 0 1025 7 0 1025 1\"" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 367 105) (om-make-point 207 30) "f11 0 1025 7 0 256 0 1 1 256 1" "\"f11 0 1025 7 0 256 0 1 1 256 1\"" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 366 133) (om-make-point 207 30) "f12 0 1025 7 0 256 0 1 1 768 1" "\"f12 0 1025 7 0 256 0 1 1 768 1\"" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 366 160) (om-make-point 207 30) "f13 0 1025 7 0 128 0 1 1 896 1" "\"f13 0 1025 7 0 128 0 1 1 896 1\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 366 186) (om-make-point 200 30) "f14 0 1025 7 0 64 0 1 1 960 1" "\"f14 0 1025 7 0 64 0 1 1 960 1\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 415 225) (om-make-point 90 43) nil nil nil 1) (om-load-boxcomment "comment 55" (om-make-point 86 34) (quote "runfun #") "" (om-make-point 757 38) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 40" (quote t) (quote nil) (om-make-point 733 64) (om-make-point 127 30) (list 0 10 11 12 13 14) "(0 10 11 12 13 14)" nil) (om-load-boxcall (quote bastype) "aux 38" (quote t) (quote nil) (om-make-point 758 116) (om-make-point 41 30) 440 "440" nil) (om-load-boxcall (quote bastype) "aux 37" (quote t) (quote nil) (om-make-point 843 116) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 35" (quote t) (quote nil) (om-make-point 716 116) (om-make-point 41 30) 220 "220" nil) (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 682 96) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 675 129) nil nil nil "C#ed") (om-load-boxcomment "comment 54" (om-make-point 46 88) (quote "G") "" (om-make-point 595 68) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 53" (om-make-point 51 34) (quote "durs") "" (om-make-point 670 70) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 52" (om-make-point 48 34) (quote "freq") "" (om-make-point 715 90) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "PLUCK-2_G.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 599 203) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "PLUCK-2_G" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PLUCK-2_G.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 265 360) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt" (om-load-patch-abs1 "Synt" (quote ((om-load-boxin "OMCh" 1 (om-make-point 56 71) "" "OMCh" nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 55 44) (om-make-point 95 30) "PLUCK-2_G" "\"PLUCK-2_G\"" nil) (om-load-boxin "tables" 0 (om-make-point 160 74) "" "tables" nil nil) (om-load-boxout "output" 0 (om-make-point 93 221) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 83 151) nil nil nil nil 1))) (quote ((4 0 3 0 nil 0) (0 0 4 0 nil 0) (1 0 4 1 nil 0) (2 0 4 2 nil 0))) 6.0602 nil "" (om-make-point 306 361) (om-make-point 317 375)) (quote ((om-load-inputfun (quote input-funbox) "" "tables" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 581 131) (om-make-point 63 67) nil nil "Synt") (om-load-editor-box1 "PLUCK-2 7" (quote pluck-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "buf" (quote :buf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "ranfun" (quote :ranfun) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "meth" (quote :meth) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par1" (quote :par1) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par2" (quote :par2) nil nil))) (om-make-point 676 199) (om-make-point 201 65) (let ((rep (if (find-class (quote pluck-2) nil) (let ((rep (make-instance (quote pluck-2) :numcols 6))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3 4 5))) (when (member (quote durs) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 220)) (when (member (quote buf) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote buf)) 440)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.8)) (when (member (quote ranfun) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote ranfun)) (list 0 10 11 12 13 14))) (when (member (quote meth) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote meth)) 1)) (when (member (quote par1) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par1)) 0.5)) (when (member (quote par2) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par2)) 10.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3 4 5) (list 1 1 1 1 1 1) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 220 220 220 220 220 220) (list 440 440 440 440 440 440) (list 0.8 0.8 0.8 0.8 0.8 0.8) (list 0 10 11 12 13 14) (list 1 1 1 1 1 1) (list 0.5 0.5 0.5 0.5 0.5 0.5) (list 10.0 10.0 10.0 10.0 10.0 10.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 638 511) (om-make-point 56 40))) nil nil nil nil) (om-load-boxcomment "comment 44" (om-make-point 48 34) (quote "buf") "" (om-make-point 759 92) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 803 116) (om-make-point 38 30) 0.8 "0.8" nil) (om-load-boxcomment "comment 21" (om-make-point 48 34) (quote "dec") "" (om-make-point 801 91) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 20" (om-make-point 51 34) (quote "meth") "" (om-make-point 841 91) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 19" (om-make-point 28 253) (quote "|$|$|$|$|$$$") "" (om-make-point 331 40) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 159 122) (om-make-point 41 30) 220 "220" nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 125 102) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 120 135) nil nil nil "C#ed") (om-load-boxcomment "comment 18" (om-make-point 40 88) (quote "F") "" (om-make-point 48 80) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 17" (om-make-point 51 34) (quote "durs") "" (om-make-point 113 76) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 16" (om-make-point 48 34) (quote "freq") "" (om-make-point 157 97) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "PLUCK-2_F.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 48 209) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "PLUCK-2_F" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "PLUCK-2_F.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 298 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 2" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 92 30) "PLUCK-2_F" "\"PLUCK-2_F\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 36 139) (om-make-point 51 67) nil nil "Synt") (om-load-editor-box1 "PLUCK-2 2" (quote pluck-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "buf" (quote :buf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "ranfun" (quote :ranfun) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "meth" (quote :meth) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par1" (quote :par1) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par2" (quote :par2) nil nil))) (om-make-point 119 205) (om-make-point 201 65) (let ((rep (if (find-class (quote pluck-2) nil) (let ((rep (make-instance (quote pluck-2) :numcols 7))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3 4 5 6))) (when (member (quote durs) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 220)) (when (member (quote buf) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote buf)) (list 27.5 55 110 220 440 880 1760))) (when (member (quote dec) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.8)) (when (member (quote ranfun) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote ranfun)) 0)) (when (member (quote meth) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote meth)) 1)) (when (member (quote par1) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par1)) 0.5)) (when (member (quote par2) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par2)) 10.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3 4 5 6) (list 1 1 1 1 1 1 1) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 220 220 220 220 220 220 220) (list 27.5 55 110 220 440 880 1760) (list 0.8 0.8 0.8 0.8 0.8 0.8 0.8) (list 0 0 0 0 0 0 0) (list 1 1 1 1 1 1 1) (list 0.5 0.5 0.5 0.5 0.5 0.5 0.5) (list 10.0 10.0 10.0 10.0 10.0 10.0 10.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 638 511) (om-make-point 56 40))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 115 61) (om-make-point 205 30) (list 27.5 55 110 220 440 880 1760) "(27.5 55 110 220 440 880 1760)" nil) (om-load-boxcomment "comment 15" (om-make-point 48 34) (quote "buf") "" (om-make-point 197 37) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 246 122) (om-make-point 38 30) 0.8 "0.8" nil) (om-load-boxcomment "comment 14" (om-make-point 48 34) (quote "dec") "" (om-make-point 244 97) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 11" (om-make-point 51 34) (quote "meth") "" (om-make-point 284 97) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 286 122) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 7" (om-make-point 373 34) (quote "Tutorial Pluck-2 Buffer and runfun") "" (om-make-point 55 0) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((1 0 6 0 nil 0) (2 0 6 1 nil 0) (3 0 6 2 nil 0) (4 0 6 3 nil 0) (5 0 6 4 nil 0) (12 0 13 0 nil 3) (8 0 13 1 nil 1) (18 0 17 0 nil 0) (6 0 18 0 nil 0) (19 0 18 1 nil 2) (13 0 19 1 nil 2) (13 1 19 4 nil 1) (12 0 19 5 nil 3) (11 0 19 7 nil 2) (9 0 19 8 nil 0) (21 0 19 9 nil 0) (8 0 19 10 nil 1) (10 0 19 11 nil 1) (26 0 27 0 nil 3) (34 0 27 1 nil 1) (32 0 31 0 nil 0) (33 0 32 0 nil 2) (27 0 33 1 nil 2) (27 1 33 4 nil 1) (26 0 33 5 nil 3) (25 0 33 7 nil 2) (34 0 33 8 nil 1) (36 0 33 9 nil 0) (39 0 33 11 nil 1))) nil 6.0602))
