; OM File Header - Saved 2025/02/06 18:22:39
; (6.0602 :patc (om-make-point 280 210) (om-make-point 239 110) (om-make-point 1147 846) "" 183 0 nil "2025/02/06 18:22:39")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../out-files/pluck-2_E.aiff" "../../../out-files/pluck-2_D.aiff" "../../../out-files/pluck-2_C.aiff" "../../../out-files/pluck-2_B.aiff" "../../../out-files/pluck-2_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "pluck-2 methods" (quote ((om-load-boxcall (quote abstraction) "Synt 5" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 87 30) "pluck-2_D" "\"pluck-2_D\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 44 386) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host :unspecific :name "pluck-2_D" :type "aiff")) nil "Synt") (om-load-boxcall (quote abstraction) "ipar2" (om-load-patch-abs1 "ipar2" (quote ((om-load-boxout "output" 0 (om-make-point 195 190) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "ipar2" nil) (om-load-boxin "ipar1" 0 (om-make-point 101 13) "" "ipar1" nil nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 210 28) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 208 66) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 163 65) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 165 112) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 45 86) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 92 185) (om-make-point 77 57) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 114 139) (om-make-point 37 30) (list 0) "(0)" nil) (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 64 132) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 49 36) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 80 78) nil nil nil nil 1))) (quote ((7 0 0 0 nil 0) (11 0 3 0 nil 2) (2 0 3 1 nil 0) (4 0 5 0 nil 1) (11 0 5 1 nil 2) (3 0 5 2 nil 0) (9 0 7 0 nil 0) (8 0 7 1 nil 0) (5 0 7 2 nil 0) (6 0 9 0 nil 0) (11 0 9 1 nil 2) (10 0 11 0 nil 0) (1 0 11 1 nil 0))) 6.0602 nil "" (om-make-point 976 399) (om-make-point 298 281)) (quote ((om-load-inputfun (quote input-funbox) "" "ipar1" nil))) (om-make-point 672 324) nil (list (list 0 0.020000006 0.04000001 0.060000018 0.08000002 0.100000024)) nil "ipar2") (om-load-editor-box1 "POP-UP-MENU 4" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "yes" "no")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 561 326) (om-make-point 85 50) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 65 24) "untitled" :range (quote (0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1))))) (om-set-selected-item-index rep (quote 9)) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 36" (quote t) (quote nil) (om-make-point 695 403) (om-make-point 27 30) 5 "5" nil) (om-load-boxcomment "comment 51" (om-make-point 204 51) (quote "(meth 5)$0<= (ipar1+ipar2) <=1") "" (om-make-point 535 278) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 34" (quote t) (quote nil) (om-make-point 512 349) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 33" (quote t) (quote nil) (om-make-point 652 403) (om-make-point 38 30) 0.8 "0.8" nil) (om-load-boxcomment "comment 50" (om-make-point 51 34) (quote "meth") "" (om-make-point 683 378) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 49" (om-make-point 48 34) (quote "dec") "" (om-make-point 650 378) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 48" (om-make-point 48 34) (quote "buf") "" (om-make-point 606 378) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 32" (quote t) (quote nil) (om-make-point 608 403) (om-make-point 41 30) 220 "220" nil) (om-load-boxcomment "comment 47" (om-make-point 48 34) (quote "freq") "" (om-make-point 563 378) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "PLUCK-2 6" (quote pluck-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "buf" (quote :buf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "ranfun" (quote :ranfun) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "meth" (quote :meth) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par1" (quote :par1) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par2" (quote :par2) nil nil))) (om-make-point 506 452) (om-make-point 201 65) (let ((rep (if (find-class (quote pluck-2) nil) (let ((rep (make-instance (quote pluck-2) :numcols 6))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3 4 5))) (when (member (quote durs) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 220)) (when (member (quote buf) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote buf)) 220)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.8)) (when (member (quote ranfun) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote ranfun)) 0)) (when (member (quote meth) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote meth)) 5)) (when (member (quote par1) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par1)) 0.9)) (when (member (quote par2) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par2)) (list 0 0.020000006 0.04000001 0.060000018 0.08000002 0.100000024))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3 4 5) (list 1 1 1 1 1 1) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 220 220 220 220 220 220) (list 220 220 220 220 220 220) (list 0.8 0.8 0.8 0.8 0.8 0.8) (list 0 0 0 0 0 0) (list 5 5 5 5 5 5) (list 0.9 0.9 0.9 0.9 0.9 0.9) (list 0 0.020000006 0.04000001 0.060000018 0.08000002 0.100000024))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 56 40) (om-make-point 638 511) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 565 403) (om-make-point 41 30) 220 "220" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 505 382) nil (list 6 (list 0 1 2 3 4 5)) nil "C#ed") (om-load-boxcomment "comment 46" (om-make-point 41 88) (quote "E") "" (om-make-point 433 323) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 45" (om-make-point 51 34) (quote "durs") "" (om-make-point 500 323) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "pluck-2_E.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 435 456) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "pluck-2_E" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "pluck-2_E.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 6" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 86 30) "pluck-2_E" "\"pluck-2_E\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 423 385) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host :unspecific :name "pluck-2_E" :type "aiff")) nil "Synt") (om-load-boxcomment "comment 43" (om-make-point 141 51) (quote "(meth 4)$ipar2 >=1") "" (om-make-point 302 288) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "POP-UP-MENU 4" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "yes" "no")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 304 324) (om-make-point 86 50) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 66 24) "untitled" :range (quote (1 2 4 8 16 32 64 128))))) (om-set-selected-item-index rep (quote 0)) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 42" (om-make-point 141 51) (quote "(meth 4)$0<= ipar1 <=1") "" (om-make-point 168 288) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 30" (quote t) (quote nil) (om-make-point 171 335) (om-make-point 129 39) (list 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1) "(0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1)" nil) (om-load-boxcall (quote bastype) "aux 29" (quote t) (quote nil) (om-make-point 316 401) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 133 347) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 27" (quote t) (quote nil) (om-make-point 273 401) (om-make-point 38 30) 0.8 "0.8" nil) (om-load-boxcomment "comment 41" (om-make-point 51 34) (quote "meth") "" (om-make-point 304 376) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 40" (om-make-point 48 34) (quote "dec") "" (om-make-point 271 376) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 39" (om-make-point 48 34) (quote "buf") "" (om-make-point 227 376) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 229 401) (om-make-point 41 30) 220 "220" nil) (om-load-boxcomment "comment 38" (om-make-point 48 34) (quote "freq") "" (om-make-point 184 376) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "PLUCK-2 5" (quote pluck-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "buf" (quote :buf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "ranfun" (quote :ranfun) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "meth" (quote :meth) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par1" (quote :par1) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par2" (quote :par2) nil nil))) (om-make-point 127 450) (om-make-point 201 65) (let ((rep (if (find-class (quote pluck-2) nil) (let ((rep (make-instance (quote pluck-2) :numcols 11))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3 4 5 6 7 8 9 10))) (when (member (quote durs) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 220)) (when (member (quote buf) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote buf)) 220)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.8)) (when (member (quote ranfun) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote ranfun)) 0)) (when (member (quote meth) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote meth)) 4)) (when (member (quote par1) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par1)) (list 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1))) (when (member (quote par2) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par2)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3 4 5 6 7 8 9 10) (list 1 1 1 1 1 1 1 1 1 1 1) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 220 220 220 220 220 220 220 220 220 220 220) (list 220 220 220 220 220 220 220 220 220 220 220) (list 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8) (list 0 0 0 0 0 0 0 0 0 0 0) (list 4 4 4 4 4 4 4 4 4 4 4) (list 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1) (list 1 1 1 1 1 1 1 1 1 1 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 56 40) (om-make-point 638 511) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 186 401) (om-make-point 41 30) 220 "220" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 126 380) nil (list 11 (list 0 1 2 3 4 5 6 7 8 9 10)) nil "C#ed") (om-load-boxcomment "comment 37" (om-make-point 46 88) (quote "D") "" (om-make-point 50 322) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 36" (om-make-point 51 34) (quote "durs") "" (om-make-point 121 321) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "pluck-2_D.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 56 454) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "pluck-2_D" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "pluck-2_D.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment 35" (om-make-point 141 51) (quote "(meth 3)$0<= ipar1 <=1") "" (om-make-point 810 27) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 809 70) (om-make-point 129 39) (list 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1) "(0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1)" nil) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 765 81) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 940 136) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 900 136) (om-make-point 38 30) 0.8 "0.8" nil) (om-load-boxcomment "comment 34" (om-make-point 51 34) (quote "meth") "" (om-make-point 928 111) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 33" (om-make-point 48 34) (quote "dec") "" (om-make-point 898 111) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 32" (om-make-point 48 34) (quote "buf") "" (om-make-point 854 111) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 856 136) (om-make-point 41 30) 220 "220" nil) (om-load-boxcomment "comment 31" (om-make-point 48 34) (quote "freq") "" (om-make-point 811 111) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "PLUCK-2 4" (quote pluck-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "buf" (quote :buf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "ranfun" (quote :ranfun) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "meth" (quote :meth) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par1" (quote :par1) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par2" (quote :par2) nil nil))) (om-make-point 754 185) (om-make-point 201 65) (let ((rep (if (find-class (quote pluck-2) nil) (let ((rep (make-instance (quote pluck-2) :numcols 11))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3 4 5 6 7 8 9 10))) (when (member (quote durs) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 220)) (when (member (quote buf) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote buf)) 220)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.8)) (when (member (quote ranfun) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote ranfun)) 0)) (when (member (quote meth) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote meth)) 3)) (when (member (quote par1) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par1)) (list 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1))) (when (member (quote par2) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par2)) 10.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3 4 5 6 7 8 9 10) (list 1 1 1 1 1 1 1 1 1 1 1) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 220 220 220 220 220 220 220 220 220 220 220) (list 220 220 220 220 220 220 220 220 220 220 220) (list 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8) (list 0 0 0 0 0 0 0 0 0 0 0) (list 3 3 3 3 3 3 3 3 3 3 3) (list 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1) (list 10.0 10.0 10.0 10.0 10.0 10.0 10.0 10.0 10.0 10.0 10.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 56 40) (om-make-point 638 511) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 813 136) (om-make-point 41 30) 220 "220" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 758 115) nil (list 11 (list 0 1 2 3 4 5 6 7 8 9 10)) nil "C#ed") (om-load-boxcomment "comment 30" (om-make-point 43 88) (quote "C") "" (om-make-point 686 57) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 29" (om-make-point 51 34) (quote "durs") "" (om-make-point 753 55) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "pluck-2_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 691 189) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "pluck-2_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "pluck-2_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 4" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 87 30) "pluck-2_C" "\"pluck-2_C\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 679 118) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host :unspecific :name "pluck-2_C" :type "aiff")) nil "Synt") (om-load-boxcomment "comment 28" (om-make-point 28 253) (quote "|$|$|$|$|$$$") "" (om-make-point 389 268) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 478 83) (om-make-point 92 28) (list 1 2 4 8 16 32) "(1 2 4 8 16 32)" nil) (om-load-boxcomment "comment 27" (om-make-point 102 51) (quote "(meth 2)$ipar1 >=1") "" (om-make-point 476 41) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 619 135) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 440 81) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 579 135) (om-make-point 38 30) 0.8 "0.8" nil) (om-load-boxcomment "comment 26" (om-make-point 51 34) (quote "meth") "" (om-make-point 607 110) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 25" (om-make-point 48 34) (quote "dec") "" (om-make-point 577 110) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 24" (om-make-point 48 34) (quote "buf") "" (om-make-point 533 110) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 535 135) (om-make-point 41 30) 220 "220" nil) (om-load-boxcomment "comment 23" (om-make-point 48 34) (quote "freq") "" (om-make-point 490 110) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "PLUCK-2 3" (quote pluck-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "buf" (quote :buf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "ranfun" (quote :ranfun) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "meth" (quote :meth) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par1" (quote :par1) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par2" (quote :par2) nil nil))) (om-make-point 433 184) (om-make-point 201 65) (let ((rep (if (find-class (quote pluck-2) nil) (let ((rep (make-instance (quote pluck-2) :numcols 6))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3 4 5))) (when (member (quote durs) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 220)) (when (member (quote buf) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote buf)) 220)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.8)) (when (member (quote ranfun) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote ranfun)) 0)) (when (member (quote meth) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote meth)) 2)) (when (member (quote par1) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par1)) (list 1 2 4 8 16 32))) (when (member (quote par2) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par2)) 10.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3 4 5) (list 1 1 1 1 1 1) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 220 220 220 220 220 220) (list 220 220 220 220 220 220) (list 0.8 0.8 0.8 0.8 0.8 0.8) (list 0 0 0 0 0 0) (list 2 2 2 2 2 2) (list 1 2 4 8 16 32) (list 10.0 10.0 10.0 10.0 10.0 10.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 56 40) (om-make-point 638 511) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 492 135) (om-make-point 41 30) 220 "220" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 433 114) nil (list 6 (list 0 1 2 3 4 5)) nil "C#ed") (om-load-boxcomment "comment 22" (om-make-point 44 88) (quote "B") "" (om-make-point 369 56) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 51 34) (quote "durs") "" (om-make-point 428 55) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "pluck-2_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 376 188) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "pluck-2_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "pluck-2_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 3" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 87 30) "pluck-2_B" "\"pluck-2_B\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 364 118) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host :unspecific :name "pluck-2_B" :type "aiff")) nil "Synt") (om-load-boxcomment "comment 4" (om-make-point 28 253) (quote "|$|$|$|$|$$$") "" (om-make-point 658 23) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 296 102) (om-make-point 48 30) (list 1 6) "(1 6)" nil) (om-load-boxcomment "comment 3" (om-make-point 51 34) (quote "meth") "" (om-make-point 294 77) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 48 34) (quote "dec") "" (om-make-point 254 77) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 256 102) (om-make-point 38 30) 0.8 "0.8" nil) (om-load-boxcomment "comment" (om-make-point 48 34) (quote "buf") "" (om-make-point 210 77) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 212 102) (om-make-point 41 30) 220 "220" nil) (om-load-editor-box1 "PLUCK-2" (quote pluck-2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "buf" (quote :buf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "dec" (quote :dec) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "ranfun" (quote :ranfun) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "meth" (quote :meth) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par1" (quote :par1) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "par2" (quote :par2) nil nil))) (om-make-point 129 185) (om-make-point 201 65) (let ((rep (if (find-class (quote pluck-2) nil) (let ((rep (make-instance (quote pluck-2) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1))) (when (member (quote durs) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote freq)) 220)) (when (member (quote buf) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote buf)) 220)) (when (member (quote dec) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote dec)) 0.8)) (when (member (quote ranfun) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote ranfun)) 0)) (when (member (quote meth) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote meth)) (list 1 6))) (when (member (quote par1) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par1)) 0.5)) (when (member (quote par2) (get-init-slots-of-class (quote pluck-2)) :key (quote car)) (setf (slot-value rep (quote par2)) 10.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1) (list 1 1) (list -6.0 -6.0) (list 220 220) (list 220 220) (list 0.8 0.8) (list 0 0) (list 1 6) (list 0.5 0.5) (list 10.0 10.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 56 40) (om-make-point 638 511) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil))))) nil nil nil nil) (om-load-boxcomment "comment 9" (om-make-point 28 253) (quote "|$|$|$|$|$$$") "" (om-make-point 340 21) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 978 64) (quote "________________________________________") "" (om-make-point 48 209) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Synt" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 87 30) "pluck-2_A" "\"pluck-2_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 637 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 59 117) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host :unspecific :name "pluck-2_A" :type "aiff")) nil "Synt") (om-load-editor-box1 "pluck-2_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 71 187) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "pluck-2_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "pluck-2_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 298 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment 10" (om-make-point 48 34) (quote "freq") "" (om-make-point 167 77) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 51 34) (quote "durs") "" (om-make-point 127 56) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 213 34) (quote "Tutorial Pluck-2 Methods") "" (om-make-point 55 0) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 44 88) (quote "A") "" (om-make-point 65 54) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 132 115) nil (list 2 (list 0 1)) nil "C#ed") (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 139 82) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 169 102) (om-make-point 41 30) 220 "220" nil))) (quote ((31 0 0 0 nil 2) (2 1 1 0 nil 0) (14 0 12 1 nil 2) (14 1 12 4 nil 1) (5 0 12 5 nil 3) (13 0 12 7 nil 2) (10 0 12 8 nil 4) (6 0 12 9 nil 0) (3 0 12 11 nil 2) (2 1 12 12 nil 3) (1 0 12 13 nil 1) (5 0 14 0 nil 3) (1 0 14 1 nil 1) (18 0 17 0 nil 0) (12 0 18 0 nil 2) (33 0 31 1 nil 2) (33 1 31 4 nil 1) (24 0 31 5 nil 3) (32 0 31 7 nil 2) (29 0 31 8 nil 4) (25 0 31 9 nil 0) (23 0 31 11 nil 2) (22 0 31 12 nil 1) (20 1 31 13 nil 3) (24 0 33 0 nil 3) (22 0 33 1 nil 1) (0 0 36 0 nil 0) (49 0 47 1 nil 2) (49 1 47 4 nil 1) (39 0 47 5 nil 3) (48 0 47 7 nil 2) (45 0 47 8 nil 4) (41 0 47 9 nil 0) (40 0 47 11 nil 2) (38 0 47 12 nil 1) (39 0 49 0 nil 3) (38 0 49 1 nil 1) (53 0 52 0 nil 0) (47 0 53 0 nil 2) (67 0 65 1 nil 2) (67 1 65 4 nil 1) (58 0 65 5 nil 3) (66 0 65 7 nil 2) (63 0 65 8 nil 4) (59 0 65 9 nil 0) (57 0 65 11 nil 2) (55 0 65 12 nil 1) (58 0 67 0 nil 3) (55 0 67 1 nil 1) (71 0 70 0 nil 0) (65 0 71 0 nil 2) (88 0 79 1 nil 2) (88 1 79 4 nil 1) (89 0 79 5 nil 3) (90 0 79 7 nil 2) (78 0 79 8 nil 4) (76 0 79 9 nil 0) (73 0 79 11 nil 1) (79 0 82 0 nil 2) (82 0 83 0 nil 0) (89 0 88 0 nil 3) (73 0 88 1 nil 1))) nil 6.0602))
