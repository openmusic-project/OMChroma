; OM File Header - Saved 2013/10/29 22:34:30
; (6.0602 :patc (om-make-point 226 10) (om-make-point 211 169) (om-make-point 1045 554) "" 183 0 "2012/12/09 8:53:49" "2013/01/27 18:15:49")
; End File Header
; External resources 
; (list (list (quote :picture) "../../../resources/pict/arrow_right") (list (quote :sound) "../../../out-files/fof-4_B.aiff" "../../../out-files/fof-4_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "fof-4" (quote ((om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 631 62) (om-make-point 43 42) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 354 471 607 657 665 1179 1293 1525 2125 3018 3699 3718 3985 4345 5297 5571 6538 7325 8091 8975 9591 9750 10250 10716)) (quote (0 9 29 25 11 25 7 26 21 30 9 19 22 14 4 29 4 9 19 16 12 16 1 14 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote abstraction) "rnd" (om-load-patch-abs1 "rnd" (quote ((om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 170 252) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 261 252) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 198 282) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 259 142) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 249 172) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 122 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "random_bpf" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 118 25) (om-make-point 48 30) 1024 "1024" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 233 24) (om-make-point 34 30) 32 "32" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 154 364) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 903 1151 1428 1431 1814 2061 2983 3456 3601 3746 4060 4998 5340 5666 6078 6412 7202 7932 8870 9492 9962 10651 11324 12280)) (quote (0 32 7 13 28 8 6 10 31 21 13 30 21 12 18 11 15 6 5 22 2 8 28 5 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 57 192) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 86 232) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 204 210) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 186 24) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 187 65) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 158 121) (om-make-point 34 30) 24 "24" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 88 163) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 71 25) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 71 66) nil nil nil nil 1))) (quote ((0 0 2 0 nil 0) (11 0 2 1 nil 0) (1 0 2 2 nil 0) (14 0 4 0 nil 0) (3 0 4 1 nil 0) (8 0 5 0 nil 0) (10 0 8 1 nil 0) (2 0 8 2 nil 0) (9 0 10 0 nil 0) (15 0 10 1 nil 0) (13 0 11 0 nil 0) (4 0 11 1 nil 0) (12 0 13 0 nil 0) (7 0 13 1 nil 0) (17 0 15 0 nil 0) (14 0 15 1 nil 0) (16 0 17 0 nil 0) (6 0 17 1 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 678 49) nil nil nil "rnd") (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 666 125) nil nil nil nil 1) (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 499 63) (om-make-point 43 42) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 455 63) (om-make-point 43 42) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 587 62) (om-make-point 43 42) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 99 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 543 62) (om-make-point 43 42) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 24" (om-make-point 955 88) (quote "_________________________________________") "" (om-make-point 22 204) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 392 308) (om-make-point 152 30) (list 10 11 12 13 14 15 16) "(10 11 12 13 14 15 16)" nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 558 437) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 647 442) (om-make-point 215 30) "f16 0 65537 10 1 0 1 0 1 0 1 0 1" "\"f16 0 65537 10 1 0 1 0 1 0 1 0 1\"" nil) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 648 383) (om-make-point 220 30) "f14 0 65537 10 1024 0 256 0 128" "\"f14 0 65537 10 1024 0 256 0 128\"" nil) (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 649 325) (om-make-point 317 30) "f12 0 65537 10 1024 512 256 128 64 32 168 4 2 1" "\"f12 0 65537 10 1024 512 256 128 64 32 168 4 2 1\"" nil) (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 650 297) (om-make-point 223 30) "f11 0 65537 10 1024 512 256 128" "\"f11 0 65537 10 1024 512 256 128\"" nil) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 648 412) (om-make-point 286 30) "f15 0 65537 10 1024 0 256 0 64 0 16 0 4 0 1" "\"f15 0 65537 10 1024 0 256 0 64 0 16 0 4 0 1\"" nil) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 648 353) (om-make-point 226 30) "f13 0 65537 10 1 1 1 1 1 1 1 1 1 1" "\"f13 0 65537 10 1 1 1 1 1 1 1 1 1 1\"" nil) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 650 268) (om-make-point 148 30) "f10 0 65537 10 1024" "\"f10 0 65537 10 1024\"" nil) (om-load-editor-box1 "FOF-4 2" (quote fof-4) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil))) (om-make-point 69 399) (om-make-point 470 69) (let ((rep (if (find-class (quote fof-4) nil) (let ((rep (make-instance (quote fof-4) :numcols 7))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3 4 5 6))) (when (member (quote durs) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote freq)) 500)) (when (member (quote bw) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote bw)) 64)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.01)) (when (member (quote wout) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.005)) (when (member (quote oct) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote oct)) 0)) (when (member (quote afil) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote afil)) (list 10 11 12 13 14 15 16))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3 4 5 6) (list 1 1 1 1 1 1 1) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 220.0 220.0 220.0 220.0 220.0 220.0 220.0) (list 500 500 500 500 500 500 500) (list 64 64 64 64 64 64 64) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.003 0.003 0.003 0.003 0.003 0.003 0.003) (list 0.01 0.01 0.01 0.01 0.01 0.01 0.01) (list 0.005 0.005 0.005 0.005 0.005 0.005 0.005) (list 0 0 0 0 0 0 0) (list 10 11 12 13 14 15 16))) rep)))) (setf (precision rep) (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 56 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil))))) nil nil nil nil) (om-load-boxcomment "comment 23" (om-make-point 44 88) (quote "B") "" (om-make-point 24 272) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 22" (om-make-point 51 34) (quote "durs") "" (om-make-point 73 263) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 83 287) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 76 325) nil nil nil "C#ed") (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 217 361) (om-make-point 34 30) 64 "64" nil) (om-load-boxcomment "comment 21" (om-make-point 30 26) (quote "f0") "" (om-make-point 133 336) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 20" (om-make-point 47 30) (quote "freq") "" (om-make-point 171 335) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 19" (om-make-point 48 34) (quote "aenv") "" (om-make-point 252 331) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 18" (om-make-point 40 31) (quote "bw") "" (om-make-point 215 335) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "fof-4_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 16 398) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "fof-4_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fof-4_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 410 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 2" (om-load-patch-abs1 "Synt" (quote ((om-load-boxin "tables" 1 (om-make-point 163 85) "" "tables" nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 75) (om-make-point 72 30) "fof-4_B" "\"fof-4_B\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 4 2 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 418 441)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 14 331) (om-make-point 51 67) nil nil "Synt") (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 128 361) (om-make-point 41 30) 220 "220" nil) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 172 361) (om-make-point 41 30) 500 "500" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 255 352) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 17" (om-make-point 48 34) (quote "win") "" (om-make-point 311 336) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 355 360) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcomment "comment 16" (om-make-point 48 34) (quote "wdur") "" (om-make-point 351 335) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 402 360) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 15" (om-make-point 48 34) (quote "wout") "" (om-make-point 403 334) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 454 360) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 14" (om-make-point 48 34) (quote "oct") "" (om-make-point 450 333) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 301 360) (om-make-point 52 30) 0.003 "0.003" nil) (om-load-boxcomment "comment 9" (om-make-point 51 34) (quote "afil") "" (om-make-point 354 302) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "FOF-4" (quote fof-4) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil))) (om-make-point 241 179) (om-make-point 470 69) (let ((rep (if (find-class (quote fof-4) nil) (let ((rep (make-instance (quote fof-4) :numcols 5))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3 4))) (when (member (quote durs) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote freq)) 500)) (when (member (quote bw) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote bw)) 64)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.01)) (when (member (quote wout) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.005)) (when (member (quote oct) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote oct)) 0)) (when (member (quote afil) (get-init-slots-of-class (quote fof-4)) :key (quote car)) (setf (slot-value rep (quote afil)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 99 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 354 471 607 657 665 1179 1293 1525 2125 3018 3699 3718 3985 4345 5297 5571 6538 7325 8091 8975 9591 9750 10250 10716)) (quote (0 9 29 25 11 25 7 26 21 30 9 19 22 14 4 29 4 9 19 16 12 16 1 14 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3 4) (list 1 1 1 1 1) (list -6.0 -6.0 -6.0 -6.0 -6.0) (list 220.0 220.0 220.0 220.0 220.0) (list 500 500 500 500 500) (list 64 64 64 64 64) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.003 0.003 0.003 0.003 0.003) (list 0.01 0.01 0.01 0.01 0.01) (list 0.005 0.005 0.005 0.005 0.005) (list 0 0 0 0 0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 99 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 354 471 607 657 665 1179 1293 1525 2125 3018 3699 3718 3985 4345 5297 5571 6538 7325 8091 8975 9591 9750 10250 10716)) (quote (0 9 29 25 11 25 7 26 21 30 9 19 22 14 4 29 4 9 19 16 12 16 1 14 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)))) rep)))) (setf (precision rep) (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 56 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil))))) nil nil nil nil) (om-load-boxcomment "comment 13" (om-make-point 51 34) (quote "afil") "" (om-make-point 419 70) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 473 140) (om-make-point 52 30) 0.003 "0.003" nil) (om-load-boxcomment "comment 12" (om-make-point 48 34) (quote "oct") "" (om-make-point 622 113) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 626 140) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 11" (om-make-point 48 34) (quote "wout") "" (om-make-point 575 114) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 574 140) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 10" (om-make-point 48 34) (quote "wdur") "" (om-make-point 523 115) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 527 140) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcomment "comment 7" (om-make-point 48 34) (quote "win") "" (om-make-point 483 116) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 13" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 427 139) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 344 141) (om-make-point 41 30) 500 "500" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 300 141) (om-make-point 41 30) 220 "220" nil) (om-load-boxcall (quote abstraction) "Synt" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 72 30) "fof-4_A" "\"fof-4_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 186 109) (om-make-point 51 67) nil nil "Synt") (om-load-editor-box1 "fof-4_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 188 180) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "fof-4_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fof-4_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 410 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 8" (om-make-point 40 31) (quote "bw") "" (om-make-point 387 115) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 48 34) (quote "aenv") "" (om-make-point 424 115) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 47 30) (quote "freq") "" (om-make-point 343 115) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 30 26) (quote "f0") "" (om-make-point 305 116) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 389 141) (om-make-point 34 30) 64 "64" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 247 105) nil nil nil "C#ed") (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 255 67) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 3" (om-make-point 51 34) (quote "durs") "" (om-make-point 245 43) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 125 34) (quote "Tutorial FOF-4") "" (om-make-point 56 2) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 44 88) (quote "A") "" (om-make-point 191 49) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((1 0 0 0 nil 2) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (6 0 2 2 nil 0) (5 0 2 3 nil 0) (0 0 2 4 nil 0) (16 0 9 0 nil 0) (13 0 9 1 nil 0) (12 0 9 2 nil 0) (15 0 9 3 nil 0) (11 0 9 4 nil 0) (14 0 9 5 nil 0) (10 0 9 6 nil 0) (21 0 17 1 nil 1) (21 1 17 4 nil 2) (20 0 17 5 nil 3) (30 0 17 8 nil 0) (22 0 17 9 nil 7) (31 0 17 10 nil 5) (39 0 17 11 nil 2) (33 0 17 12 nil 3) (35 0 17 13 nil 4) (37 0 17 14 nil 2) (8 0 17 15 nil 1) (20 0 21 0 nil 3) (8 0 21 1 nil 1) (28 0 27 0 nil 0) (17 0 28 0 nil 2) (9 0 28 1 nil 5) (61 0 41 1 nil 1) (61 1 41 4 nil 2) (62 0 41 5 nil 3) (52 0 41 8 nil 0) (60 0 41 9 nil 7) (51 0 41 10 nil 5) (43 0 41 11 nil 2) (49 0 41 12 nil 3) (47 0 41 13 nil 4) (45 0 41 14 nil 2) (2 0 41 15 nil 1) (41 0 54 0 nil 2) (54 0 55 0 nil 0) (62 0 61 0 nil 3) (2 0 61 1 nil 1))) (list (let ((newpict (make-instance (quote patch-picture) :name "arrow_right" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "arrow_right" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 552 303)) (setf (pict-size newpict) (om-make-point 74 34)) newpict)) 6.060017))
