; OM File Header - Saved 2013/10/29 22:34:30
; (6.0602 :patc (om-make-point 226 10) (om-make-point 141 161) (om-make-point 1374 591) "" 183 0 "2012/12/09 12:02:41" "2013/03/13 14:40:26")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../../out-files/fof-a4_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "fof-a4" (quote ((om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 1052 66) (om-make-point 152 30) (list 10 11 12 13 14 15 16) "(10 11 12 13 14 15 16)" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 34 107) nil nil nil "C#ed") (om-load-boxcomment "comment 22" (om-make-point 41 34) (quote "afil") "" (om-make-point 1104 38) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 21" (om-make-point 60 34) (quote "mode") "" (om-make-point 1126 112) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 1139 142) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 20" (om-make-point 44 51) (quote "oct$env") "" (om-make-point 1089 96) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 1087 136) (om-make-point 44 39) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 1054 141) (om-make-point 27 30) 4 "4" nil) (om-load-boxcomment "comment 19" (om-make-point 49 51) (quote "oct$max") "" (om-make-point 1047 96) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 972 136) (om-make-point 45 39) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 18" (om-make-point 49 51) (quote "wout$env") "" (om-make-point 973 95) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 926 141) (om-make-point 45 30) 0.02 "0.02" nil) (om-load-boxcomment "comment 17" (om-make-point 56 51) (quote "wout$max") "" (om-make-point 927 96) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 822 136) (om-make-point 45 39) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 16" (om-make-point 49 51) (quote "wdur$env") "" (om-make-point 823 96) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 776 142) (om-make-point 45 30) 0.05 "0.05" nil) (om-load-boxcomment "comment 15" (om-make-point 57 51) (quote "wdur$max") "" (om-make-point 772 96) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 14" (om-make-point 44 51) (quote "win$env") "" (om-make-point 683 96) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 681 137) (om-make-point 44 39) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 9" (om-make-point 49 51) (quote "win$max") "" (om-make-point 632 97) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 635 144) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcall (quote bastype) "aux 29" (quote t) (quote nil) (om-make-point 456 143) (om-make-point 34 30) 64 "64" nil) (om-load-boxcomment "comment 31" (om-make-point 49 51) (quote "bw$max") "" (om-make-point 451 98) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 384 144) (om-make-point 45 30) 0.02 "0.02" nil) (om-load-boxcomment "comment 30" (om-make-point 48 51) (quote "freq$jta") "" (om-make-point 380 99) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 29" (om-make-point 49 51) (quote "freq$env") "" (om-make-point 338 98) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 28" (om-make-point 49 51) (quote "freq$max") "" (om-make-point 291 99) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 27" (quote t) (quote nil) (om-make-point 289 144) (om-make-point 48 30) 1000 "1000" nil) (om-load-boxcomment "comment 27" (om-make-point 49 51) (quote "f0$jta") "" (om-make-point 200 99) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 202 144) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcomment "comment 26" (om-make-point 49 51) (quote "f0$env") "" (om-make-point 158 99) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 25" (om-make-point 49 51) (quote "f0$max") "" (om-make-point 117 99) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 119 144) (om-make-point 41 30) 440 "440" nil) (om-load-editor-box1 "FOF-A4" (quote fof-a4) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0max" (quote :f0max) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0env" (quote :f0env) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0jta" (quote :f0jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "fqmax" (quote :fqmax) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "fqenv" (quote :fqenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "fqjta" (quote :fqjta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bwmax" (quote :bwmax) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bwenv" (quote :bwenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "winmax" (quote :winmax) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "winenv" (quote :winenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdurmax" (quote :wdurmax) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdurenv" (quote :wdurenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "woutmax" (quote :woutmax) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "woutenv" (quote :woutenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "octmax" (quote :octmax) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "octenv" (quote :octenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "mode" (quote :mode) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil))) (om-make-point 16 185) (om-make-point 1187 58) (let ((rep (if (find-class (quote fof-a4) nil) (let ((rep (make-instance (quote fof-a4) :numcols 7))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 5 10 15 20 25 30))) (when (member (quote durs) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote durs)) 5)) (when (member (quote amp) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote f0)) 220)) (when (member (quote f0max) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote f0max)) 440)) (when (member (quote f0env) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0.01)) (when (member (quote freq) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote freq)) 600)) (when (member (quote fqmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote fqmax)) 1000)) (when (member (quote fqenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote fqenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote fqjta) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote fqjta)) 0.02)) (when (member (quote bw) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote bw)) 5)) (when (member (quote bwmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote bwmax)) 64)) (when (member (quote bwenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote bwenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote aenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote winmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote winmax)) 0.01)) (when (member (quote winenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote winenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote wdur) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.01)) (when (member (quote wdurmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote wdurmax)) 0.05)) (when (member (quote wdurenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote wdurenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote wout) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.005)) (when (member (quote woutmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote woutmax)) 0.02)) (when (member (quote woutenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote woutenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote oct) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote oct)) 0)) (when (member (quote octmax) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote octmax)) 4)) (when (member (quote octenv) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote octenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote mode) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote mode)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote fof-a4)) :key (quote car)) (setf (slot-value rep (quote afil)) (list 10 11 12 13 14 15 16))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 5 10 15 20 25 30) (list 5 5 5 5 5 5 5) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 220 220 220 220 220 220 220) (list 440 440 440 440 440 440 440) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.01 0.01 0.01 0.01 0.01 0.01 0.01) (list 600 600 600 600 600 600 600) (list 1000 1000 1000 1000 1000 1000 1000) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.02 0.02 0.02 0.02 0.02 0.02 0.02) (list 5 5 5 5 5 5 5) (list 64 64 64 64 64 64 64) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.003 0.003 0.003 0.003 0.003 0.003 0.003) (list 0.01 0.01 0.01 0.01 0.01 0.01 0.01) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.01 0.01 0.01 0.01 0.01 0.01 0.01) (list 0.05 0.05 0.05 0.05 0.05 0.05 0.05) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0.005 0.005 0.005 0.005 0.005 0.005 0.005) (list 0.02 0.02 0.02 0.02 0.02 0.02 0.02) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 0 0 0 0 0 0 0) (list 4 4 4 4 4 4 4) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?") newobj)) (list 1 1 1 1 1 1 1) (list 10 11 12 13 14 15 16))) rep)))) (setf (precision rep) (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t)) (list 14 (quote t)) (list 15 (quote t)) (list 16 (quote t)) (list 17 (quote t)) (list 18 (quote t)) (list 19 (quote t)) (list 20 (quote t)) (list 21 (quote t)) (list 22 (quote t)) (list 23 (quote t)) (list 24 (quote t)) (list 25 (quote t)) (list 26 (quote t)) (list 27 (quote t)) (list 28 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil) (list 14 nil) (list 15 nil) (list 16 nil) (list 17 nil) (list 18 nil) (list 19 nil) (list 20 nil) (list 21 nil) (list 22 nil) (list 23 nil) (list 24 nil) (list 25 nil) (list 26 nil) (list 27 nil) (list 28 nil))))) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 209 259) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 981 294) (om-make-point 215 30) "f16 0 65537 10 1 0 1 0 1 0 1 0 1" "\"f16 0 65537 10 1 0 1 0 1 0 1 0 1\"" nil) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 439 294) (om-make-point 220 30) "f14 0 65537 10 1024 0 256 0 128" "\"f14 0 65537 10 1024 0 256 0 128\"" nil) (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 662 258) (om-make-point 317 30) "f12 0 65537 10 1024 512 256 128 64 32 168 4 2 1" "\"f12 0 65537 10 1024 512 256 128 64 32 168 4 2 1\"" nil) (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 437 258) (om-make-point 223 30) "f11 0 65537 10 1024 512 256 128" "\"f11 0 65537 10 1024 512 256 128\"" nil) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 663 294) (om-make-point 286 30) "f15 0 65537 10 1024 0 256 0 64 0 16 0 4 0 1" "\"f15 0 65537 10 1024 0 256 0 64 0 16 0 4 0 1\"" nil) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 981 258) (om-make-point 226 30) "f13 0 65537 10 1 1 1 1 1 1 1 1 1 1" "\"f13 0 65537 10 1 1 1 1 1 1 1 1 1 1\"" nil) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 286 258) (om-make-point 148 30) "f10 0 65537 10 1024" "\"f10 0 65537 10 1024\"" nil) (om-load-editor-box1 "BPF 13" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 160 138) (om-make-point 41 37) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-editor-box1 "BPF 13" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 490 138) (om-make-point 44 39) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-editor-box1 "BPF 13" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 337 138) (om-make-point 45 39) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 50 100)) (quote (0 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 13" (om-make-point 44 51) (quote "bw$env") "" (om-make-point 495 97) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 581 144) (om-make-point 52 30) 0.003 "0.003" nil) (om-load-boxcomment "comment 12" (om-make-point 48 34) (quote "oct") "" (om-make-point 1017 114) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1021 141) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 11" (om-make-point 48 34) (quote "wout") "" (om-make-point 873 115) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 872 141) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 10" (om-make-point 48 34) (quote "wdur") "" (om-make-point 725 114) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 729 142) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcomment "comment 7" (om-make-point 48 34) (quote "win") "" (om-make-point 587 114) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 13" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 537 138) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 247 144) (om-make-point 41 30) 600 "600" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 78 144) (om-make-point 41 30) 220 "220" nil) (om-load-boxcall (quote abstraction) "Synt" (om-load-patch-abs1 "Synt" (quote ((om-load-boxin "tables" 1 (om-make-point 179 82) "" "tables" nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 79 30) "fof-a4_A" "\"fof-a4_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 4 2 nil 0))) 6.060017 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 82 249) (om-make-point 51 67) nil nil "Synt") (om-load-editor-box1 "fof-a4_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 149 252) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "fof-a4_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fof-a4_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 410 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 8" (om-make-point 40 31) (quote "bw") "" (om-make-point 425 115) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 48 34) (quote "aenv") "" (om-make-point 535 114) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 47 30) (quote "freq") "" (om-make-point 246 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 30 26) (quote "f0") "" (om-make-point 83 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 429 144) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 41 75) (om-make-point 27 30) 5 "5" nil) (om-load-boxcomment "comment 3" (om-make-point 51 27) (quote "durs") "" (om-make-point 31 51) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 298 34) (quote "Tutorial FOF-A4") "" (om-make-point 56 2) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 44 88) (quote "A") "" (om-make-point 31 241) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((64 0 1 0 nil 3) (0 0 1 1 nil 1) (1 0 33 1 nil 1) (1 1 33 4 nil 0) (64 0 33 5 nil 3) (56 0 33 7 nil 0) (32 0 33 8 nil 0) (42 0 33 9 nil 0) (29 0 33 10 nil 0) (55 0 33 11 nil 0) (27 0 33 12 nil 0) (44 0 33 13 nil 0) (23 0 33 14 nil 0) (63 0 33 15 nil 0) (21 0 33 16 nil 0) (43 0 33 17 nil 0) (54 0 33 18 nil 0) (46 0 33 19 nil 0) (20 0 33 20 nil 0) (18 0 33 21 nil 0) (52 0 33 22 nil 0) (15 0 33 23 nil 0) (13 0 33 24 nil 0) (50 0 33 25 nil 0) (11 0 33 26 nil 0) (9 0 33 27 nil 0) (48 0 33 28 nil 0) (7 0 33 29 nil 0) (6 0 33 30 nil 0) (4 0 33 31 nil 0) (0 0 33 32 nil 1) (41 0 34 0 nil 0) (38 0 34 1 nil 0) (37 0 34 2 nil 0) (40 0 34 3 nil 0) (36 0 34 4 nil 0) (39 0 34 5 nil 0) (35 0 34 6 nil 0) (33 0 57 0 nil 2) (34 0 57 1 nil 1) (57 0 58 0 nil 0))) nil 6.060017))
