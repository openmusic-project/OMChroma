; OM File Header - Saved 2025/02/06 18:22:39
; (6.0602 :patc (om-make-point 226 10) (om-make-point 93 34) (om-make-point 1333 980) "" 183 0 nil "2025/02/06 18:22:39")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../out-files/fog-1_G.aiff" "../../../../out-files/fog-1_F.aiff" "../../../../out-files/fog-1_E.aiff" "../../../../out-files/fog-1_D.aiff" "../../../../out-files/fog-1_C.aiff" "../../../../out-files/fog-1_B.aiff" "../../../../out-files/fog-1_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "fog-1" (quote ((om-load-boxcomment "comment 91" (om-make-point 1066 66) (quote "____________________________________________") "" (om-make-point 27 653) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 70" (quote t) (quote nil) (om-make-point 435 794) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcall (quote bastype) "aux 69" (quote t) (quote nil) (om-make-point 202 733) (om-make-point 70 30) (list 0 0.5 1) "(0 0.5 1)" nil) (om-load-boxcall (quote bastype) "aux 68" (quote t) (quote nil) (om-make-point 379 794) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 90" (om-make-point 57 34) (quote "oct") "" (om-make-point 162 728) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 67" (quote t) (quote nil) (om-make-point 103 739) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 89" (om-make-point 43 88) (quote "G") "" (om-make-point 34 714) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 88" (om-make-point 51 34) (quote "durs") "" (om-make-point 93 713) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 5" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 95 777) nil (list 3 (list 0 2 4)) nil "C#ed") (om-load-boxcomment "comment 87" (om-make-point 30 26) (quote "f0") "" (om-make-point 143 773) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 86" (om-make-point 47 30) (quote "freq") "" (om-make-point 176 769) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 85" (om-make-point 48 34) (quote "aenv") "" (om-make-point 286 767) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 84" (om-make-point 40 31) (quote "bw") "" (om-make-point 216 771) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "fog-1_G.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 24 850) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "fog-1_G" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fog-1_G.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 676 341) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "BPF 7" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 289 790) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 83" (om-make-point 48 34) (quote "spd") "" (om-make-point 337 770) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 82" (om-make-point 48 34) (quote "win") "" (om-make-point 384 769) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 81" (om-make-point 48 34) (quote "wdur") "" (om-make-point 436 768) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 66" (quote t) (quote nil) (om-make-point 489 794) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 80" (om-make-point 48 34) (quote "wout") "" (om-make-point 485 767) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 65" (quote t) (quote nil) (om-make-point 342 794) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 79" (om-make-point 51 34) (quote "afil") "" (om-make-point 251 769) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "FOG-1 7" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "spd" (quote :spd) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil))) (om-make-point 93 848) (om-make-point 420 66) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4))) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.005)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.01)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.005)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) (list 0 0.5 1))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4) (list 2 2 2) (list -6.0 -6.0 -6.0) (list 100 100 100) (list 1 1 1) (list 1 1 1) (list 10 10 10) (list 1 1 1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.005 0.005 0.005) (list 0.01 0.01 0.01) (list 0.005 0.005 0.005) (list 0 0.5 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 64" (quote t) (quote nil) (om-make-point 220 795) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 63" (quote t) (quote nil) (om-make-point 253 794) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 62" (quote t) (quote nil) (om-make-point 139 795) (om-make-point 41 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 61" (quote t) (quote nil) (om-make-point 184 795) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote abstraction) "Synt&T 7" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 4 31) (om-make-point 397 30) "f10 0 262144 -1 \"/OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 262144 -1 \\\"/OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 45 58) (om-make-point 76 30) "fog-1_G" "\"fog-1_G\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 4 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 27 774) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "fog-1_G" :type "aiff")) nil "Synt&T") (om-load-boxcall (quote bastype) "aux 60" (quote t) (quote nil) (om-make-point 744 520) (om-make-point 134 30) (list 0.001 0.002 0.005) "(0.001 0.002 0.005)" nil) (om-load-boxcall (quote bastype) "aux 59" (quote t) (quote nil) (om-make-point 921 581) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 78" (om-make-point 57 34) (quote "wout") "" (om-make-point 692 515) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 58" (quote t) (quote nil) (om-make-point 645 526) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 77" (om-make-point 43 88) (quote "F") "" (om-make-point 576 501) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 76" (om-make-point 51 34) (quote "durs") "" (om-make-point 635 500) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 4" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 637 564) nil (list 3 (list 0 2 4)) nil "C#ed") (om-load-boxcomment "comment 75" (om-make-point 30 26) (quote "f0") "" (om-make-point 685 560) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 74" (om-make-point 47 30) (quote "freq") "" (om-make-point 718 556) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 73" (om-make-point 48 34) (quote "aenv") "" (om-make-point 828 554) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 72" (om-make-point 40 31) (quote "bw") "" (om-make-point 758 558) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "fog-1_F.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 566 637) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "fog-1_F" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fog-1_F.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 676 341) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 831 577) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 71" (om-make-point 48 34) (quote "spd") "" (om-make-point 879 557) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 70" (om-make-point 48 34) (quote "win") "" (om-make-point 926 556) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 57" (quote t) (quote nil) (om-make-point 977 581) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcomment "comment 69" (om-make-point 48 34) (quote "wdur") "" (om-make-point 978 555) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 56" (quote t) (quote nil) (om-make-point 1031 581) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 68" (om-make-point 48 34) (quote "oct") "" (om-make-point 1027 554) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 55" (quote t) (quote nil) (om-make-point 884 581) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 67" (om-make-point 51 34) (quote "afil") "" (om-make-point 793 556) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "FOG-1 6" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "spd" (quote :spd) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil))) (om-make-point 635 635) (om-make-point 420 66) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4))) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.005)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.01)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) (list 0.001 0.002 0.005))) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4) (list 2 2 2) (list -6.0 -6.0 -6.0) (list 100 100 100) (list 1 1 1) (list 1 1 1) (list 10 10 10) (list 1 1 1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.005 0.005 0.005) (list 0.01 0.01 0.01) (list 0.001 0.002 0.005) (list 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 54" (quote t) (quote nil) (om-make-point 762 582) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 53" (quote t) (quote nil) (om-make-point 795 581) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 52" (quote t) (quote nil) (om-make-point 681 582) (om-make-point 41 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 51" (quote t) (quote nil) (om-make-point 726 582) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote abstraction) "Synt&T 6" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 4 31) (om-make-point 397 30) "f10 0 262144 -1 \"/OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 262144 -1 \\\"/OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 45 58) (om-make-point 73 30) "fog-1_F" "\"fog-1_F\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 4 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 569 561) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "fog-1_F" :type "aiff")) nil "Synt&T") (om-load-boxcomment "comment 54" (om-make-point 23 201) (quote "|$|$|$|$$") "" (om-make-point 542 495) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 50" (quote t) (quote nil) (om-make-point 206 513) (om-make-point 135 30) (list 0.01 0.02 0.04 0.1) "(0.01 0.02 0.04 0.1)" nil) (om-load-boxcall (quote bastype) "aux 49" (quote t) (quote nil) (om-make-point 107 519) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 66" (om-make-point 43 88) (quote "E") "" (om-make-point 38 494) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 65" (om-make-point 51 34) (quote "durs") "" (om-make-point 97 493) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 3" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 99 557) nil (list 4 (list 0 2 4 6)) nil "C#ed") (om-load-boxcomment "comment 64" (om-make-point 30 26) (quote "f0") "" (om-make-point 147 553) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 63" (om-make-point 47 30) (quote "freq") "" (om-make-point 180 549) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 62" (om-make-point 48 34) (quote "aenv") "" (om-make-point 290 547) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 61" (om-make-point 40 31) (quote "bw") "" (om-make-point 220 551) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "fog-1_E.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 28 630) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "fog-1_E" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fog-1_E.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 676 341) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 293 570) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 60" (om-make-point 48 34) (quote "spd") "" (om-make-point 341 550) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 48" (quote t) (quote nil) (om-make-point 383 574) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 59" (om-make-point 48 34) (quote "win") "" (om-make-point 388 549) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 47" (quote t) (quote nil) (om-make-point 439 574) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 58" (om-make-point 48 34) (quote "wout") "" (om-make-point 440 548) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 46" (quote t) (quote nil) (om-make-point 493 574) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 57" (om-make-point 48 34) (quote "oct") "" (om-make-point 489 547) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 45" (quote t) (quote nil) (om-make-point 346 574) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 56" (om-make-point 51 34) (quote "afil") "" (om-make-point 255 549) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "FOG-1 5" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "spd" (quote :spd) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil))) (om-make-point 97 628) (om-make-point 420 66) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6))) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.005)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) (list 0.01 0.02 0.04 0.1))) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.005)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6) (list 2 2 2 2) (list -6.0 -6.0 -6.0 -6.0) (list 100 100 100 100) (list 1 1 1 1) (list 1 1 1 1) (list 10 10 10 10) (list 1 1 1 1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.005 0.005 0.005 0.005) (list 0.01 0.02 0.04 0.1) (list 0.005 0.005 0.005 0.005) (list 0 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 44" (quote t) (quote nil) (om-make-point 224 575) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 55" (om-make-point 57 34) (quote "wdur") "" (om-make-point 154 508) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 43" (quote t) (quote nil) (om-make-point 257 574) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 42" (quote t) (quote nil) (om-make-point 143 575) (om-make-point 41 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 41" (quote t) (quote nil) (om-make-point 188 575) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote abstraction) "Synt&T 5" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 4 31) (om-make-point 397 30) "f10 0 262144 -1 \"/OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 262144 -1 \\\"/OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 43 58) (om-make-point 74 30) "fog-1_E" "\"fog-1_E\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 4 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 283 326)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 31 554) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "fog-1_E" :type "aiff")) nil "Synt&T") (om-load-boxcomment "comment 53" (om-make-point 1066 66) (quote "____________________________________________") "" (om-make-point 31 431) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Synt&T 4" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 4 31) (om-make-point 397 30) "f10 0 262144 -1 \"/OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 262144 -1 \\\"/OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 43 58) (om-make-point 75 30) "fog-1_D" "\"fog-1_D\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 4 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 572 334) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "fog-1_D" :type "aiff")) nil "Synt&T") (om-load-boxcall (quote bastype) "aux 40" (quote t) (quote nil) (om-make-point 729 355) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 39" (quote t) (quote nil) (om-make-point 747 293) (om-make-point 134 30) (list 0.001 0.002 0.005) "(0.001 0.002 0.005)" nil) (om-load-boxcall (quote bastype) "aux 38" (quote t) (quote nil) (om-make-point 684 355) (om-make-point 41 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 37" (quote t) (quote nil) (om-make-point 798 354) (om-make-point 34 30) 10 "10" nil) (om-load-boxcomment "comment 52" (om-make-point 40 31) (quote "win") "" (om-make-point 711 288) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 36" (quote t) (quote nil) (om-make-point 765 355) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 35" (quote t) (quote nil) (om-make-point 648 299) (om-make-point 27 30) 2 "2" nil) (om-load-editor-box1 "FOG-1 4" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "spd" (quote :spd) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil))) (om-make-point 638 408) (om-make-point 420 66) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4))) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 2)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) (list 0.001 0.002 0.005))) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.01)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.005)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4) (list 2 2 2) (list -6.0 -6.0 -6.0) (list 100 100 100) (list 1 1 1) (list 1 1 1) (list 10 10 10) (list 1 1 1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.001 0.002 0.005) (list 0.01 0.01 0.01) (list 0.005 0.005 0.005) (list 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))))) nil nil nil nil) (om-load-boxcomment "comment 51" (om-make-point 51 34) (quote "afil") "" (om-make-point 796 329) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 34" (quote t) (quote nil) (om-make-point 887 354) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 50" (om-make-point 48 34) (quote "oct") "" (om-make-point 1028 327) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 33" (quote t) (quote nil) (om-make-point 1032 354) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 49" (om-make-point 48 34) (quote "wout") "" (om-make-point 981 328) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 32" (quote t) (quote nil) (om-make-point 980 354) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 48" (om-make-point 48 34) (quote "wdur") "" (om-make-point 929 329) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 933 354) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcomment "comment 47" (om-make-point 48 34) (quote "spd") "" (om-make-point 882 330) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 834 350) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "fog-1_D.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 569 410) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "fog-1_D" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fog-1_D.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 676 341) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment 46" (om-make-point 40 31) (quote "bw") "" (om-make-point 761 331) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 45" (om-make-point 48 34) (quote "aenv") "" (om-make-point 831 327) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 44" (om-make-point 47 30) (quote "freq") "" (om-make-point 721 329) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 43" (om-make-point 30 26) (quote "f0") "" (om-make-point 688 333) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 2" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 640 337) nil (list 3 (list 0 2 4)) nil "C#ed") (om-load-boxcomment "comment 42" (om-make-point 51 34) (quote "durs") "" (om-make-point 638 273) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 27" (om-make-point 43 88) (quote "D") "" (om-make-point 578 277) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "Synt&T 3" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 4 31) (om-make-point 397 30) "f10 0 262144 -1 \"/OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 262144 -1 \\\"/OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 43 58) (om-make-point 75 30) "fog-1_C" "\"fog-1_C\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 4 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 36 338) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "fog-1_A" :type "aiff")) nil "Synt&T") (om-load-boxcall (quote abstraction) "Synt&T 2" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 4 31) (om-make-point 397 30) "f10 0 262144 -1 \"/OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 262144 -1 \\\"/OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 43 58) (om-make-point 75 30) "fog-1_B" "\"fog-1_B\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 4 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 569 111) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "fog-1_A" :type "aiff")) nil "Synt&T") (om-load-boxcomment "comment 41" (om-make-point 1066 66) (quote "____________________________________________") "" (om-make-point 42 214) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 40" (om-make-point 43 88) (quote "C") "" (om-make-point 43 279) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 39" (om-make-point 51 34) (quote "durs") "" (om-make-point 102 277) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 104 341) nil nil nil "C#ed") (om-load-boxcomment "comment 38" (om-make-point 30 26) (quote "f0") "" (om-make-point 152 337) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 37" (om-make-point 47 30) (quote "freq") "" (om-make-point 185 333) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 36" (om-make-point 48 34) (quote "aenv") "" (om-make-point 295 331) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 35" (om-make-point 40 31) (quote "bw") "" (om-make-point 225 335) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "fog-1_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 33 414) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "fog-1_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fog-1_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 676 341) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 298 354) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 34" (om-make-point 48 34) (quote "win") "" (om-make-point 346 334) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 30" (quote t) (quote nil) (om-make-point 397 358) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcomment "comment 33" (om-make-point 48 34) (quote "wdur") "" (om-make-point 393 333) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 29" (quote t) (quote nil) (om-make-point 444 358) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 32" (om-make-point 48 34) (quote "wout") "" (om-make-point 445 332) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 498 358) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 31" (om-make-point 48 34) (quote "oct") "" (om-make-point 494 331) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 27" (quote t) (quote nil) (om-make-point 343 358) (om-make-point 52 30) 0.003 "0.003" nil) (om-load-boxcomment "comment 30" (om-make-point 51 34) (quote "afil") "" (om-make-point 260 333) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "FOG-1 3" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "spd" (quote :spd) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil))) (om-make-point 102 412) (om-make-point 420 66) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 6))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 4 8 12 16 20))) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 4)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) (list 1 2 4 0.66 0.5 0.25))) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.01)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.005)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 4 8 12 16 20) (list 4 4 4 4 4 4) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 100 100 100 100 100 100) (list 1 1 1 1 1 1) (list 1 1 1 1 1 1) (list 10 10 10 10 10 10) (list 1 2 4 0.66 0.5 0.25) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.003 0.003 0.003 0.003 0.003 0.003) (list 0.01 0.01 0.01 0.01 0.01 0.01) (list 0.005 0.005 0.005 0.005 0.005 0.005) (list 0 0 0 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 112 303) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 229 359) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 29" (om-make-point 40 31) (quote "spd") "" (om-make-point 175 292) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 262 358) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 148 359) (om-make-point 41 30) 100 "100" nil) (om-load-boxcomment "comment 28" (om-make-point 23 201) (quote "|$|$|$|$$") "" (om-make-point 541 279) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 211 297) (om-make-point 139 30) (list 1 2 4 0.66 0.5 0.25) "(1 2 4 0.66 0.5 0.25)" nil) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 193 359) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 734 69) (om-make-point 59 30) (list 1 2 4) "(1 2 4)" nil) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 795 128) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 681 129) (om-make-point 41 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 758 128) (om-make-point 34 30) 10 "10" nil) (om-load-boxcomment "comment 26" (om-make-point 40 31) (quote "spd") "" (om-make-point 789 103) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 725 129) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 645 73) (om-make-point 27 30) 4 "4" nil) (om-load-editor-box1 "FOG-1 2" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "spd" (quote :spd) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil))) (om-make-point 635 182) (om-make-point 420 66) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 4 8))) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 4)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 1 2 4))) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.01)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.005)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 4 8) (list 4 4 4) (list -6.0 -6.0 -6.0) (list 100 100 100) (list 1 2 4) (list 1 1 1) (list 10 10 10) (list 1 1 1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.003 0.003 0.003) (list 0.01 0.01 0.01) (list 0.005 0.005 0.005) (list 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))))) nil nil nil nil) (om-load-boxcomment "comment 25" (om-make-point 41 34) (quote "afil") "" (om-make-point 756 104) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 876 128) (om-make-point 52 30) 0.003 "0.003" nil) (om-load-boxcomment "comment 24" (om-make-point 48 34) (quote "oct") "" (om-make-point 1026 102) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1030 128) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 13" (om-make-point 48 34) (quote "wout") "" (om-make-point 978 102) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 977 128) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 12" (om-make-point 48 34) (quote "wdur") "" (om-make-point 926 103) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 930 128) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcomment "comment 11" (om-make-point 48 34) (quote "win") "" (om-make-point 879 104) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 831 125) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "fog-1_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 572 185) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "fog-1_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fog-1_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 410 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment 10" (om-make-point 40 31) (quote "bw") "" (om-make-point 721 105) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 48 34) (quote "aenv") "" (om-make-point 828 103) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 47 30) (quote "freq") "" (om-make-point 693 63) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 30 26) (quote "f0") "" (om-make-point 685 107) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 637 111) nil nil nil "C#ed") (om-load-boxcomment "comment 5" (om-make-point 51 34) (quote "durs") "" (om-make-point 635 47) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 44 88) (quote "B") "" (om-make-point 578 53) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 24 199) (quote "|$|$|$|$$$") "" (om-make-point 539 54) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 259 132) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 40 31) (quote "spd") "" (om-make-point 254 106) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "FOG-1" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "spd" (quote :spd) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil))) (om-make-point 99 185) (om-make-point 420 66) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 10))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 4 8 12 16 20 24 28 32 36))) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 4)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) (list 1 2 4 8 16 32 64 128 256 512))) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 1)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.003)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.01)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.005)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 4 8 12 16 20 24 28 32 36) (list 4 4 4 4 4 4 4 4 4 4) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 1 2 4 8 16 32 64 128 256 512) (list 1 1 1 1 1 1 1 1 1 1) (list 1 1 1 1 1 1 1 1 1 1) (list 10 10 10 10 10 10 10 10 10 10) (list 1 1 1 1 1 1 1 1 1 1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003) (list 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01) (list 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005 0.005) (list 0 0 0 0 0 0 0 0 0 0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 221 132) (om-make-point 34 30) 10 "10" nil) (om-load-boxcomment "comment 23" (om-make-point 44 88) (quote "A") "" (om-make-point 42 55) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 22" (om-make-point 51 34) (quote "durs") "" (om-make-point 105 50) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 115 76) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 106 114) nil (list 10 (list 0 4 8 12 16 20 24 28 32 36)) nil "C#ed") (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 189 132) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 21" (om-make-point 30 26) (quote "f0") "" (om-make-point 164 57) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 20" (om-make-point 47 30) (quote "freq") "" (om-make-point 143 106) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 19" (om-make-point 48 34) (quote "aenv") "" (om-make-point 292 106) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 18" (om-make-point 40 31) (quote "bw") "" (om-make-point 184 107) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "fog-1_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 36 186) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "fog-1_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "fog-1_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 410 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt&T" (om-load-patch-abs1 "Synt&T" (quote ((om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 4 31) (om-make-point 397 30) "f10 0 262144 -1 \"/OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 262144 -1 \\\"/OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 71 58) (om-make-point 75 30) "fog-1_A" "\"fog-1_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 13 47) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 137 125) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 120) nil nil nil nil 1))) (quote ((4 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 4 2 nil 1))) 6.0602 nil "" (om-make-point 661 765) (om-make-point 434 231)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 35 116) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "fog-1_A" :type "aiff")) nil "Synt&T") (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 186 62) (om-make-point 199 30) (list 1 2 4 8 16 32 64 128 256 512) "(1 2 4 8 16 32 64 128 256 512)" nil) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 150 132) (om-make-point 27 30) 1 "1" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 293 130) (om-make-point 41 38) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 95 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 17" (om-make-point 48 34) (quote "win") "" (om-make-point 345 107) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 394 133) (om-make-point 45 30) 0.01 "0.01" nil) (om-load-boxcomment "comment 16" (om-make-point 48 34) (quote "wdur") "" (om-make-point 390 107) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 441 133) (om-make-point 52 30) 0.005 "0.005" nil) (om-load-boxcomment "comment 15" (om-make-point 48 34) (quote "wout") "" (om-make-point 442 107) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 494 133) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 14" (om-make-point 48 34) (quote "oct") "" (om-make-point 491 106) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 340 133) (om-make-point 52 30) 0.003 "0.003" nil) (om-load-boxcomment "comment 9" (om-make-point 51 34) (quote "afil") "" (om-make-point 220 107) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 132 34) (quote "Tutorial FOG-1") "" (om-make-point 57 2) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((5 0 8 0 nil 3) (2 0 8 1 nil 1) (27 0 13 0 nil 0) (8 0 22 1 nil 1) (8 1 22 4 nil 2) (5 0 22 5 nil 3) (25 0 22 7 nil 5) (26 0 22 8 nil 3) (23 0 22 9 nil 2) (24 0 22 10 nil 1) (20 0 22 11 nil 0) (14 0 22 12 nil 0) (3 0 22 13 nil 0) (1 0 22 14 nil 0) (18 0 22 15 nil 0) (2 0 22 16 nil 1) (22 0 27 0 nil 0) (31 0 34 0 nil 3) (28 0 34 1 nil 1) (54 0 39 0 nil 0) (34 0 49 1 nil 1) (34 1 49 4 nil 2) (31 0 49 5 nil 3) (52 0 49 7 nil 5) (53 0 49 8 nil 3) (50 0 49 9 nil 2) (51 0 49 10 nil 1) (47 0 49 11 nil 0) (40 0 49 12 nil 0) (29 0 49 13 nil 0) (43 0 49 14 nil 0) (28 0 49 15 nil 1) (45 0 49 16 nil 0) (49 0 54 0 nil 0) (57 0 60 0 nil 3) (56 0 60 1 nil 1) (82 0 65 0 nil 0) (60 0 76 1 nil 1) (60 1 76 4 nil 2) (57 0 76 5 nil 3) (80 0 76 7 nil 5) (81 0 76 8 nil 3) (77 0 76 9 nil 2) (79 0 76 10 nil 1) (74 0 76 11 nil 0) (66 0 76 12 nil 0) (68 0 76 13 nil 0) (56 0 76 14 nil 1) (70 0 76 15 nil 0) (72 0 76 16 nil 0) (76 0 82 0 nil 0) (92 0 84 0 nil 0) (108 0 92 1 nil 1) (108 1 92 4 nil 2) (91 0 92 5 nil 3) (87 0 92 7 nil 5) (85 0 92 8 nil 3) (90 0 92 9 nil 2) (88 0 92 10 nil 1) (94 0 92 11 nil 0) (102 0 92 12 nil 0) (86 0 92 13 nil 1) (100 0 92 14 nil 0) (98 0 92 15 nil 0) (96 0 92 16 nil 0) (84 0 103 0 nil 0) (91 0 108 0 nil 3) (86 0 108 1 nil 1) (132 0 111 0 nil 0) (148 0 112 0 nil 0) (133 0 116 0 nil 3) (139 0 116 1 nil 1) (111 0 121 0 nil 0) (116 0 132 1 nil 1) (116 1 132 4 nil 2) (133 0 132 5 nil 3) (137 0 132 7 nil 5) (140 0 132 8 nil 3) (134 0 132 9 nil 2) (136 0 132 10 nil 1) (139 0 132 11 nil 1) (122 0 132 12 nil 0) (130 0 132 13 nil 0) (124 0 132 14 nil 0) (126 0 132 15 nil 0) (128 0 132 16 nil 0) (164 0 148 1 nil 1) (164 1 148 4 nil 2) (147 0 148 5 nil 3) (143 0 148 7 nil 5) (141 0 148 8 nil 1) (146 0 148 9 nil 2) (144 0 148 10 nil 1) (142 0 148 11 nil 5) (158 0 148 12 nil 0) (150 0 148 13 nil 0) (156 0 148 14 nil 0) (154 0 148 15 nil 0) (152 0 148 16 nil 0) (112 0 159 0 nil 0) (147 0 164 0 nil 3) (141 0 164 1 nil 1) (175 0 170 1 nil 1) (175 1 170 4 nil 2) (174 0 170 5 nil 3) (183 0 170 7 nil 1) (184 0 170 8 nil 4) (176 0 170 9 nil 2) (171 0 170 10 nil 1) (168 0 170 11 nil 5) (185 0 170 12 nil 0) (193 0 170 13 nil 0) (187 0 170 14 nil 0) (189 0 170 15 nil 0) (191 0 170 16 nil 0) (174 0 175 0 nil 3) (183 0 175 1 nil 1) (182 0 181 0 nil 0) (170 0 182 0 nil 0))) nil 6.0602))
