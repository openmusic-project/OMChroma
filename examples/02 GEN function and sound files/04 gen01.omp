; OM File Header - Saved 2025/02/06 18:22:39
; (6.0602 :patc (om-make-point 23 89) (om-make-point 257 124) (om-make-point 1228 497) "non documentation" 183 0 nil "2025/02/06 18:22:39")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../out-files/gen01_E.aiff" "../../../out-files/gen01_D.aiff" "../../../out-files/gen01_C.aiff" "../../../out-files/gen01_B.aiff" "../../../out-files/gen01_A.aiff" "../../in-files/count.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "04 gen01" (quote ((om-load-boxcomment "comment 14" (om-make-point 647 34) (quote "WARNING! The WorkSpace you are using must be named \"OMChroma_Tutorial\"") "" (om-make-point 151 388) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 768 274) (om-make-point 79 30) "gen01_E" "\"gen01_E\"" nil) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 813 58) (om-make-point 27 30) 4 "4" nil) (om-load-boxcomment "comment 16" (om-make-point 51 34) (quote "afil") "" (om-make-point 852 35) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 15" (om-make-point 45 60) (quote "E") "" (om-make-point 774 37) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE1 5" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 772 308) nil nil nil nil 1) (om-load-editor-box1 "gen01_E.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 837 303) (om-make-point 94 64) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "gen01_E" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gen01_E.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player microplay show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode scale)) (list (quote :midishare) nil (quote t) 1 0 (om-make-point 56 22) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 nil)) t nil nil nil) (om-load-editor-box1 "FOG-1 5" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "spd" (quote :spd) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil))) (om-make-point 771 92) (om-make-point 160 62) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 4)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100.0)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.0)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1.0)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.1)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.05)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 4) (list -6.0) (list 100.0) (list 1.0) (list 0.0) (list 10) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 0.1) (list 0.05) (list 0.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 855 58) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 766 159) (om-make-point 166 73) "f10 0 262144 -1 \"/OMChroma_Tutorial/in-files/count.aiff\" 0 0 0" "\"f10 0 262144 -1 \\\"/OMChroma_Tutorial/in-files/count.aiff\\\" 0 0 0\"" nil) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 624 59) (om-make-point 27 30) 4 "4" nil) (om-load-boxcomment "comment 13" (om-make-point 51 34) (quote "afil") "" (om-make-point 663 36) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 12" (om-make-point 45 60) (quote "D") "" (om-make-point 585 38) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 11" (om-make-point 34 331) (quote "|$|$|$|$|$|$|$$") "" (om-make-point 745 45) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 579 275) (om-make-point 80 30) "gen01_D" "\"gen01_D\"" nil) (om-load-boxcall (quote genfun) "SYNTHESIZE1 4" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 583 309) nil nil nil nil 1) (om-load-editor-box1 "GEN01 4" (quote gen01) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ID" "?") (om-load-inputfun (quote input-funbox) "no documentation" "SIZE" 524288) (om-load-inputfun (quote input-funbox) "no documentation" "STIME" 0) (om-load-inputfun (quote input-funbox) "no documentation" "FILE" "") (om-load-inputfun (quote input-funbox) "no documentation" "SKIPTIME" 0))) (om-make-point 621 213) (om-make-point 105 59) (if (find-class (quote gen01) nil) (make-instance (quote gen01) :id 10 :size 524288 :stime 0 :file (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "count" :type "aiff") :skiptime 0 :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 nil)) nil nil nil nil) (om-load-editor-box1 "gen01_D.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 648 304) (om-make-point 94 64) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "gen01_D" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gen01_D.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player microplay show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode scale)) (list (quote :midishare) nil (quote t) 1 0 (om-make-point 56 22) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 nil)) t nil nil nil) (om-load-editor-box1 "FOG-1 4" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "spd" (quote :spd) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil))) (om-make-point 582 93) (om-make-point 160 62) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 4)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100.0)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.0)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1.0)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.1)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.05)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 4) (list -6.0) (list 100.0) (list 1.0) (list 0.0) (list 10) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 0.1) (list 0.05) (list 0.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 581 215) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 666 59) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 437 60) (om-make-point 27 30) 4 "4" nil) (om-load-boxcomment "comment 10" (om-make-point 51 34) (quote "afil") "" (om-make-point 476 37) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 45 60) (quote "C") "" (om-make-point 393 41) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 34 331) (quote "|$|$|$|$|$|$|$$") "" (om-make-point 558 46) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 392 276) (om-make-point 80 30) "gen01_C" "\"gen01_C\"" nil) (om-load-boxcall (quote genfun) "SYNTHESIZE1 3" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 396 310) nil nil nil nil 1) (om-load-editor-box1 "GEN01 3" (quote gen01) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ID" "?") (om-load-inputfun (quote input-funbox) "no documentation" "SIZE" 524288) (om-load-inputfun (quote input-funbox) "no documentation" "STIME" 0) (om-load-inputfun (quote input-funbox) "no documentation" "FILE" "") (om-load-inputfun (quote input-funbox) "no documentation" "SKIPTIME" 0))) (om-make-point 434 214) (om-make-point 105 59) (if (find-class (quote gen01) nil) (make-instance (quote gen01) :id 10 :size 524288 :stime 0 :file "/OMChroma_Tutorial/in-files/count.aiff" :skiptime 0 :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 nil)) nil nil nil nil) (om-load-editor-box1 "gen01_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 461 305) (om-make-point 94 64) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "gen01_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gen01_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player microplay show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode scale)) (list (quote :midishare) nil (quote t) 1 0 (om-make-point 56 22) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 nil)) t nil nil nil) (om-load-editor-box1 "FOG-1 3" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "spd" (quote :spd) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil))) (om-make-point 395 94) (om-make-point 160 62) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 4)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100.0)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.0)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1.0)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.1)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.05)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 4) (list -6.0) (list 100.0) (list 1.0) (list 0.0) (list 10) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 0.1) (list 0.05) (list 0.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 394 216) (om-make-point 35 31) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 479 60) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 402 158) (om-make-point 158 51) "/OMChroma_Tutorial/in-files/count.aiff" "\"/OMChroma_Tutorial/in-files/count.aiff\"" nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 252 62) (om-make-point 27 30) 4 "4" nil) (om-load-boxcomment "comment 7" (om-make-point 51 34) (quote "afil") "" (om-make-point 291 39) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 45 60) (quote "B") "" (om-make-point 213 41) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 34 331) (quote "|$|$|$|$|$|$|$$") "" (om-make-point 373 48) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 207 278) (om-make-point 80 30) "gen01_B" "\"gen01_B\"" nil) (om-load-boxcall (quote genfun) "SYNTHESIZE1 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 211 312) nil nil nil nil 1) (om-load-editor-box1 "GEN01 2" (quote gen01) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ID" "?") (om-load-inputfun (quote input-funbox) "no documentation" "SIZE" 524288) (om-load-inputfun (quote input-funbox) "no documentation" "STIME" 0) (om-load-inputfun (quote input-funbox) "no documentation" "FILE" "") (om-load-inputfun (quote input-funbox) "no documentation" "SKIPTIME" 0))) (om-make-point 249 216) (om-make-point 105 59) (if (find-class (quote gen01) nil) (make-instance (quote gen01) :id 10 :size 524288 :stime 0 :file (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "count" :type "aiff") :skiptime 0 :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 nil)) nil nil nil nil) (om-load-editor-box1 "gen01_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 276 307) (om-make-point 94 64) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "gen01_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gen01_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player microplay show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode scale)) (list (quote :midishare) nil (quote t) 1 0 (om-make-point 56 22) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 nil)) t nil nil nil) (om-load-editor-box1 "FOG-1 2" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "spd" (quote :spd) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil))) (om-make-point 210 96) (om-make-point 160 62) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 4)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100.0)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.0)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1.0)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.1)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.05)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 4) (list -6.0) (list 100.0) (list 1.0) (list 0.0) (list 10) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 0.1) (list 0.05) (list 0.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 209 218) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 294 62) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 64 62) (om-make-point 27 30) 4 "4" nil) (om-load-boxcomment "comment 4" (om-make-point 51 34) (quote "afil") "" (om-make-point 103 39) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 45 60) (quote "A") "" (om-make-point 25 41) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 19 278) (om-make-point 80 30) "gen01_A" "\"gen01_A\"" nil) (om-load-boxcomment "comment 2" (om-make-point 34 331) (quote "|$|$|$|$|$|$|$$") "" (om-make-point 185 48) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "INFILE2" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "NAME" nil))) (om-make-point 678 156) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 598 166) (om-make-point 83 30) "count.aiff" "\"count.aiff\"" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 216 158) (om-make-point 155 57) (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "in-files")) :device nil :host nil :name "count" :type "aiff") "#P\"/OMChroma_Tutorial/in-files/count.aiff\"" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 106 62) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 53 172) (om-make-point 34 30) 10 "10" nil) (om-load-editor-box1 "FOG-1" (quote fog-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "spd" (quote :spd) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wdur" (quote :wdur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wout" (quote :wout) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "oct" (quote :oct) nil nil))) (om-make-point 22 96) (om-make-point 160 62) (let ((rep (if (find-class (quote fog-1) nil) (let ((rep (make-instance (quote fog-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 4)) (when (member (quote amp) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100.0)) (when (member (quote freq) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 1.0)) (when (member (quote bw) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 0.0)) (when (member (quote afil) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote afil)) 10)) (when (member (quote spd) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote spd)) 1.0)) (when (member (quote aenv) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote win) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.01)) (when (member (quote wdur) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wdur)) 0.1)) (when (member (quote wout) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote wout)) 0.05)) (when (member (quote oct) (get-init-slots-of-class (quote fog-1)) :key (quote car)) (setf (slot-value rep (quote oct)) 0.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 4) (list -6.0) (list 100.0) (list 1.0) (list 0.0) (list 10) (list 1.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 160.0 880.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 0.01) (list 0.1) (list 0.05) (list 0.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 136 34) (quote "Tutorial GEN01") "" (om-make-point 56 1) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE1" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 23 312) nil nil nil nil 1) (om-load-editor-box1 "gen01_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 88 307) (om-make-point 94 64) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "gen01_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gen01_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player microplay show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode scale)) (list (quote :midishare) nil (quote t) 1 0 (om-make-point 56 22) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 nil)) t nil nil nil) (om-load-editor-box1 "count.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 96 159) (om-make-point 77 55) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "count" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "count.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player microplay palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list (quote :midishare) nil 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 822 315) (om-make-point 56 22) 0 1 (quote t) nil)) t nil nil nil) (om-load-editor-box1 "GEN01" (quote gen01) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ID" "?") (om-load-inputfun (quote input-funbox) "no documentation" "SIZE" 524288) (om-load-inputfun (quote input-funbox) "no documentation" "STIME" 0) (om-load-inputfun (quote input-funbox) "no documentation" "FILE" "") (om-load-inputfun (quote input-funbox) "no documentation" "SKIPTIME" 0))) (om-make-point 61 216) (om-make-point 107 60) (if (find-class (quote gen01) nil) (make-instance (quote gen01) :id 10 :size 524288 :stime 0 :file (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "in-files")) :device :unspecific :host nil :name "in_1" :type "aiff") :skiptime 0 :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 nil)) nil nil nil t))) (quote ((7 0 5 0 nil 1) (1 0 5 1 nil 0) (9 0 5 2 nil 0) (5 0 6 0 nil 0) (2 0 7 5 nil 0) (8 0 7 10 nil 0) (18 0 15 0 nil 1) (14 0 15 1 nil 0) (16 0 15 2 nil 2) (19 0 16 1 nil 3) (49 0 16 4 nil 0) (15 0 17 0 nil 0) (10 0 18 5 nil 0) (20 0 18 10 nil 0) (29 0 26 0 nil 1) (25 0 26 1 nil 0) (27 0 26 2 nil 2) (30 0 27 1 nil 3) (32 0 27 4 nil 0) (26 0 28 0 nil 0) (21 0 29 5 nil 0) (31 0 29 10 nil 0) (41 0 38 0 nil 1) (37 0 38 1 nil 0) (39 0 38 2 nil 2) (42 0 39 1 nil 3) (51 0 39 4 nil 0) (38 0 40 0 nil 0) (33 0 41 5 nil 0) (43 0 41 10 nil 0) (50 0 49 0 nil 2) (44 0 54 5 nil 0) (52 0 54 10 nil 0) (54 0 56 0 nil 1) (47 0 56 1 nil 0) (59 0 56 2 nil 2) (56 0 57 0 nil 0) (53 0 59 1 nil 3) (58 0 59 4 nil 0))) nil 6.0602))
