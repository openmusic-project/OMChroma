; OM File Header - Saved 2013/10/29 22:34:29
; (6.0602 :patc (om-make-point 116 21) (om-make-point 318 262) (om-make-point 947 792) "" 183 0 nil "2013/09/02 14:40:19")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/gt_D.aiff" "../../out-files/gt_C.aiff" "../../out-files/gt_B.aiff" "../../out-files/gt_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "02 global_tables" (quote ((om-load-boxcomment "comment 19" (om-make-point 886 88) (quote "____________________________________") "" (om-make-point 20 330) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 39" (quote t) (quote nil) (om-make-point 744 559) (om-make-point 105 30) (list 1 4097 0.001) "(1 4097 0.001)" nil) (om-load-boxcall (quote bastype) "aux 38" (quote t) (quote nil) (om-make-point 694 560) (om-make-point 27 30) 5 "5" nil) (om-load-boxcomment "comment 30" (om-make-point 97 34) (quote "param-list") "" (om-make-point 747 534) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 29" (om-make-point 87 34) (quote "gen-num") "" (om-make-point 670 534) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 28" (om-make-point 46 34) (quote "time") "" (om-make-point 630 534) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 27" (om-make-point 46 34) (quote "size") "" (om-make-point 585 534) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 26" (om-make-point 31 34) (quote "id") "" (om-make-point 549 535) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 37" (quote t) (quote nil) (om-make-point 640 560) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 36" (quote t) (quote nil) (om-make-point 584 560) (om-make-point 48 30) 4097 "4097" nil) (om-load-boxcall (quote bastype) "aux 35" (quote t) (quote nil) (om-make-point 546 561) (om-make-point 34 30) 11 "11" nil) (om-load-editor-box1 "GEN-CS-TABLE 2" (quote gen-cs-table) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ID" "?") (om-load-inputfun (quote input-funbox) "no documentation" "SIZE" 513) (om-load-inputfun (quote input-funbox) "no documentation" "STIME" 0) (om-load-inputfun (quote input-funbox) "no documentation" "GEN-NUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "PARAM-LIST" nil))) (om-make-point 539 598) (om-make-point 285 54) (if (find-class (quote gen-cs-table) nil) (make-instance (quote gen-cs-table) :id 11 :size 4097 :stime 0 :gen-num 5 :param-list (list 1 4097 0.001) :from-file t)) nil nil (pairlis (quote (show-stems deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list (quote t) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0)) nil nil nil t) (om-load-boxcall (quote bastype) "aux 34" (quote t) (quote nil) (om-make-point 444 408) (om-make-point 62 30) (list 10 11) "(10 11)" nil) (om-load-boxcall (quote bastype) "aux 33" (quote t) (quote nil) (om-make-point 319 521) (om-make-point 56 30) "gt_D" "\"gt_D\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 388 518) nil nil nil nil 1) (om-load-boxcomment "comment 25" (om-make-point 45 61) (quote "D") "" (om-make-point 311 442) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE 4" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 334 576) nil nil nil nil 1) (om-load-editor-box1 "ADD-1 4" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numrows" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :aenv) nil nil))) (om-make-point 352 442) (om-make-point 155 64) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (list 10 11))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1) (list 1 1) (list -6.0 -6.0) (list 440.0 440.0) (list 10 11))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil) (om-load-editor-box1 "gt_D.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 322 649) (om-make-point 141 75) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gt_D" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gt_D.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 32" (quote t) (quote nil) (om-make-point 349 408) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 387 408) (om-make-point 48 30) (list 0 1) "(0 1)" nil) (om-load-boxcomment "comment 24" (om-make-point 97 34) (quote "param-list") "" (om-make-point 748 399) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 23" (om-make-point 87 34) (quote "gen-num") "" (om-make-point 671 399) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 30" (quote t) (quote nil) (om-make-point 753 424) (om-make-point 80 30) (list 1 4097 0) "(1 4097 0)" nil) (om-load-boxcall (quote bastype) "aux 29" (quote t) (quote nil) (om-make-point 695 425) (om-make-point 27 30) 7 "7" nil) (om-load-boxcomment "comment 22" (om-make-point 46 34) (quote "time") "" (om-make-point 631 399) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 21" (om-make-point 46 34) (quote "size") "" (om-make-point 586 399) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 20" (om-make-point 31 34) (quote "id") "" (om-make-point 550 400) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 641 425) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 27" (quote t) (quote nil) (om-make-point 585 425) (om-make-point 48 30) 4097 "4097" nil) (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 547 426) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 387 165) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 318 168) (om-make-point 56 30) "gt_C" "\"gt_C\"" nil) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 443 55) (om-make-point 62 30) (list 10 11) "(10 11)" nil) (om-load-boxcomment "comment 18" (om-make-point 45 61) (quote "C") "" (om-make-point 310 89) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE 3" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 333 223) nil nil nil nil 1) (om-load-editor-box1 "ADD-1 3" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numrows" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :aenv) nil nil))) (om-make-point 351 89) (om-make-point 155 64) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (list 10 11))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1) (list 1 1) (list -6.0 -6.0) (list 440.0 440.0) (list 10 11))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil) (om-load-editor-box1 "gt_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 321 296) (om-make-point 141 75) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gt_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gt_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 348 55) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 386 55) (om-make-point 48 30) (list 0 1) "(0 1)" nil) (om-load-boxcomment "comment 17" (om-make-point 33 396) (quote "|$|$|$|$|$|$|") "" (om-make-point 245 395) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 54 520) (om-make-point 56 30) "gt_B" "\"gt_B\"" nil) (om-load-boxcomment "comment 16" (om-make-point 45 61) (quote "B") "" (om-make-point 46 441) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 21 579) nil nil nil nil 1) (om-load-editor-box1 "ADD-1 2" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numrows" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :aenv) nil nil))) (om-make-point 87 441) (om-make-point 155 64) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (list 10 11))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1) (list 1 1) (list -6.0 -6.0) (list 440.0 440.0) (list 10 11))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil) (om-load-editor-box1 "gt_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 94 571) (om-make-point 141 75) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gt_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gt_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 182 407) (om-make-point 62 30) (list 10 11) "(10 11)" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 84 407) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 122 407) (om-make-point 48 30) (list 0 1) "(0 1)" nil) (om-load-boxcomment "comment 15" (om-make-point 220 34) (quote "Tutorial Global Tables") "" (om-make-point 58 2) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 14" (om-make-point 30 337) (quote "|$|$|$|$|$|$|") "" (om-make-point 282 44) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 46 34) (quote "time") "" (om-make-point 805 179) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 12" (om-make-point 46 34) (quote "size") "" (om-make-point 760 179) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 11" (om-make-point 31 34) (quote "id") "" (om-make-point 724 180) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 10" (om-make-point 85 34) (quote "decimals") "" (om-make-point 643 180) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 73 34) (quote "y-point") "" (om-make-point 581 180) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 73 34) (quote "x-point") "" (om-make-point 513 181) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 812 205) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 759 205) (om-make-point 48 30) 4097 "4097" nil) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 721 206) (om-make-point 34 30) 11 "11" nil) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 667 207) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 591 207) (om-make-point 73 30) (list 1 0.001) "(1 0.001)" nil) (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 513 208) (om-make-point 69 30) (list 0 4097) "(0 4097)" nil) (om-load-boxcomment "comment 7" (om-make-point 46 34) (quote "time") "" (om-make-point 807 43) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 46 34) (quote "size") "" (om-make-point 762 43) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 31 34) (quote "id") "" (om-make-point 726 44) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 85 34) (quote "decimals") "" (om-make-point 645 44) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 73 34) (quote "y-point") "" (om-make-point 583 44) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 45 61) (quote "A") "" (om-make-point 31 92) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 73 34) (quote "x-point") "" (om-make-point 515 45) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "GEN05" (quote gen05) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0) (om-load-inputfun (quote input-funbox) "" "id" "?") (om-load-inputfun (quote input-funbox) "" "size" nil) (om-load-inputfun (quote input-funbox) "" "stime" 0))) (om-make-point 519 244) (om-make-point 323 62) (let ((newobj (when (find-class (quote gen05) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4097.0)) (quote (1.0 0.001)) (quote gen05) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) 11)) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 814 69) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 761 69) (om-make-point 48 30) 4097 "4097" nil) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 723 70) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 669 71) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 593 71) (om-make-point 48 30) (list 1 0) "(1 0)" nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 515 72) (om-make-point 69 30) (list 0 4097) "(0 4097)" nil) (om-load-editor-box1 "GEN07" (quote gen07) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0) (om-load-inputfun (quote input-funbox) "" "id" "?") (om-load-inputfun (quote input-funbox) "" "size" nil) (om-load-inputfun (quote input-funbox) "" "stime" 0))) (om-make-point 516 109) (om-make-point 321 62) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 4097.0)) (quote (1.0 0.0)) (quote gen07) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) 10)) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t) (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 138 512) (om-make-point 70 50) (load-buffer-textfile (quote ("(om::ScSt \"f10 0 4097 7 1 4097 0\")" "(om::ScSt \"f11 0 4097 5 1 4097 0.001\")" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 107 58) (om-make-point 48 30) (list 0 1) "(0 1)" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 69 58) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 164 58) (om-make-point 62 30) (list 10 11) "(10 11)" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 100 171) (om-make-point 186 43) (list "f10 0 4097 7 1 4097 0" "f11 0 4097 5 1 4097 0.001") "(\"f10 0 4097 7 1 4097 0\"$\"f11 0 4097 5 1 4097 0.001\")" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 39 171) (om-make-point 56 30) "gt_A" "\"gt_A\"" nil) (om-load-editor-box1 "gt_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 64 290) (om-make-point 141 75) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gt_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gt_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numrows" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :aenv) nil nil))) (om-make-point 72 92) (om-make-point 155 64) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (list 10 11))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1) (list 1 1) (list -6.0 -6.0) (list 440.0 440.0) (list 10 11))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil) (om-load-editor-box1 "GEN-CS-TABLE" (quote gen-cs-table) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ID" "?") (om-load-inputfun (quote input-funbox) "no documentation" "SIZE" 513) (om-load-inputfun (quote input-funbox) "no documentation" "STIME" 0) (om-load-inputfun (quote input-funbox) "no documentation" "GEN-NUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "PARAM-LIST" nil))) (om-make-point 540 463) (om-make-point 285 54) (if (find-class (quote gen-cs-table) nil) (make-instance (quote gen-cs-table) :id 10 :size 4097 :stime 0 :gen-num 7 :param-list (list 1 4097 0) :from-file t)) nil nil (pairlis (quote (show-stems deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list (quote t) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0)) nil nil nil t) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 67 226) nil nil nil nil 1))) (quote ((10 0 11 1 nil 0) (9 0 11 2 nil 0) (8 0 11 3 nil 0) (2 0 11 4 nil 0) (1 0 11 5 nil 0) (86 0 14 0 nil 3) (11 0 14 1 nil 1) (17 0 16 0 nil 0) (13 0 16 1 nil 2) (14 0 16 2 nil 0) (19 0 17 1 nil 0) (20 0 17 4 nil 0) (12 0 17 8 nil 0) (16 0 18 0 nil 0) (77 0 31 0 nil 3) (70 0 31 1 nil 1) (36 0 35 0 nil 0) (32 0 35 1 nil 2) (31 0 35 2 nil 0) (38 0 36 1 nil 0) (39 0 36 4 nil 0) (33 0 36 8 nil 0) (35 0 37 0 nil 0) (44 0 43 0 nil 0) (41 0 43 1 nil 2) (78 1 43 2 nil 0) (47 0 44 1 nil 0) (48 0 44 4 nil 0) (46 0 44 8 nil 0) (43 0 45 0 nil 0) (62 0 70 1 nil 0) (61 0 70 2 nil 0) (60 0 70 3 nil 0) (59 0 70 4 nil 0) (58 0 70 5 nil 0) (57 0 70 6 nil 0) (76 0 77 1 nil 0) (75 0 77 2 nil 0) (74 0 77 3 nil 0) (73 0 77 4 nil 0) (72 0 77 5 nil 0) (71 0 77 6 nil 0) (87 0 84 0 nil 0) (80 0 85 1 nil 0) (79 0 85 4 nil 0) (81 0 85 8 nil 0) (30 0 86 1 nil 0) (29 0 86 2 nil 0) (28 0 86 3 nil 0) (24 0 86 4 nil 0) (23 0 86 5 nil 0) (85 0 87 0 nil 0) (83 0 87 1 nil 2) (82 0 87 2 nil 0))) nil 6.0602))
