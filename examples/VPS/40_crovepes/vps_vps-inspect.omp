; OM File Header - Saved 2025/02/06 18:29:05
; (7.06 :patc (om-make-point 96 212) (om-make-point 0 0) (om-make-point 964 693) "no documentation" 183 0 nil "2025/02/06 18:29:05")
; End File Header
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "vps_vps-inspect" (quote ((let ((box (om-load-boxcall (quote lispfun) "ASSOC" (quote assoc) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" 0) (om-load-inputfun (quote input-funbox) "ALIST" "ALIST" nil))) (om-make-point 278 618) (om-make-point 91 42) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MATCH" (quote chroma::match) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 261 561) (om-make-point 172 42) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SPL2" (quote chroma::spl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::do2) (quote chroma::do3) (quote chroma::do5))))) (om-make-point 356 492) (om-make-point 70 50) (if (find-class (quote chroma::spl) nil) (make-instance (quote chroma::spl) :fql (list 267.8725 420.8229 607.28754 765.13434 1092.741) :the-list (list (append nil (cons "DO4" 33.0)) (append nil (cons "SOLd4" 15.0)) (append nil (cons "RE5" 50.0)) (append nil (cons "FAd5" 50.0)) (append nil (cons "DOd6" -33.0))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SPL" (quote chroma::spl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::do2) (quote chroma::do3) (quote chroma::do5))))) (om-make-point 271 493) (om-make-point 70 50) (if (find-class (quote chroma::spl) nil) (make-instance (quote chroma::spl) :fql (list 65.70369 131.40738 525.6295) :the-list (list (quote chroma::do2) (quote chroma::do3) (quote chroma::do5)) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 633 511) (om-make-point 400 20))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-VPS-MINAMP" (quote get-vps-minamp) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "X" nil))) (om-make-point 485 340) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-VPS-AMPS" (quote get-vps-amps) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 348 333) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-VPS-MAXAMP" (quote get-vps-maxamp) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "X" nil))) (om-make-point 410 361) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 223 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SPL" (quote chroma::spl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::do2) (quote chroma::do3) (quote chroma::do5))))) (om-make-point 140 195) (om-make-point 70 50) (if (find-class (quote chroma::spl) nil) (make-instance (quote chroma::spl) :fql (list 65.70369 131.40738 525.6295) :the-list (list (quote chroma::do2) (quote chroma::do3) (quote chroma::do5)) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-VPS-FREQS" (quote get-vps-freqs) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 39 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-VPS-FREQ-RATIOS" (quote get-vps-freq-ratios) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "REF" (quote do4)))) (om-make-point 126 329) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-VPS-INTERVALS" (quote get-vps-intervals) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "REF" (quote do4)))) (om-make-point 58 404) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-HOMOGENEITY" (quote chroma::get-homogeneity) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 566 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-HARMONICITY" (quote chroma::get-harmonicity) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 669 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-SURFACE" (quote chroma::get-surface) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 769 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-DENSITY" (quote chroma::get-density) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 859 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-SD" (quote chroma::get-sd) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 742 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-CS" (quote chroma::get-cs) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 825 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-VIRT-FUND" (quote chroma::get-virt-fund) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 640 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FQL" (quote chroma::fql) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil))) (om-make-point 395 199) (om-make-point 99 67) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (267.87247 420.82285 607.28754 765.13434 1092.7411))) (setf (chroma::fql rep) (quote (267.87247 420.82285 607.28754 765.13434 1092.7411))) (setf (chroma::amplitudes rep) (quote (1.0 0.5011872 0.22387213 0.14125374 0.1))) (setf (chroma::bwl rep) (quote (23 34 56 67 78))) rep)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list211" (quote list) (quote nil) (om-make-point 503 170) (om-make-point 122 27) (list 23 34 56 67 78) "(23 34 56 67 78)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list21" (quote list) (quote nil) (om-make-point 432 143) (om-make-point 122 27) (list 0 -6 -13 -17 -20) "(0 -6 -13 -17 -20)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 235 144) (om-make-point 180 39) (list 267.87247 420.82285 607.28754 765.13434 1092.7411) "(267.87247 420.82285 607.28754 765.13434 1092.7411)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 163 57) (quote "VPS analysis") "" (om-make-point 325 41) nil (om-make-color 0.6 0.4 0.2) (om-make-font "Arial" 24 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 48 148) (om-make-point 165 36) (list (quote do4) (quote lab4) (quote re5) (quote sol5) (quote reb6)) "(DO4 LAb4 RE5 SOL5 REb6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 1 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0) (19 0 4 0 nil 0) (19 0 5 0 nil 0) (19 0 6 0 nil 0) (8 1 7 0 nil 0) (24 0 8 1 nil 0) (8 0 9 0 nil 0) (8 0 10 0 nil 0) (8 0 11 0 nil 0) (19 0 12 0 nil 0) (19 0 13 0 nil 0) (19 0 14 0 nil 0) (19 0 15 0 nil 0) (19 0 16 0 nil 0) (19 0 17 0 nil 0) (19 0 18 0 nil 0) (22 0 19 1 nil 0) (21 0 19 2 nil 0) (20 0 19 3 nil 0))) nil 7.06))
