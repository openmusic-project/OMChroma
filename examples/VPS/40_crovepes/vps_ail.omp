; OM File Header - Saved 2025/02/06 18:38:07
; (7.06 :patc (om-make-point 263 87) (om-make-point 0 0) (om-make-point 666 723) "no documentation" 183 0 nil "2025/02/06 18:38:07")
; End File Header
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "vps_ail" (quote ((let ((box (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :aenv) nil nil))) (om-make-point 78 347) (om-make-point 165 63) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 5))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 221.53022 492.45895 554.3653 830.6094 1016.7104))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 0 0 0 0) (list 1 1 1 1 1) (list -6.0 -6.0 -6.0 -6.0 -6.0) (list 221.53022 492.45895 554.3653 830.6094 1016.7104) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 0 0) (om-make-point 959 736) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "AIL" (quote chroma::ail) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "List of Frequencies" "fql" nil) (om-load-inputfun (quote input-funbox) "" "the-list" (list (list 1 -1 12) (list (quote chroma::2+) 0 -5) (quote chroma::3+) (quote chroma::7+) (list (quote chroma::3-) 1 -50))) (om-load-inputfun (quote input-funbox) "" "reference" "LA4"))) (om-make-point 110 121) (om-make-point 227 81) (if (find-class (quote chroma::ail) nil) (make-instance (quote chroma::ail) :fql (list 222.53717 494.69742 556.88514 834.3849 1021.3318) :the-list (list (list 1 -1 12) (list (quote chroma::2+) 0 -5) (quote chroma::3+) (quote chroma::7+) (list (quote chroma::3-) 1 -50)) :reference (quote la4) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 500 300))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-VPS-FREQS" (quote get-vps-freqs) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 145 218) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 277 73) (om-make-point 42 25) (quote la4) "LA4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 387 50) (quote "AIL: Anchored Interval List") "" (om-make-point 109 2) nil (om-make-color 0.6 0.4 0.2) (om-make-font "Arial" 24 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 69 264) (om-make-point 36 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 49 501) (om-make-point 199 74) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil nil 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil))) (om-make-point 71 429) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "freq" "FREQ" 440))) (om-make-point 282 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 284 317) (om-make-point 78 104) (let ((thechord (make-instance (quote chord) :lmidic (quote (5760 7080 7320 8040 8400)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (measure onset palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil nil 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 564 453) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 16)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 83 68) (om-make-point 165 36) (list (quote -6+) (quote -2-) 4 (quote 7-) (list (quote 3+) 1 13)) "(-6+ -2- 4 7- (3+ 1 13))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 7 nil 0) (10 0 1 1 nil 0) (3 0 1 3 nil 0) (1 0 2 0 nil 0) (2 0 5 0 nil 0) (7 0 6 0 nil 0) (0 0 7 0 nil 0) (2 0 8 0 nil 0) (8 0 9 1 nil 0))) nil 7.06))
