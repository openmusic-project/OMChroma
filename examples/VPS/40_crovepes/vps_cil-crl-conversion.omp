; OM File Header - Saved 2025/02/06 18:28:41
; (7.06 :patc (om-make-point 243 156) (om-make-point 0 0) (om-make-point 1153 932) "no documentation" 183 0 nil "2025/02/06 18:28:41")
; End File Header
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "vps_cil-crl-conversion" (quote ((let ((box (om-load-boxcall (quote lispfun) "FQ->PCH" (quote fq->pch) (quote ((om-load-inputfun (quote input-funbox) "F" "F" nil))) (om-make-point 934 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FQ->PCH" (quote fq->pch) (quote ((om-load-inputfun (quote input-funbox) "F" "F" nil))) (om-make-point 577 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 192 51) (quote "to AIL: $need intervals + reference") "" (om-make-point 872 500) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-VPS-INTERVALS" (quote get-vps-intervals) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "REF" nil))) (om-make-point 786 619) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 885 579) (om-make-point 38 31) (quote do2) "do2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 685 593) (om-make-point 38 31) (quote do2) "do2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-VPS-INTERVALS" (quote get-vps-intervals) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "REF" nil))) (om-make-point 575 627) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-VPS-FREQ-RATIOS" (quote get-vps-freq-ratios) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "REF" nil))) (om-make-point 41 644) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 406 636) (om-make-point 45 30) 300 "300" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CIL" (quote chroma::cil) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::6-) (quote chroma::7+) (quote chroma::6-) (quote chroma::6-))))) (om-make-point 561 511) (om-make-point 121 82) (if (find-class (quote chroma::cil) nil) (make-instance (quote chroma::cil) :fql nil :the-list (list (quote chroma::6-) (quote chroma::7+) (quote chroma::6-) (quote chroma::6-)) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRL" (quote chroma::crl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil))) (om-make-point 755 491) (om-make-point 107 107) (when (find-class (quote chroma::crl) nil) (let ((rep (make-instance (quote chroma::crl)))) (setf (chroma::the-list rep) (quote (1.5874012 1.4142135 1.3348398 1.4142137))) (setf (chroma::fql rep) (quote (100 158.74011 224.49242 299.6614 423.78525))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "AIL" (quote chroma::ail) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (list 1 -1 12) (list (quote chroma::2+) 0 -5) (quote chroma::3+) (quote chroma::7+) (list (quote chroma::3-) 1 -50))) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" "LA4"))) (om-make-point 591 700) (om-make-point 159 106) (if (find-class (quote chroma::ail) nil) (make-instance (quote chroma::ail) :fql (list 65.70369 104.2981 196.88861 312.54117 496.1282) :the-list (list (list 1 0) (list (quote chroma::6-) 0) (list 5 1) (list (quote chroma::3-) 2) (list (quote chroma::7+) 2)) :reference (quote do2) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 192 51) (quote "to ARL: $need freq ratios + reference") "" (om-make-point 13 483) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ARL" (quote chroma::arl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" 100.0))) (om-make-point 259 727) (om-make-point 204 121) (when (find-class (quote chroma::arl) nil) (let ((rep (make-instance (quote chroma::arl)))) (setf (chroma::the-list rep) (quote (1 1.5874012 2.244924 2.9966142 4.2378526))) (setf (chroma::fql rep) (quote (300 476.22034 673.47724 898.98426 1271.3557))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRL" (quote chroma::crl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil))) (om-make-point 212 501) (om-make-point 107 107) (when (find-class (quote chroma::crl) nil) (let ((rep (make-instance (quote chroma::crl)))) (setf (chroma::the-list rep) (quote (1.5874012 1.4142135 1.3348398 1.4142137))) (setf (chroma::fql rep) (quote (100 158.74011 224.49242 299.6614 423.78525))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 149 611) (om-make-point 45 30) 200 "200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CIL" (quote chroma::cil) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::6-) (quote chroma::7+) (quote chroma::6-) (quote chroma::6-))))) (om-make-point 25 533) (om-make-point 121 82) (if (find-class (quote chroma::cil) nil) (make-instance (quote chroma::cil) :fql nil :the-list (list (quote chroma::6-) (quote chroma::7+) (quote chroma::6-) (quote chroma::6-)) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FQL" (quote chroma::fql) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil))) (om-make-point 678 355) (om-make-point 158 104) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (131.40738 208.59622 294.9996 393.77722 556.88514))) (setf (chroma::fql rep) (quote (131.40738 208.59622 294.9996 393.77722 556.88514))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SPL" (quote chroma::spl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::do2) (quote chroma::do3) (quote chroma::do5))))) (om-make-point 841 355) (om-make-point 159 88) (if (find-class (quote chroma::spl) nil) (make-instance (quote chroma::spl) :fql (list 131.4075 208.5964 294.99966 393.77722 556.88514) :the-list (list (append nil (cons "DO3" 0.0015258789)) (append nil (cons "SOLd3" 0.0011444092)) (append nil (cons "RE4" 3.8146973E-4)) (append nil (cons "SOL4" 0.0)) (append nil (cons "DOd5" 0.0))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 400 20) (om-make-point 370 280))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 228 70) (quote "to FQL/SPL:$need reference to compute pitches/freqs") "" (om-make-point 761 150) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CIL" (quote chroma::cil) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::6-) (quote chroma::7+) (quote chroma::6-) (quote chroma::6-))))) (om-make-point 421 87) (om-make-point 121 82) (if (find-class (quote chroma::cil) nil) (make-instance (quote chroma::cil) :fql nil :the-list (list (quote chroma::6-) (quote chroma::7+) (quote chroma::6-) (quote chroma::6-)) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRL" (quote chroma::crl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil))) (om-make-point 617 73) (om-make-point 107 107) (when (find-class (quote chroma::crl) nil) (let ((rep (make-instance (quote chroma::crl)))) (setf (chroma::the-list rep) (quote (1.5874012 1.4142135 1.3348398 1.4142137))) (setf (chroma::fql rep) (quote (100 158.74011 224.49242 299.6614 423.78525))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 173 33) (quote "to CIL/CRL : OK") "" (om-make-point 54 331) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 536 192) (om-make-point 45 30) 200 "200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ARL" (quote chroma::arl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" 100.0))) (om-make-point 46 729) (om-make-point 204 121) (when (find-class (quote chroma::arl) nil) (let ((rep (make-instance (quote chroma::arl)))) (setf (chroma::the-list rep) (quote (1.0000006 1.587402 2.996616 4.756831 7.550999))) (setf (chroma::fql rep) (quote (200.00012 317.4804 599.3232 951.3662 1510.1998))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FQL" (quote chroma::fql) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil))) (om-make-point 336 350) (om-make-point 158 104) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (200.00012 317.4804 599.3232 951.3663 1510.1998))) (setf (chroma::fql rep) (quote (200.00012 317.4804 599.3232 951.3663 1510.1998))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRL" (quote chroma::crl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil))) (om-make-point 14 215) (om-make-point 116 106) (when (find-class (quote chroma::crl) nil) (let ((rep (make-instance (quote chroma::crl)))) (setf (chroma::the-list rep) (quote (1.5874009 1.8877486 1.5874012 1.5874012))) (setf (chroma::fql rep) (quote (100 158.7401 299.6614 475.68286 755.09955))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SPL" (quote chroma::spl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::do2) (quote chroma::do3) (quote chroma::do5))))) (om-make-point 515 353) (om-make-point 159 88) (if (find-class (quote chroma::spl) nil) (make-instance (quote chroma::spl) :fql (list 200.00029 317.48047 599.3232 951.3658 1510.1984) :the-list (list (append nil (cons "SOL3" 27.14653)) (append nil (cons "MIb4" 27.145768)) (append nil (cons "RE5" 27.145386)) (append nil (cons "SIb5" 27.144623)) (append nil (cons "FAd6" 27.14386))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 400 20) (om-make-point 370 280))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "AIL" (quote chroma::ail) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (list 1 -1 12) (list (quote chroma::2+) 0 -5) (quote chroma::3+) (quote chroma::7+) (list (quote chroma::3-) 1 -50))) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" "LA4"))) (om-make-point 774 698) (om-make-point 159 106) (if (find-class (quote chroma::ail) nil) (make-instance (quote chroma::ail) :fql (list 65.70369 104.2981 147.4998 196.88861 278.44254) :the-list (list (list 1 0 0) (list (quote chroma::6-) 0 0) (list (quote chroma::2+) 1 0) (list 5 1 0) (list (quote chroma::2-) 2)) :reference (quote do2) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CIL" (quote chroma::cil) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::6-) (quote chroma::7+) (quote chroma::6-) (quote chroma::6-))))) (om-make-point 199 223) (om-make-point 142 94) (if (find-class (quote chroma::cil) nil) (make-instance (quote chroma::cil) :fql nil :the-list (list (list (quote chroma::6-) 0) (list (quote chroma::4+) 0) (list 4 0) (list (quote chroma::4+) 0)) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 702 186) (om-make-point 33 30) (quote do3) "do3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-VPS-FREQS" (quote get-vps-freqs) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" nil))) (om-make-point 644 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-VPS-FREQS" (quote get-vps-freqs) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" nil))) (om-make-point 486 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CIL" (quote chroma::cil) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::6-) (quote chroma::7+) (quote chroma::6-) (quote chroma::6-))))) (om-make-point 11 104) (om-make-point 121 82) (if (find-class (quote chroma::cil) nil) (make-instance (quote chroma::cil) :fql nil :the-list (list (quote chroma::6-) (quote chroma::7+) (quote chroma::6-) (quote chroma::6-)) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRL" (quote chroma::crl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil))) (om-make-point 213 95) (om-make-point 107 107) (when (find-class (quote chroma::crl) nil) (let ((rep (make-instance (quote chroma::crl)))) (setf (chroma::the-list rep) (quote (1.5874012 1.4142135 1.3348398 1.4142137))) (setf (chroma::fql rep) (quote (100 158.74011 224.49242 299.6614 423.78525))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 289 54) (quote "CIL/CRL conversions") "" (om-make-point 312 16) nil (om-make-color 0.6 0.4 0.2) (om-make-font "Arial" 24 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((31 0 0 0 nil 0) (32 0 1 0 nil 0) (10 0 3 0 nil 0) (4 0 3 1 nil 0) (9 0 6 0 nil 0) (5 0 6 1 nil 0) (16 0 7 0 nil 0) (15 0 7 1 nil 0) (6 0 11 1 nil 0) (5 0 11 2 nil 0) (8 0 13 4 nil 0) (31 0 17 1 nil 0) (0 0 18 1 nil 0) (7 0 24 1 nil 0) (15 0 24 4 nil 0) (32 0 25 1 nil 0) (33 0 26 0 nil 0) (1 0 27 1 nil 0) (3 0 28 1 nil 0) (4 0 28 2 nil 0) (34 0 29 0 nil 0) (21 0 31 0 nil 0) (30 0 31 1 nil 0) (20 0 32 0 nil 0) (23 0 32 1 nil 0))) nil 7.06))
