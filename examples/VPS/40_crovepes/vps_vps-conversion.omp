; OM File Header - Saved 2025/02/06 18:28:41
; (7.06 :patc (om-make-point 132 150) (om-make-point 0 0) (om-make-point 981 708) "no documentation" 183 0 nil "2025/02/06 18:28:41")
; End File Header
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "vps_vps-conversion" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 494 379) (om-make-point 41 28) 100.0 "100.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CIL" (quote chroma::cil) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::6-) (quote chroma::7+) (quote chroma::6-) (quote chroma::6-))))) (om-make-point 583 573) (om-make-point 121 82) (if (find-class (quote chroma::cil) nil) (make-instance (quote chroma::cil) :fql nil :the-list (list (list (quote chroma::6-) 0 -18) (list (quote chroma::4+) 0 35) (list (quote chroma::3+) 0) (list (quote chroma::4+) 0 17)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 400 20) (om-make-point 370 280))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "AIL" (quote chroma::ail) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (list 1 -1 12) (list (quote chroma::2+) 0 -5) (quote chroma::3+) (quote chroma::7+) (list (quote chroma::3-) 1 -50))) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" "LA4"))) (om-make-point 352 565) (om-make-point 199 95) (if (find-class (quote chroma::ail) nil) (make-instance (quote chroma::ail) :fql (list 535.745 841.64576 1214.5752 1530.2688 2185.4824) :the-list (list (list 1 0) (list (quote chroma::6-) 0 -18) (list (quote chroma::2+) 1 17) (list (quote chroma::4+) 1 17) (list 1 2 34)) :reference (append nil (cons "DO5" 33.0)) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 400 20) (om-make-point 370 280))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SPL" (quote chroma::spl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::do2) (quote chroma::do3) (quote chroma::do5))))) (om-make-point 94 572) (om-make-point 215 81) (if (find-class (quote chroma::spl) nil) (make-instance (quote chroma::spl) :fql (list 535.745 841.6458 1214.5751 1530.2686 2185.482) :the-list (list (append nil (cons "DO5" 33.0)) (append nil (cons "SOLd5" 15.0)) (append nil (cons "RE6" 50.0)) (append nil (cons "FAd6" 50.0)) (append nil (cons "DOd7" -33.0))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRL" (quote chroma::crl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil))) (om-make-point 574 411) (om-make-point 148 124) (when (find-class (quote chroma::crl) nil) (let ((rep (make-instance (quote chroma::crl)))) (setf (chroma::the-list rep) (quote (1.5874009 1.8877486 1.5874012 1.5874012))) (setf (chroma::fql rep) (quote (100 158.7401 299.6614 475.68286 755.09955))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 400 20) (om-make-point 370 280))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ARL" (quote chroma::arl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" 100.0))) (om-make-point 358 409) (om-make-point 170 124) (when (find-class (quote chroma::arl) nil) (let ((rep (make-instance (quote chroma::arl)))) (setf (chroma::the-list rep) (quote (1.0 1.5709821 2.2670772 2.856338 4.0793333))) (setf (chroma::fql rep) (quote (267.87247 420.82285 607.28754 765.13434 1092.7411))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 400 20) (om-make-point 370 280))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 219 47) (quote "VPS conversions") "" (om-make-point 329 12) nil (om-make-color 0.6 0.4 0.2) (om-make-font "Arial" 24 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "AIL" (quote chroma::ail) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (list 1 -1 12) (list (quote chroma::2+) 0 -5) (quote chroma::3+) (quote chroma::7+) (list (quote chroma::3-) 1 -50))) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" "LA4"))) (om-make-point 505 202) (om-make-point 199 95) (if (find-class (quote chroma::ail) nil) (make-instance (quote chroma::ail) :fql (list 262.81476 417.19244 589.9992 787.55445 1122.165) :the-list (list (quote -6+) (quote -2-) 4 (quote 7-) (list (quote 3+) 1 13)) :reference (quote la4) :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 400 20) (om-make-point 370 280))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SPL" (quote chroma::spl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" (list (quote chroma::do2) (quote chroma::do3) (quote chroma::do5))))) (om-make-point 393 75) (om-make-point 216 84) (if (find-class (quote chroma::spl) nil) (make-instance (quote chroma::spl) :fql (list 267.87247 420.82285 607.28754 765.13434 1092.7411) :the-list (list (append nil (cons (quote do4) 33)) (append nil (cons (quote lab4) 15)) (append nil (cons (quote re5) 50)) (append nil (cons (quote sol5) -50)) (append nil (cons (quote reb6) -33))) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ARL" (quote chroma::arl) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" 100.0))) (om-make-point 159 202) (om-make-point 170 124) (when (find-class (quote chroma::arl) nil) (let ((rep (make-instance (quote chroma::arl)))) (setf (chroma::the-list rep) (quote (1 3 5 7 9 11 13 15))) (setf (chroma::fql rep) (quote (200.0 600.0 1000.0 1400.0 1800.0 2200.0 2600.0 3000.0))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 0 0) (om-make-point 370 280))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FQL" (quote chroma::fql) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil))) (om-make-point 78 410) (om-make-point 253 123) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (262.81476 417.19244 589.9992 787.55445 1122.165))) (setf (chroma::fql rep) (quote (262.81476 417.19244 589.9992 787.55445 1122.165))) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 400 20) (om-make-point 370 280))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FQL" (quote chroma::fql) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil))) (om-make-point 74 73) (om-make-point 206 114) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (535.74494 841.6457 1214.5751 1530.2687 2185.4822))) (setf (chroma::fql rep) (quote (535.74494 841.6457 1214.5751 1530.2687 2185.4822))) (setf (chroma::amplitudes rep) (quote (1.0 0.5011872 0.39810717 0.3548134 0.22387213))) (setf (chroma::bwl rep) (quote (12 23 24 31 35))) rep)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 370 280) (om-make-point 400 20))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 1 0 nil 0) (11 0 2 0 nil 0) (11 0 3 0 nil 0) (9 0 4 0 nil 0) (8 0 5 0 nil 0) (0 0 5 4 nil 0) (7 0 10 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs (list (list (quote line) (list 1/37 1/2 353/370 29/60) (list (om-make-color 0.5927602 0.3735965 0.3243771) 8 (quote line) nil) nil))))) (setf (pict-pos newpict) (om-make-point 12 348)) (setf (pict-size newpict) (om-make-point 843 28)) newpict)) 7.06))
