; OM File Header - Saved 2025/02/06 17:54:05
; (7.06 :patc (om-make-point 93 217) (om-make-point 0 0) (om-make-point 676 568) "" 183 0 nil "2025/02/06 17:54:05")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "02_microtonal-notes" (quote ((let ((box (om-load-boxcall (quote lispfun) "PCH->FQ 4" (quote pch->fq) (quote ((om-load-inputfun (quote input-funbox) "NOTE" "NOTE" nil))) (om-make-point 334 352) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 331 307) (om-make-point 86 30) (append nil (cons (quote reb4) -50)) "(reb4 . -50)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PCH->FQ 3" (quote pch->fq) (quote ((om-load-inputfun (quote input-funbox) "NOTE" "NOTE" nil))) (om-make-point 207 358) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 161 317) (om-make-point 149 30) (list (append nil (cons (quote do4) -50)) (append nil (cons (quote do4) (quote -q)))) "((do4 . -50) (do4 . -q))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 159 45) (quote "Same meaning$(only for quarter tones)") "" (om-make-point 10 274) nil (om-make-color 1.1086464E-4 0.0017602444 0.9982184) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 11 317) (om-make-point 139 30) (list (append nil (cons (quote do4) 50)) (append nil (cons (quote do4) (quote q)))) "((do4 . 50) (do4 . q))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 487 217) (om-make-point 52 30) 442.0 "442.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 414 193) (om-make-point 90 30) (quote chroma::diapason) "cr::diapason" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-GBL" (quote chroma::set-gbl) (quote ((om-load-inputfun (quote input-funbox) "VAR" "VAR" nil) (om-load-inputfun (quote input-funbox) "VAL" "VAL" nil))) (om-make-point 451 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 448 113) (om-make-point 90 30) (quote chroma::diapason) "cr::diapason" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-GBL" (quote chroma::get-gbl) (quote ((om-load-inputfun (quote input-funbox) "VAR" "VAR" nil))) (om-make-point 428 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PCH->FQ 2" (quote pch->fq) (quote ((om-load-inputfun (quote input-funbox) "NOTE" "NOTE" nil))) (om-make-point 162 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 6 194) (om-make-point 361 30) (list (append nil (cons (quote do4) 50)) (quote do4) (append nil (cons (quote do4) -50)) (append nil (cons (quote si3) 50)) (append nil (cons (quote do4) 33)) (append nil (cons (quote reb4) -67))) "((do4 . 50) do4 (do4 . -50) (si3 . 50) (do4 . 33) (reb4 . -67))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PCH->FQ" (quote pch->fq) (quote ((om-load-inputfun (quote input-funbox) "NOTE" "NOTE" nil))) (om-make-point 51 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 232 45) (quote "EX: (do4 . 50) (do4 . -50) (do4 . q)$A4 = middle a") "" (om-make-point 9 100) nil (om-make-color 1.1086464E-4 0.0017602444 0.9982184) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 229 45) (quote "Microtonal notes are CONSES with:$(NOTEOCT . DEVIATION[cents])") "" (om-make-point 162 36) nil (om-make-color 1.1086464E-4 0.0017602444 0.9982184) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 205 42) (quote "MICROTONAL NOTES") "" (om-make-point 169 0) nil (om-make-color 1.1086464E-4 0.0017602444 0.9982184) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 2 0 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0) (9 0 10 0 nil 0) (12 0 11 0 nil 0) (5 0 13 0 nil 0))) nil 7.06))
