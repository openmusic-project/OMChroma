; OM File Header - Saved 2025/02/06 17:59:42
; (7.06 :patc (om-make-point 116 187) (om-make-point 0 0) (om-make-point 855 701) "" 183 0 nil "2025/02/06 17:59:42")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "05_microtonal-intervals" (quote ((let ((box (om-load-boxcall (quote lispfun) "PCH->FQ" (quote pch->fq) (quote ((om-load-inputfun (quote input-funbox) "NOTE" "NOTE" nil))) (om-make-point 634 573) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1.0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 185 506) (om-make-point 69 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1.0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 15 499) (om-make-point 69 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 270 165) (quote "CAUTION:$1)$To avoid misunderstandings,$microtonal intervals$should be placed inside a list$$2)$Microtonal intervals within the octave$should be expressed in this way with 0$Ex: major second + 50 cents = (2+ 0 50)") "" (om-make-point 9 174) nil (om-make-color 1.1086464E-4 0.0017602444 0.9982184) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 337 102) (quote "Microtonal intervals are expressed as a list of 3 elements:$(ITVL OCT DEVIATION)$Ex: (2- 1 -50) = minor ninth - 50 cents$(or minor second + 1 octave - 50 cents)$Octaves and deviations can be + or -") "" (om-make-point 11 68) nil (om-make-color 1.1086464E-4 0.0017602444 0.9982184) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 127 102) (quote "NB: in this case,$the reference of the$n+1 interval$will be the result$of the nth interval") "" (om-make-point 507 342) nil (om-make-color 1.1086464E-4 0.0017602444 0.9982184) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 120 412) (om-make-point 327 30) (list (list (quote 2-) 2 33) (list -4 -2 -50) (list (quote 5-) 2 15) (list (quote 4+) 3 50) (list (quote -7-) 0 -50)) "((2- 2 33) (-4 -2 -50 ) (5- 2 15) (4+ 3 50) (-7- 0 -50))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ITVL->SEMITONES 2" (quote itvl->semitones) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 182 454) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 26 411) (om-make-point 86 30) (list (list (quote 2-) -1 50)) "((2- -1 50))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ITVL->SEMITONES" (quote itvl->semitones) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 14 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EVAL" (quote eval) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 643 292) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 577 256) (om-make-point 168 30) (quote chroma::*intervalles-alist*) "cr::*INTERVALLES-ALIST*" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 667 487) (om-make-point 34 30) (quote a4) "a4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 513 448) (om-make-point 267 30) (list (list (quote 2-) 1 50) (list (quote 2+) -1 -50) (list (quote 3-) 0 33) (list (quote 3+) 1 -50)) "((2- 1 50) (2+ -1 -50) (3- 0 33) (3+ 1 -50))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ITVL->PCH 2" (quote itvl->pch) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil) (om-load-inputfun (quote input-funbox) "NOTE" "NOTE" nil))) (om-make-point 631 514) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 143 85) (quote "Compute an interval of$minor ninth - 33 cents$starting from a4$(two pitches a result)") "" (om-make-point 290 241) nil (om-make-color 1.1086464E-4 0.0017602444 0.9982184) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 391 328) (om-make-point 34 30) (quote a4) "a4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 297 330) (om-make-point 86 30) (list (list (quote 2-) 1 -33)) "((2- 1 -33))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ITVL->PCH" (quote itvl->pch) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil) (om-load-inputfun (quote input-funbox) "NOTE" "NOTE" nil))) (om-make-point 323 363) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 537 217) (om-make-point 52 30) 442.0 "442.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 464 193) (om-make-point 90 30) (quote chroma::diapason) "cr::diapason" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-GBL" (quote chroma::set-gbl) (quote ((om-load-inputfun (quote input-funbox) "VAR" "VAR" nil) (om-load-inputfun (quote input-funbox) "VAL" "VAL" nil))) (om-make-point 501 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 498 113) (om-make-point 90 30) (quote chroma::diapason) "cr::diapason" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-GBL" (quote chroma::get-gbl) (quote ((om-load-inputfun (quote input-funbox) "VAR" "VAR" nil))) (om-make-point 478 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 245 63) (quote "MICROTONAL INTERVALS$") "" (om-make-point 212 1) nil (om-make-color 1.1086464E-4 0.0017602444 0.9982184) (om-make-font "Arial" 18.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 0 0 nil 0) (7 0 1 1 nil 0) (9 0 2 1 nil 0) (6 0 7 0 nil 0) (8 0 9 0 nil 0) (11 0 10 0 nil 0) (13 0 14 0 nil 0) (12 0 14 1 nil 0) (17 0 18 0 nil 0) (16 0 18 1 nil 0) (20 0 21 0 nil 0) (19 0 21 1 nil 0) (22 0 23 0 nil 0))) nil 7.06))
