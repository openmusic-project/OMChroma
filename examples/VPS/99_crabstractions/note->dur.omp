; OM File Header - Saved 2025/02/06 19:00:18
; (7.06 :patc (om-make-point 109 100) (om-make-point 0 0) (om-make-point 500 377) "No documentation " 183 0 nil "2025/02/06 19:00:18")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "note->dur" (quote ((let ((box (om-load-boxcall (quote genfun) "OM/2" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 60.0))) (om-make-point 184 150) (om-make-point 64 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/11" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1.0) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1))) (om-make-point 170 196) (om-make-point 67 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 124 242) (om-make-point 56 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST!" (quote list!) (quote ((om-load-inputfun (quote input-funbox) "THING" "THING" nil))) (om-make-point 60 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 177 82) "metronome" "metronome" 60.0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 54 78) "Singe duration or list of symbolic durations (OM-style)" "dur-list" (list 1/4) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 130 291) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 205 44) (quote "Converts a written duration into seconds") "" (om-make-point 62 18) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Hoefler Text" 18 :family "Hoefler Text" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (0 0 1 1 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 3 0 nil 0) (2 0 6 0 nil 0))) nil 7.06))
