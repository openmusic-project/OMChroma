; OM File Header - Saved 2025/02/06 19:00:18
; (7.06 :patc (om-make-point 138 220) (om-make-point 0 0) (om-make-point 758 680) "No documentation " 183 0 nil "2025/02/06 19:00:18")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../../../99_crabstractions/parsing-subcomponent.omp\""))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "cs-events" (quote ((let ((box (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numrows" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :aenv) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :npart) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :ston) nil nil))) (om-make-point 11 436) (om-make-point 424 116) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 500.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 256.0 513.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 520 210) (om-make-point 25 28) 0.8 "0.8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 493 196) (om-make-point 23 27) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment112" (om-make-point 74 31) (quote "Overlapping factor") "" (om-make-point 255 232) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 9 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment111" (om-make-point 87 48) (quote "Allow chords to overlap with each other") "" (om-make-point 241 304) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 244 235) (om-make-point 11 20) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "parsing-subcomponent" (quote ("elements" "99_crabstractions" "parsing-subcomponent")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "matrix" nil) (om-load-inputfun (quote input-funbox) "no documentation" "comp-num" 0))) (om-make-point 87 317) nil nil "l" "parsing-subcomponent" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment12121111111211" (om-make-point 71 22) (quote "parsing-fun") "" (om-make-point 150 385) nil (om-make-color 79/85 8/85 2/17) (om-make-font "Geneva" 9 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1212111111121" (om-make-point 40 19) (quote "ston") "" (om-make-point 405 382) nil (om-make-color 79/85 8/85 2/17) (om-make-font "Geneva" 9 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment121211111112" (om-make-point 40 19) (quote "npart") "" (om-make-point 371 314) nil (om-make-color 79/85 8/85 2/17) (om-make-font "Geneva" 9 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11" (om-make-point 107 32) (quote "Read the slots of the chord-seq") "" (om-make-point 417 78) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF1" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 3))) (om-make-point 438 307) (om-make-point 91 63) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0 8.0 12.0 16.0 21.0 24.0 27.0 33.0 38.0 39.0 40.0 43.0 44.0 47.0 51.0 53.0 56.0 59.0 62.0 65.0 68.0 70.0 71.0 72.0 76.0 80.0 81.0)) (quote (0.01 0.078 0.033 0.055 0.033 0.055 0.033 0.01 0.055 0.1 0.145 0.191 0.258 0.281 0.303 0.349 0.394 0.439 0.484 0.507 0.552 0.597 0.642 0.687 0.732 0.777 0.8)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF1") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom deltapict outport inport show-stems)) (list nil 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE1" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0.01) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0.8))) (om-make-point 483 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 407 174) (om-make-point 69 64) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 8 12 16 21 24 27 33 38 39 40 43 44 47 51 53 56 59 62 65 68 70 71 72 76 80 81)) (quote (2 5 3 4 3 4 3 2 4 6 8 10 13 14 15 17 19 21 23 24 26 28 30 32 34 36 37)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom deltapict outport inport show-stems)) (list nil 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "lonset" nil) (om-load-inputfun (quote input-funbox) "no documentation" "loffset" nil))) (om-make-point 144 132) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 83 238) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 88 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist1" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 158 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 17 115) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 167 49) "no documentation" "loffset" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 42 42) "no documentation" "lonset" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 125 298) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 26 297) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (5 0 3 0 nil 0) (0 1 6 0 nil 0) (0 0 7 0 nil 0))) 1 "make-ed" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote slot) "slot" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 33 72) (om-make-point 383 53) nil nil nil 8))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 209 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 13 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 5))) (om-make-point 220 265) (om-make-point 42 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1000))) (om-make-point 212 215) (om-make-point 28 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 182) (om-make-point 40 26) 1000.0 "1000.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 1) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 127.0))) (om-make-point 333 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 142 198) (om-make-point 41 20) 1000.0 "1000.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1000))) (om-make-point 152 268) (om-make-point 28 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "midic" "MIDICS?" 6000))) (om-make-point 55 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 330 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 99 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 36 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 172 0) "no documentation" "chord-seq" (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4086 5286 6678 7226 7638 7878 7972 8838) (4082 5280 5796 6684 7224 7636 7884 8564) (4076 5278 6684 7006 7220 7632 7886 7960) (4080 5290 6690 7218 7634 7890 7960 8592) (4086 5286 6688 7218 7632 7888 7960 8590) (4084 5288 6686 7642 7886 7960 8588 9086) (4086 5284 6684 6874 7646 7884 7972 8586) (4078 5276 5990 6680 7008 7220 7882 7964) (4074 5990 6680 6874 7010 7964 8210 8596) (6678 6888 7006 7220 7878 7966 8206 8592) (6678 7006 7212 7880 7962 8582 8592 9116) (6682 7210 7882 7964 8410 8584 9082 9112) (6676 7210 7654 7878 7964 8412 8578 9112) (5294 7006 7216 7656 7976 8206 8592 9176) (6676 7006 7654 7876 7966 8206 8578 8592) (5802 6682 7002 7882 7968 8008 8584 9084) (6684 7006 7884 8024 8586 9084 9472 9786) (6682 7008 7336 7882 8030 8208 8584 9082) (6684 6810 7004 7330 7512 7884 8022 9222) (6682 7002 7324 7516 7578 8022 8524 9224) (6678 7006 7322 7522 7878 8022 8580 9222) (6680 7324 7522 7596 7882 8020 8584 9082) (6680 7004 7324 7514 7882 8012 8584 8714) (5612 6682 6812 7002 7324 7514 8012 8714) (6504 6674 7004 7208 7474 7518 7648 8850) (5294 6672 7006 7204 7652 7872 8574 9074) (5290 6672 7006 7234 7514 7658 7872 8572) (4094 5296 6674 7004 7228 7658 7956 8592) (4106 5306 7004 7222 7706 7964 8204 8590) (5304 7004 7220 7654 7706 7962 8204 8592) (5300 6504 7006 7216 7966 8094 8416 9118) (6892 7010 7214 7476 7656 7972 8416 9118) (4074 5272 7008 7218 7660 7974 8594 8860) (4096 5298 7002 7220 7664 7968 8588 8864) (4094 7006 7220 7662 7720 7962 8206 8592) (4094 5294 7012 7216 7722 7962 8210 8854) (4096 5296 7216 7652 7720 7968 8416 8852) (4096 5298 7020 7216 7650 7722 7974 8850) (4086 5818 7018 7218 7720 7968 8418 9120) (4092 5818 7018 7214 7720 7962 8414 9116) (4098 7018 7212 7650 7720 7958 8414 8850) (4092 5296 7216 7648 7726 7954 8416 8850) (4096 5296 6882 7024 7218 7652 7726 8850))) :lonset (quote (0 430 990 1640 2020 2300 3780 4380 4750 5260 5860 6510 6800 7120 7950 8740 9250 9810 10640 11200 11670 12220 12730 13280 14300 14810 15270 15820 16700 17400 18520 19170 19770 20280 20970 21920 22280 22750 23500 23920 24200 24730 25290 25770)) :ldur (quote ((430 430 430 430 430 430 430 430) (560 560 560 560 560 560 560 560) (650 650 650 650 650 650 650 650) (380 380 380 380 380 380 380 380) (280 280 280 280 280 280 280 280) (1480 1480 1480 1480 1480 1480 1480 1480) (600 600 600 600 600 600 600 600) (370 370 370 370 370 370 370 370) (510 510 510 510 510 510 510 510) (600 600 600 600 600 600 600 600) (650 650 650 650 650 650 650 650) (290 290 290 290 290 290 290 290) (320 320 320 320 320 320 320 320) (830 830 830 830 830 830 830 830) (790 790 790 790 790 790 790 790) (510 510 510 510 510 510 510 510) (560 560 560 560 560 560 560 560) (830 830 830 830 830 830 830 830) (560 560 560 560 560 560 560 560) (470 470 470 470 470 470 470 470) (550 550 550 550 550 550 550 550) (510 510 510 510 510 510 510 510) (550 550 550 550 550 550 550 550) (1020 1020 1020 1020 1020 1020 1020 1020) (510 510 510 510 510 510 510 510) (460 460 460 460 460 460 460 460) (550 550 550 550 550 550 550 550) (880 880 880 880 880 880 880 880) (700 700 700 700 700 700 700 700) (1120 1120 1120 1120 1120 1120 1120 1120) (650 650 650 650 650 650 650 650) (600 600 600 600 600 600 600 600) (510 510 510 510 510 510 510 510) (690 690 690 690 690 690 690 690) (950 950 950 950 950 950 950 950) (360 360 360 360 360 360 360 360) (470 470 470 470 470 470 470 470) (750 750 750 750 750 750 750 750) (420 420 420 420 420 420 420 420) (280 280 280 280 280 280 280 280) (530 530 530 530 530 530 530 530) (560 560 560 560 560 560 560 560) (480 480 480 480 480 480 480 480))) :lvel (quote ((63 55 53 51 51 40 40 45) (74 63 38 54 59 46 46 41) (71 62 54 43 64 48 55 58) (66 55 58 67 59 68 74 62) (77 64 63 65 67 82 77 73) (69 68 68 74 100 73 82 75) (81 74 69 68 91 87 98 76) (91 60 43 51 46 50 47 71) (67 52 49 58 55 53 49 53) (59 73 65 50 53 54 61 65) (76 60 69 82 66 68 58 57) (75 88 93 81 63 85 68 87) (68 77 75 66 95 61 60 79) (63 66 59 94 119 60 65 56) (68 64 58 64 104 60 63 64) (45 75 55 85 93 52 73 64) (72 58 101 79 84 82 57 52) (62 83 85 66 71 38 57 47) (44 41 91 88 56 40 71 44) (47 78 91 65 47 73 43 48) (63 59 93 83 60 96 56 58) (78 91 102 72 91 82 82 67) (68 80 83 117 80 73 72 64) (47 47 52 86 54 105 67 55) (50 60 73 57 51 59 65 66) (64 73 63 70 69 64 73 51) (65 71 58 63 49 83 54 62) (64 57 51 48 66 66 100 45) (68 69 63 78 54 103 53 59) (62 59 77 54 48 87 51 54) (56 56 52 88 86 54 56 52) (62 48 95 59 64 85 58 56) (73 49 53 74 79 77 48 59) (65 58 63 70 85 68 59 59) (60 66 66 69 54 73 61 62) (62 51 51 75 66 87 48 54) (62 54 79 65 71 93 50 63) (60 54 61 77 64 98 113 58) (53 53 71 81 115 99 48 49) (58 52 71 88 120 88 60 52) (72 64 98 65 106 95 69 60) (79 63 79 78 65 68 53 75) (82 67 52 45 65 56 61 46))) :loffset (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 87 566) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 0 1 nil 0) (6 0 0 3 nil 0) (23 0 0 4 nil 0) (18 0 0 5 nil 0) (21 0 0 6 nil 0) (24 0 0 7 nil 0) (13 0 0 9 nil 0) (11 0 0 10 nil 0) (13 1 11 1 nil 11) (12 0 11 2 nil 11) (13 2 12 0 nil 11) (2 0 12 1 nil 11) (1 0 12 2 nil 11) (15 2 14 0 nil 1) (15 5 14 1 nil 1) (28 0 15 0 nil 0) (15 3 16 0 nil 7) (24 0 17 0 nil 2) (19 0 18 0 nil 7) (5 0 18 1 nil 7) (16 0 19 0 nil 7) (20 0 19 1 nil 7) (25 0 21 0 nil 3) (26 0 23 0 nil 1) (22 0 23 1 nil 1) (27 0 24 0 nil 2) (15 4 25 0 nil 3) (14 0 26 0 nil 1) (15 1 27 0 nil 2) (0 0 29 0 nil 0))) nil 7.06))
