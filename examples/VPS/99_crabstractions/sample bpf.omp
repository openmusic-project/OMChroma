; OM File Header - Saved 2025/02/06 19:00:18
; (7.06 :patc (om-make-point 42 155) (om-make-point 0 0) (om-make-point 477 457) "No documentation " 183 0 nil "2025/02/06 19:00:18")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "sample bpf" (quote ((let ((box (om-load-boxin "input3" 3 (om-make-point 274 131) "no documentation" "nbdec" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input2" 2 (om-make-point 200 85) "no documentation" "nbsamples" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 103 45) "no documentation" "x-points" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 35 135) "no documentation" "bpf" nil (om-make-point 29 55)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 117 285) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-SAMPLE" (quote bpf-sample) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "a number" "XMIN" 0) (om-load-inputfun (quote input-funbox) "a number" "XMAX" 100) (om-load-inputfun (quote input-funbox) "an integer" "NBSAMPLES" 43) (om-load-inputfun (quote input-funbox) "a number" "COEFF" 1) (om-load-inputfun (quote input-funbox) "an integer" "NBDEC" 4))) (om-make-point 14 212) (om-make-point 325 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 90 127) nil nil nil "first" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 133 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST1" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 147 168) nil nil nil "first" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 164 41) (quote "Simplifies the task of sampling a BPF") "" (om-make-point 80 6) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 4 0 nil 0) (3 0 5 0 nil 0) (6 0 5 1 nil 0) (8 0 5 2 nil 0) (1 0 5 3 nil 0) (0 0 5 5 nil 0) (2 0 6 0 nil 0) (2 0 7 0 nil 0) (7 0 8 0 nil 0))) nil 7.06))
