; OM File Header - Saved 2025/02/06 19:00:18
; (7.06 :patc (om-make-point 21 218) (om-make-point 0 0) (om-make-point 689 550) "non documentation" 183 0 nil "2025/02/06 19:00:18")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "parsing-subcomponent" (quote ((let ((box (om-load-boxcomment "comment1" (om-make-point 253 45) (quote "Add sub-components to each component in the matrix") "" (om-make-point 151 0) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment111111" (om-make-point 144 48) (quote "Return a list with the main component and all the sub-components") "" (om-make-point 210 283) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11111" (om-make-point 107 32) (quote "Add a comment in the csound score") "" (om-make-point 12 231) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1111" (om-make-point 107 32) (quote "Compute a list of sub-components") "" (om-make-point 295 196) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment111" (om-make-point 71 32) (quote "Get each component") "" (om-make-point 205 134) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "subcomponents" (quote ((let ((box (om-load-boxcomment "comment1111" (om-make-point 158 37) (quote "Add a comment for each group of sub-components") "" (om-make-point 147 314) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11" (om-make-point 186 63) (quote "Add sub-components to each component in the matrix") "" (om-make-point 280 16) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment111" (om-make-point 58 45) (quote "Read the control slots") "" (om-make-point 41 140) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 345 117) (om-make-point 41 29) "freq" "\"freq\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "COMP-FIELD" (quote comp-field) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LINEID" "STON"))) (om-make-point 309 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "component" nil) (om-load-inputfun (quote input-funbox) "no documentation" "NPRT" nil) (om-load-inputfun (quote input-funbox) "no documentation" "STON" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FREQ" nil))) (om-make-point 153 239) (om-make-point 177 53) nil nil (list (let ((box (om-load-boxcomment "comment111211111" (om-make-point 79 59) (quote "...make a copy of the current component") "" (om-make-point 57 204) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11121111" (om-make-point 101 57) (quote "Change the frequency (p5) of each sub-component") "" (om-make-point 20 313) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1112111" (om-make-point 84 48) (quote "Compute the frequency deviation...") "" (om-make-point 263 249) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment111211" (om-make-point 119 48) (quote "...and add it to the value of the current frequency") "" (om-make-point 207 297) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11121" (om-make-point 109 58) (quote "At the end generate one empty line in the csound score") "" (om-make-point 261 452) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1112" (om-make-point 105 46) (quote "While there are sub-components to compute...") "" (om-make-point 222 46) nil (om-make-color 8/85 2/15 41/51) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment112" (om-make-point 246 38) (quote "Compute the frequency deviation for each sub-component") "" (om-make-point 8 109) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input3" 3 (om-make-point 169 142) "no documentation" "FREQ" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 286 412) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 298 347) (om-make-point 71 24) "~%~%" "\"~%~%\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FORMAT" (quote format) (quote ((om-load-inputfun (quote input-funbox) "DESTINATION" "DESTINATION" nil) (om-load-inputfun (quote input-funbox) "CONTROL-STRING" "CONTROL-STRING" nil))) (om-make-point 293 374) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 198 448) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLOOR" (quote floor) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 91 55) nil nil nil "floor" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALEANUM" (quote aleanum) (quote ((om-load-inputfun (quote input-funbox) "min" "HIGH" 0) (om-load-inputfun (quote input-funbox) "max" "LOW" 0))) (om-make-point 249 194) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 169 298) (om-make-point 41 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 150 390) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 122 264) (om-make-point 44 34) "freq" "\"freq\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "COMP-FIELD1" (quote comp-field) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LINEID" "Input5") (om-load-inputfun (quote input-funbox) "no documentation" "VAL" nil))) (om-make-point 109 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CLONE" (quote clone) (quote ((om-load-inputfun (quote input-funbox) "The object to copy" "SELF" nil))) (om-make-point 27 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 205 250) (om-make-point 55 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low val" "FROM" 1) (om-load-inputfun (quote input-funbox) "high val" "TO" 10))) (om-make-point 176 52) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input2" 2 (om-make-point 305 114) "no documentation" "STON" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 9 38) "no documentation" "NPRT" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 17 141) "no documentation" "component" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 224 529) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 47 526) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((10 0 8 0 nil 0) (9 0 10 1 nil 0) (15 1 11 0 nil 0) (8 0 11 1 nil 0) (22 0 12 0 nil 3) (21 0 13 1 nil 0) (7 0 14 0 nil 0) (19 0 14 1 nil 0) (17 0 15 0 nil 0) (18 0 17 0 nil 0) (16 0 17 1 nil 0) (14 0 17 2 nil 0) (23 0 18 0 nil 0) (7 0 19 0 nil 0) (13 0 19 1 nil 0) (12 0 20 1 nil 3) (11 0 24 0 nil 0) (15 0 25 0 nil 0))) 1 "freq-dev" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 166 361) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CONS" (quote cons) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "LIST-OR-THING" "LIST-OR-THING" nil))) (om-make-point 118 316) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 7 222) (om-make-point 88 40) "~%;~D sub-components" "\"~%;~D sub-components\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FORMAT" (quote format) (quote ((om-load-inputfun (quote input-funbox) "DESTINATION" "DESTINATION" nil) (om-load-inputfun (quote input-funbox) "CONTROL-STRING" "CONTROL-STRING" "~%~D sub-components") (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 61 272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 263 123) (om-make-point 41 25) "ston" "\"ston\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "COMP-FIELD" (quote comp-field) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LINEID" "STON"))) (om-make-point 228 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLOOR" (quote floor) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 99 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 120 113) (om-make-point 45 33) "npart" "\"npart\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "COMP-FIELD" (quote comp-field) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LINEID" "NPART"))) (om-make-point 87 151) nil nil nil "comp-field" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 160 8) "no documentation" "component" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 4 0 ((om-make-point 187 61) (om-make-point 331 102) (om-make-point 331 104) (om-make-point 327 149)) 3) (3 0 4 1 nil 0) (15 0 5 0 nil 3) (14 0 5 1 nil 0) (11 0 5 2 nil 0) (4 0 5 3 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (5 0 7 1 nil 0) (8 0 9 1 nil 0) (12 0 9 2 nil 0) (15 0 11 0 ((om-make-point 187 61) (om-make-point 251 104) (om-make-point 250 105) (om-make-point 246 150)) 3) (10 0 11 1 nil 0) (14 0 12 0 nil 0) (15 0 14 0 ((om-make-point 187 61) (om-make-point 110 105) (om-make-point 109 105) (om-make-point 105 151)) 3) (13 0 14 1 nil 0))) 7.06 nil "" (om-make-point 0 0) (om-make-point 400 477)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "component" nil))) (om-make-point 236 188) nil nil nil "subcomponents"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-COMP" (quote get-comp) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMPID" nil))) (om-make-point 166 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 171 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 12 68) (om-make-point 88 42) "COMPONENT No. ~D ~%" "\"COMPONENT No. ~D ~%\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FORMAT" (quote format) (quote ((om-load-inputfun (quote input-funbox) "DESTINATION" "DESTINATION" nil) (om-load-inputfun (quote input-funbox) "CONTROL-STRING" "CONTROL-STRING" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 48 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 57 205) (om-make-point 139 37) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 97 10) "no documentation" "comp-num" 0 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 166 34) "no documentation" "matrix" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 171 316) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 5 0 nil 12) (12 0 6 0 nil 3) (11 0 6 1 nil 1) (10 0 7 0 nil 0) (5 0 7 1 nil 0) (8 0 9 1 nil 1) (11 0 9 2 nil 1) (9 0 10 0 nil 12) (6 0 10 1 nil 12) (7 0 13 0 nil 0))) nil 7.06))
