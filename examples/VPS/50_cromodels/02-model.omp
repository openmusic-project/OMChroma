; OM File Header - Saved 2025/02/06 18:53:32
; (7.06 :patc (om-make-point 93 74) (om-make-point 0 0) (om-make-point 703 675) "non documentation" 183 0 nil "2025/02/06 18:53:31")
; End File Header
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "02-model" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 163 50) (quote "New model created with the same time structure and reversed pitch data") "" (om-make-point 25 542) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CR-MODEL" (quote cr-model) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "class name of the vertical structure" "modeltype" (quote fql) (list (list "Frequencies List" (quote (quote fql))) (list "Partials" (quote (quote ptl))) (list "OM Chord" (quote (quote chord))))) (om-load-inputfunmenu1 (quote input-funmenu) "SDIF analysis type" "datatype" (quote 1trc) (list (list "1TRC (additive analysis)" (quote (quote 1trc))) (list "1MRK (chord-seq analysis)" (quote (quote 1mrk))) (list "1HRM (harmonic analysis)" (quote (quote 1hrm))) (list "1FOB (FOF analysis)" (quote (quote 1fob))) (list "1FQ0 (fundamental freq. analysis)" (quote (quote 1fq0))))) (om-load-inputfun (quote input-funbox) "source file" "datasrc" nil) (om-load-inputfun (quote input-funbox) "temporal data" "time-struct" nil))) (om-make-point 28 454) (om-make-point 193 76) (if (find-class (quote cr-model) nil) (make-instance (quote cr-model) :modeltype (quote chroma::fql) :datatype (quote 1trc) :datasrc (list (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (504.88043 588.7087 590.7021 595.7529 702.4013 711.59644 896.60675 919.1884 1005.47004 1059.9623 1115.5778 1137.2056 1189.6295 1492.671 1502.7879 2005.04 2365.8958 2501.647 2524.4273 2527.8457 2585.1848 2754.7473 2999.2512 3002.5357 3053.7827 3474.5452 3533.4063 3541.7322 3583.3987 3604.6826 4002.913))) (setf (chroma::fql rep) (quote (504.88043 588.7087 590.7021 595.7529 702.4013 711.59644 896.60675 919.1884 1005.47004 1059.9623 1115.5778 1137.2056 1189.6295 1492.671 1502.7879 2005.04 2365.8958 2501.647 2524.4273 2527.8457 2585.1848 2754.7473 2999.2512 3002.5357 3053.7827 3474.5452 3533.4063 3541.7322 3583.3987 3604.6826 4002.913))) (setf (chroma::amplitudes rep) (quote (0.10058413 0.015192063 0.16986777 0.010690817 0.0053886795 0.0060768137 7.581615E-4 0.0012701411 0.082807675 0.011831794 0.04419803 0.0027164054 0.016891577 0.0019003286 0.0011434552 7.866696E-4 0.0018766681 0.0026851374 0.0028794355 0.0016018518 0.0044970373 0.0018314023 5.665172E-4 0.0012365226 0.0018691912 0.00398761 0.002129995 0.004371679 0.0029295143 0.0046801698 0.0014953986))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (597.3998 703.6266 717.5057 875.4748 895.6368 919.47345 1194.3997 1275.9428 1329.1061 1386.7697 1425.0895 1791.3305 1909.2759 2367.5017 2436.2246 2559.684 2768.7818 2800.2803 2820.2683 2856.9478 2939.619 2970.6128 3008.166 3493.7332 3505.8594 3563.5264 3606.512 3623.178 3673.633 4180.345 4187.1255))) (setf (chroma::fql rep) (quote (597.3998 703.6266 717.5057 875.4748 895.6368 919.47345 1194.3997 1275.9428 1329.1061 1386.7697 1425.0895 1791.3305 1909.2759 2367.5017 2436.2246 2559.684 2768.7818 2800.2803 2820.2683 2856.9478 2939.619 2970.6128 3008.166 3493.7332 3505.8594 3563.5264 3606.512 3623.178 3673.633 4180.345 4187.1255))) (setf (chroma::amplitudes rep) (quote (0.30361414 0.10777287 0.008536735 0.0032814949 0.004188471 0.0040779356 0.082296774 0.0022912722 6.605075E-4 0.010123503 0.0019347135 0.0035891293 7.870591E-4 0.0083072 0.006628486 0.0012318827 0.003007148 0.0010289115 9.0529706E-4 0.0020968835 0.0018360523 0.002723909 0.0022595204 7.418736E-4 4.796068E-4 0.007981614 0.008274545 0.0035604276 0.006212677 0.0029217787 0.0012810055))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (511.9584 603.51996 624.1297 707.5543 795.79035 814.58515 871.40375 880.8302 891.44245 1402.8804 1473.9951 1526.2713 1588.5731 1649.0496 1683.5575 1723.9421 1780.3248 1840.0851 2127.9983 2305.6209 2338.6753 2643.1082 2677.9822 2720.525 2762.8333 2787.979 2820.8157 2824.9456 2859.9795 3475.2647 3553.5 3555.3506 3561.3382 3617.2588 4152.705 4226.511 4265.6323 4286.2857))) (setf (chroma::fql rep) (quote (511.9584 603.51996 624.1297 707.5543 795.79035 814.58515 871.40375 880.8302 891.44245 1402.8804 1473.9951 1526.2713 1588.5731 1649.0496 1683.5575 1723.9421 1780.3248 1840.0851 2127.9983 2305.6209 2338.6753 2643.1082 2677.9822 2720.525 2762.8333 2787.979 2820.8157 2824.9456 2859.9795 3475.2647 3553.5 3555.3506 3561.3382 3617.2588 4152.705 4226.511 4265.6323 4286.2857))) (setf (chroma::amplitudes rep) (quote (0.001760323 6.659876E-4 0.0010560921 0.3511334 0.012228745 0.046212208 0.009263569 0.07909895 0.12371496 0.020916908 0.006213284 0.004983443 0.0015822946 0.007128095 0.0059244023 0.011364519 0.0057005263 0.0014834281 0.004575834 0.0011664188 0.0011063517 0.0013296463 0.008584625 0.007960357 0.0080079455 0.008547402 0.010055403 0.011246154 0.0110320365 0.0034692018 0.004628197 0.014976415 0.010607028 0.006218163 0.002840833 0.0027053159 0.0031713082 0.002046353))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (596.4607 708.4883 712.75495 719.0452 802.7683 809.17176 809.46845 876.28455 882.238 900.1161 905.44 986.8368 987.221 996.7985 999.6648 1033.9533 1039.3993 1090.8502 1151.1465 1297.9328 1305.0419 1371.9098 1741.4966 1767.0236 1778.1753 1798.1732 1840.0863 2560.9263 2633.0635 2683.9812 2688.5786 2712.5476 2783.012 3422.7984 3532.0354 3541.5794 3576.146 3576.7779 3588.4046 3592.6443 3593.0694 3702.1875 4476.2256 4503.821))) (setf (chroma::fql rep) (quote (596.4607 708.4883 712.75495 719.0452 802.7683 809.17176 809.46845 876.28455 882.238 900.1161 905.44 986.8368 987.221 996.7985 999.6648 1033.9533 1039.3993 1090.8502 1151.1465 1297.9328 1305.0419 1371.9098 1741.4966 1767.0236 1778.1753 1798.1732 1840.0863 2560.9263 2633.0635 2683.9812 2688.5786 2712.5476 2783.012 3422.7984 3532.0354 3541.5794 3576.146 3576.7779 3588.4046 3592.6443 3593.0694 3702.1875 4476.2256 4503.821))) (setf (chroma::amplitudes rep) (quote (0.0010967422 0.0020470322 0.0018339628 0.06814189 0.001211047 0.0013267386 0.042055775 0.48858753 0.48872143 0.3383062 0.22841417 0.0018755901 0.0022467515 9.0244686E-4 7.101839E-4 6.2736537E-4 8.1938075E-4 8.125779E-4 5.468668E-4 6.471983E-4 6.334323E-4 6.101903E-4 0.01274067 0.01628751 0.011364519 0.013458023 0.01688668 0.015492904 0.042408213 0.039902624 0.03658536 0.029552192 0.020902979 0.003751817 0.006943123 0.01617975 0.013313549 0.0136742 0.014444962 0.020524484 0.015728029 0.007744262 0.0019097687 0.001931618))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (351.26364 589.1504 595.70655 596.53925 710.7385 855.82605 962.324 981.78144 1147.6119 1290.8002 1706.6773 1747.3888 1804.9153 2538.8006 2553.8535 2568.1175 2646.9395 2707.6267 3413.7642 3450.019 3505.6348 3520.6397 3551.0647 3566.4134 4251.83 4260.5317 4528.543))) (setf (chroma::fql rep) (quote (351.26364 589.1504 595.70655 596.53925 710.7385 855.82605 962.324 981.78144 1147.6119 1290.8002 1706.6773 1747.3888 1804.9153 2538.8006 2553.8535 2568.1175 2646.9395 2707.6267 3413.7642 3450.019 3505.6348 3520.6397 3551.0647 3566.4134 4251.83 4260.5317 4528.543))) (setf (chroma::amplitudes rep) (quote (6.220879E-4 0.0015513977 0.0020024495 0.0029449712 0.007101165 0.30900887 0.0011907369 0.0020072896 7.134508E-4 8.1936666E-4 0.022507446 0.0029714902 0.005297269 0.007941324 0.053744424 0.05343784 0.0066219117 0.006498144 0.024894217 0.0063743005 0.003342619 0.005514857 0.0033412644 0.0031851498 0.003219887 0.0020478454 6.3344406E-4))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (350.72668 595.03876 597.5274 715.4466 766.18787 787.28 881.06275 887.1022 910.1948 959.57764 1002.77057 1064.2315 1186.7736 1227.736 1296.5245 1305.1489 1365.536 1424.5297 1484.423 1524.4099 1568.3889 1634.5435 1699.5924 1717.7616 1764.4048 1805.0265 2428.9024 2550.7947 2570.3858 2642.4597 2642.5093 2695.7593 3298.3389 3420.8872 3478.9654 3506.6702 3565.978 3575.142 4267.1113 4396.5327 4431.4224))) (setf (chroma::fql rep) (quote (350.72668 595.03876 597.5274 715.4466 766.18787 787.28 881.06275 887.1022 910.1948 959.57764 1002.77057 1064.2315 1186.7736 1227.736 1296.5245 1305.1489 1365.536 1424.5297 1484.423 1524.4099 1568.3889 1634.5435 1699.5924 1717.7616 1764.4048 1805.0265 2428.9024 2550.7947 2570.3858 2642.4597 2642.5093 2695.7593 3298.3389 3420.8872 3478.9654 3506.6702 3565.978 3575.142 4267.1113 4396.5327 4431.4224))) (setf (chroma::amplitudes rep) (quote (6.220879E-4 0.0068884837 0.004176017 0.045144555 0.0033099188 0.05434994 0.49074483 0.39769927 0.00220325 0.002768079 0.0012441806 5.7078374E-4 0.002613383 0.0018744564 8.1936666E-4 8.2306244E-4 0.00289989 0.0038097767 0.003244169 0.0046479288 0.007538094 0.005143346 0.0014253348 0.02582908 0.015774288 0.011836043 0.0017118509 0.0011467062 0.0036699113 0.059506454 7.420554E-4 0.02779789 0.0011834513 0.014659842 0.0024049327 0.018641556 0.016891472 0.019115363 0.0011486849 0.0017532603 0.0024494054))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (291.96426 351.5598 498.57718 534.54725 599.8774 707.3231 759.59467 973.1711 1031.2466 1047.7037 1184.0578 1225.0403 1280.3469 1306.5744 1320.0253 1393.907 1426.2374 1797.7014 2096.0733 2146.543 2378.183 2588.299 2613.8245 2713.547 2765.6885 2857.5716 3387.817 3487.9656 3566.9387 4180.1934))) (setf (chroma::fql rep) (quote (291.96426 351.5598 498.57718 534.54725 599.8774 707.3231 759.59467 973.1711 1031.2466 1047.7037 1184.0578 1225.0403 1280.3469 1306.5744 1320.0253 1393.907 1426.2374 1797.7014 2096.0733 2146.543 2378.183 2588.299 2613.8245 2713.547 2765.6885 2857.5716 3387.817 3487.9656 3566.9387 4180.1934))) (setf (chroma::amplitudes rep) (quote (8.260309E-4 8.629376E-4 0.0010705259 6.833332E-4 0.036827714 0.32537386 0.08581709 5.943394E-4 3.2759085E-4 3.2158295E-4 0.0041603847 0.006873135 0.0023031945 0.0015027395 0.012887313 0.01917664 0.020659939 0.0039574043 0.005372308 0.006466588 0.0019553055 0.0020717618 4.5896252E-4 0.011734816 0.0064847875 0.005548971 0.0022058299 0.0026085263 0.011776419 0.003450467))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (352.68903 496.54117 598.53455 598.93506 676.8549 714.3651 991.1649 1020.1374 1063.5758 1192.2673 1197.6863 1278.5473 1295.5311 1341.0086 1425.1027 1792.7651 2113.2764 2377.0554 2416.911 2621.521 2626.3567 2710.9793 3377.7793 3579.9107))) (setf (chroma::fql rep) (quote (352.68903 496.54117 598.53455 598.93506 676.8549 714.3651 991.1649 1020.1374 1063.5758 1192.2673 1197.6863 1278.5473 1295.5311 1341.0086 1425.1027 1792.7651 2113.2764 2377.0554 2416.911 2621.521 2626.3567 2710.9793 3377.7793 3579.9107))) (setf (chroma::amplitudes rep) (quote (9.2406187E-4 0.0010705259 0.2265837 0.044472203 0.11608037 0.012594645 0.0010773192 0.0010806294 8.368793E-4 0.0041603847 0.038031847 0.019727948 0.017994849 0.0060796016 0.0011851516 0.0061082617 8.8045787E-4 0.002718975 0.0036901278 0.0033586822 0.0028727374 0.0021614887 0.0010196933 0.0029666906))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (353.49332 494.90353 506.69858 590.2239 602.3097 674.426 715.5356 993.026 1054.994 1073.0307 1124.946 1191.8887 1194.6664 1325.8811 1351.807 1425.9514 2025.4369 2115.9048 2596.214 2684.9097 3374.5159 3581.9024 4041.081))) (setf (chroma::fql rep) (quote (353.49332 494.90353 506.69858 590.2239 602.3097 674.426 715.5356 993.026 1054.994 1073.0307 1124.946 1191.8887 1194.6664 1325.8811 1351.807 1425.9514 2025.4369 2115.9048 2596.214 2684.9097 3374.5159 3581.9024 4041.081))) (setf (chroma::amplitudes rep) (quote (0.0013877329 0.0042789467 0.0020083562 0.010030388 0.07559135 0.15334167 0.049747426 0.001577604 0.0017409126 9.217291E-4 0.0016627491 0.00181609 0.003655546 0.0017229999 0.040117968 0.008119753 0.0017071116 9.7258174E-4 0.0041786623 0.0058416017 0.003533079 7.349846E-4 8.756655E-4))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (353.41245 496.68777 500.99667 529.4549 592.15326 601.60126 715.08106 970.369 990.1588 1015.49817 1064.9197 1085.9917 1145.7211 1184.7418 1195.8126 1225.8136 1301.6508 1359.9223 1433.096 2144.333 2586.0867 2860.3728 3393.0342 3576.6436))) (setf (chroma::fql rep) (quote (353.41245 496.68777 500.99667 529.4549 592.15326 601.60126 715.08106 970.369 990.1588 1015.49817 1064.9197 1085.9917 1145.7211 1184.7418 1195.8126 1225.8136 1301.6508 1359.9223 1433.096 2144.333 2586.0867 2860.3728 3393.0342 3576.6436))) (setf (chroma::amplitudes rep) (quote (0.0017295793 0.011434214 0.006792688 0.008809567 0.04292328 0.05321136 0.24963823 0.0011057858 0.004721256 0.0037093095 0.003713396 0.0017187123 0.0020940458 0.0028349466 0.0046291403 0.0053087794 0.00938689 0.006551402 0.016151453 0.0032980885 0.002836337 0.0029699786 0.0015024209 0.002617828))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (354.05862 499.20822 591.4282 600.94104 969.0468 977.64124 1017.206 1059.2311 1095.0697 1158.7587 1185.1497 1196.7789 2577.2617 2920.8867 3404.4793 3571.3606))) (setf (chroma::fql rep) (quote (354.05862 499.20822 591.4282 600.94104 969.0468 977.64124 1017.206 1059.2311 1095.0697 1158.7587 1185.1497 1196.7789 2577.2617 2920.8867 3404.4793 3571.3606))) (setf (chroma::amplitudes rep) (quote (0.0013815082 0.017887315 0.20672228 0.029588048 6.3147367E-4 0.006406188 0.003411081 0.016404698 0.019430843 0.0037177278 0.024792098 0.0052440413 0.0013360916 4.513487E-4 8.1057166E-4 0.0010999569))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (352.8814 503.7392 596.7007 969.88605 1001.66144 1052.5547 1060.0133 1157.0667 1191.0968 1496.2769 2019.3811 2508.6104 2576.1209 2997.4732 3469.0117 3543.0943))) (setf (chroma::fql rep) (quote (352.8814 503.7392 596.7007 969.88605 1001.66144 1052.5547 1060.0133 1157.0667 1191.0968 1496.2769 2019.3811 2508.6104 2576.1209 2997.4732 3469.0117 3543.0943))) (setf (chroma::amplitudes rep) (quote (0.0013422652 0.10060224 0.018963477 6.3953584E-4 0.063420795 0.020970187 0.042409808 0.0037158409 0.0052440413 0.0013795117 6.7401544E-4 0.0014309844 0.002116473 5.9328834E-4 7.5539475E-4 0.0016005889))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (353.52527 533.8577 591.31476 970.7443 980.42414 1057.0723 1066.0978 1128.2947 1166.8809 1602.7529 2137.3753 2671.6817 3570.9805 3752.8662))) (setf (chroma::fql rep) (quote (353.52527 533.8577 591.31476 970.7443 980.42414 1057.0723 1066.0978 1128.2947 1166.8809 1602.7529 2137.3753 2671.6817 3570.9805 3752.8662))) (setf (chroma::amplitudes rep) (quote (0.0014339044 0.16033989 0.055296507 6.4457464E-4 0.0012568475 0.010445479 0.06704336 0.035804093 0.021295533 0.0017487583 0.0015887988 0.005238306 3.4459808E-4 9.875463E-4))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (356.9352 403.3826 497.27564 595.7632 977.5124 1012.755 1063.5184 1117.0172 1181.9391 1788.634 2389.3255 2425.5034 2966.568 3566.0335))) (setf (chroma::fql rep) (quote (356.9352 403.3826 497.27564 595.7632 977.5124 1012.755 1063.5184 1117.0172 1181.9391 1788.634 2389.3255 2425.5034 2966.568 3566.0335))) (setf (chroma::amplitudes rep) (quote (0.0010272672 0.0027066488 0.031201318 0.24115242 0.018903258 0.017763846 0.0034290078 0.0130701 0.044172958 0.0029243462 0.0014415765 0.0013606711 9.146913E-4 0.0018827639))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (384.2201 495.97748 799.0995 983.8273 1119.7643 1475.7584 2447.169 2933.7669 3421.1294))) (setf (chroma::fql rep) (quote (384.2201 495.97748 799.0995 983.8273 1119.7643 1475.7584 2447.169 2933.7669 3421.1294))) (setf (chroma::amplitudes rep) (quote (0.0027998137 0.07339615 0.002894846 0.046433114 0.010855752 0.0027383892 0.0018450789 7.069208E-4 0.0022148444))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (390.58853 702.0249 752.3504 768.29145 777.5996 795.91785 1120.231 1131.771 1132.0595 1154.2621 1217.0579 1497.4071 1542.4537 2116.8413 2583.5972 2630.6255))) (setf (chroma::fql rep) (quote (390.58853 702.0249 752.3504 768.29145 777.5996 795.91785 1120.231 1131.771 1132.0595 1154.2621 1217.0579 1497.4071 1542.4537 2116.8413 2583.5972 2630.6255))) (setf (chroma::amplitudes rep) (quote (0.03406464 0.0011283814 0.010354343 0.010425193 0.0104062455 0.006721498 0.0026769874 0.0041897753 0.0036060387 0.005509213 0.002459005 9.476589E-4 8.6472364E-4 9.5587696E-4 0.0021208413 0.0024289098))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (352.68552 705.86 1061.7782 1406.0556 2120.0247 2845.713))) (setf (chroma::fql rep) (quote (352.68552 705.86 1061.7782 1406.0556 2120.0247 2845.713))) (setf (chroma::amplitudes rep) (quote (0.029314463 0.0140605215 0.0021506299 0.001097191 0.0011174983 7.5844315E-4))) (setf (chroma::bwl rep) (quote nil)) rep))) :time-struct (list 0.046428573 0.2786281 1.2770861 1.5441157 1.880805 1.9969047 2.1826644 2.321984 2.5425737 2.7515533 2.9953628 3.2740023 3.7964514 4.2144103 5.4218483 5.944297 6.4435263 6.942755) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 50 394) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 163 50) (quote "New model created with the initial pitch data and an external time structure") "" (om-make-point 460 458) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 440 358) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CR-MODEL" (quote cr-model) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "class name of the vertical structure" "modeltype" (quote fql) (list (list "Frequencies List" (quote (quote fql))) (list "Partials" (quote (quote ptl))) (list "OM Chord" (quote (quote chord))))) (om-load-inputfunmenu1 (quote input-funmenu) "SDIF analysis type" "datatype" (quote 1trc) (list (list "1TRC (additive analysis)" (quote (quote 1trc))) (list "1MRK (chord-seq analysis)" (quote (quote 1mrk))) (list "1HRM (harmonic analysis)" (quote (quote 1hrm))) (list "1FOB (FOF analysis)" (quote (quote 1fob))) (list "1FQ0 (fundamental freq. analysis)" (quote (quote 1fq0))))) (om-load-inputfun (quote input-funbox) "source file" "datasrc" nil) (om-load-inputfun (quote input-funbox) "temporal data" "time-struct" nil))) (om-make-point 264 452) (om-make-point 193 76) (if (find-class (quote cr-model) nil) (make-instance (quote cr-model) :modeltype (quote chroma::fql) :datatype (quote 1trc) :datasrc (list (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (352.68552 705.86 1061.7782 1406.0556 2120.0247 2845.713))) (setf (chroma::fql rep) (quote (352.68552 705.86 1061.7782 1406.0556 2120.0247 2845.713))) (setf (chroma::amplitudes rep) (quote (0.029314463 0.0140605215 0.0021506299 0.001097191 0.0011174983 7.5844315E-4))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (390.58853 702.0249 752.3504 768.29145 777.5996 795.91785 1120.231 1131.771 1132.0595 1154.2621 1217.0579 1497.4071 1542.4537 2116.8413 2583.5972 2630.6255))) (setf (chroma::fql rep) (quote (390.58853 702.0249 752.3504 768.29145 777.5996 795.91785 1120.231 1131.771 1132.0595 1154.2621 1217.0579 1497.4071 1542.4537 2116.8413 2583.5972 2630.6255))) (setf (chroma::amplitudes rep) (quote (0.03406464 0.0011283814 0.010354343 0.010425193 0.0104062455 0.006721498 0.0026769874 0.0041897753 0.0036060387 0.005509213 0.002459005 9.476589E-4 8.6472364E-4 9.5587696E-4 0.0021208413 0.0024289098))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (384.2201 495.97748 799.0995 983.8273 1119.7643 1475.7584 2447.169 2933.7669 3421.1294))) (setf (chroma::fql rep) (quote (384.2201 495.97748 799.0995 983.8273 1119.7643 1475.7584 2447.169 2933.7669 3421.1294))) (setf (chroma::amplitudes rep) (quote (0.0027998137 0.07339615 0.002894846 0.046433114 0.010855752 0.0027383892 0.0018450789 7.069208E-4 0.0022148444))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (356.9352 403.3826 497.27564 595.7632 977.5124 1012.755 1063.5184 1117.0172 1181.9391 1788.634 2389.3255 2425.5034 2966.568 3566.0335))) (setf (chroma::fql rep) (quote (356.9352 403.3826 497.27564 595.7632 977.5124 1012.755 1063.5184 1117.0172 1181.9391 1788.634 2389.3255 2425.5034 2966.568 3566.0335))) (setf (chroma::amplitudes rep) (quote (0.0010272672 0.0027066488 0.031201318 0.24115242 0.018903258 0.017763846 0.0034290078 0.0130701 0.044172958 0.0029243462 0.0014415765 0.0013606711 9.146913E-4 0.0018827639))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (353.52527 533.8577 591.31476 970.7443 980.42414 1057.0723 1066.0978 1128.2947 1166.8809 1602.7529 2137.3753 2671.6817 3570.9805 3752.8662))) (setf (chroma::fql rep) (quote (353.52527 533.8577 591.31476 970.7443 980.42414 1057.0723 1066.0978 1128.2947 1166.8809 1602.7529 2137.3753 2671.6817 3570.9805 3752.8662))) (setf (chroma::amplitudes rep) (quote (0.0014339044 0.16033989 0.055296507 6.4457464E-4 0.0012568475 0.010445479 0.06704336 0.035804093 0.021295533 0.0017487583 0.0015887988 0.005238306 3.4459808E-4 9.875463E-4))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (352.8814 503.7392 596.7007 969.88605 1001.66144 1052.5547 1060.0133 1157.0667 1191.0968 1496.2769 2019.3811 2508.6104 2576.1209 2997.4732 3469.0117 3543.0943))) (setf (chroma::fql rep) (quote (352.8814 503.7392 596.7007 969.88605 1001.66144 1052.5547 1060.0133 1157.0667 1191.0968 1496.2769 2019.3811 2508.6104 2576.1209 2997.4732 3469.0117 3543.0943))) (setf (chroma::amplitudes rep) (quote (0.0013422652 0.10060224 0.018963477 6.3953584E-4 0.063420795 0.020970187 0.042409808 0.0037158409 0.0052440413 0.0013795117 6.7401544E-4 0.0014309844 0.002116473 5.9328834E-4 7.5539475E-4 0.0016005889))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (354.05862 499.20822 591.4282 600.94104 969.0468 977.64124 1017.206 1059.2311 1095.0697 1158.7587 1185.1497 1196.7789 2577.2617 2920.8867 3404.4793 3571.3606))) (setf (chroma::fql rep) (quote (354.05862 499.20822 591.4282 600.94104 969.0468 977.64124 1017.206 1059.2311 1095.0697 1158.7587 1185.1497 1196.7789 2577.2617 2920.8867 3404.4793 3571.3606))) (setf (chroma::amplitudes rep) (quote (0.0013815082 0.017887315 0.20672228 0.029588048 6.3147367E-4 0.006406188 0.003411081 0.016404698 0.019430843 0.0037177278 0.024792098 0.0052440413 0.0013360916 4.513487E-4 8.1057166E-4 0.0010999569))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (353.41245 496.68777 500.99667 529.4549 592.15326 601.60126 715.08106 970.369 990.1588 1015.49817 1064.9197 1085.9917 1145.7211 1184.7418 1195.8126 1225.8136 1301.6508 1359.9223 1433.096 2144.333 2586.0867 2860.3728 3393.0342 3576.6436))) (setf (chroma::fql rep) (quote (353.41245 496.68777 500.99667 529.4549 592.15326 601.60126 715.08106 970.369 990.1588 1015.49817 1064.9197 1085.9917 1145.7211 1184.7418 1195.8126 1225.8136 1301.6508 1359.9223 1433.096 2144.333 2586.0867 2860.3728 3393.0342 3576.6436))) (setf (chroma::amplitudes rep) (quote (0.0017295793 0.011434214 0.006792688 0.008809567 0.04292328 0.05321136 0.24963823 0.0011057858 0.004721256 0.0037093095 0.003713396 0.0017187123 0.0020940458 0.0028349466 0.0046291403 0.0053087794 0.00938689 0.006551402 0.016151453 0.0032980885 0.002836337 0.0029699786 0.0015024209 0.002617828))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (353.49332 494.90353 506.69858 590.2239 602.3097 674.426 715.5356 993.026 1054.994 1073.0307 1124.946 1191.8887 1194.6664 1325.8811 1351.807 1425.9514 2025.4369 2115.9048 2596.214 2684.9097 3374.5159 3581.9024 4041.081))) (setf (chroma::fql rep) (quote (353.49332 494.90353 506.69858 590.2239 602.3097 674.426 715.5356 993.026 1054.994 1073.0307 1124.946 1191.8887 1194.6664 1325.8811 1351.807 1425.9514 2025.4369 2115.9048 2596.214 2684.9097 3374.5159 3581.9024 4041.081))) (setf (chroma::amplitudes rep) (quote (0.0013877329 0.0042789467 0.0020083562 0.010030388 0.07559135 0.15334167 0.049747426 0.001577604 0.0017409126 9.217291E-4 0.0016627491 0.00181609 0.003655546 0.0017229999 0.040117968 0.008119753 0.0017071116 9.7258174E-4 0.0041786623 0.0058416017 0.003533079 7.349846E-4 8.756655E-4))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (352.68903 496.54117 598.53455 598.93506 676.8549 714.3651 991.1649 1020.1374 1063.5758 1192.2673 1197.6863 1278.5473 1295.5311 1341.0086 1425.1027 1792.7651 2113.2764 2377.0554 2416.911 2621.521 2626.3567 2710.9793 3377.7793 3579.9107))) (setf (chroma::fql rep) (quote (352.68903 496.54117 598.53455 598.93506 676.8549 714.3651 991.1649 1020.1374 1063.5758 1192.2673 1197.6863 1278.5473 1295.5311 1341.0086 1425.1027 1792.7651 2113.2764 2377.0554 2416.911 2621.521 2626.3567 2710.9793 3377.7793 3579.9107))) (setf (chroma::amplitudes rep) (quote (9.2406187E-4 0.0010705259 0.2265837 0.044472203 0.11608037 0.012594645 0.0010773192 0.0010806294 8.368793E-4 0.0041603847 0.038031847 0.019727948 0.017994849 0.0060796016 0.0011851516 0.0061082617 8.8045787E-4 0.002718975 0.0036901278 0.0033586822 0.0028727374 0.0021614887 0.0010196933 0.0029666906))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (291.96426 351.5598 498.57718 534.54725 599.8774 707.3231 759.59467 973.1711 1031.2466 1047.7037 1184.0578 1225.0403 1280.3469 1306.5744 1320.0253 1393.907 1426.2374 1797.7014 2096.0733 2146.543 2378.183 2588.299 2613.8245 2713.547 2765.6885 2857.5716 3387.817 3487.9656 3566.9387 4180.1934))) (setf (chroma::fql rep) (quote (291.96426 351.5598 498.57718 534.54725 599.8774 707.3231 759.59467 973.1711 1031.2466 1047.7037 1184.0578 1225.0403 1280.3469 1306.5744 1320.0253 1393.907 1426.2374 1797.7014 2096.0733 2146.543 2378.183 2588.299 2613.8245 2713.547 2765.6885 2857.5716 3387.817 3487.9656 3566.9387 4180.1934))) (setf (chroma::amplitudes rep) (quote (8.260309E-4 8.629376E-4 0.0010705259 6.833332E-4 0.036827714 0.32537386 0.08581709 5.943394E-4 3.2759085E-4 3.2158295E-4 0.0041603847 0.006873135 0.0023031945 0.0015027395 0.012887313 0.01917664 0.020659939 0.0039574043 0.005372308 0.006466588 0.0019553055 0.0020717618 4.5896252E-4 0.011734816 0.0064847875 0.005548971 0.0022058299 0.0026085263 0.011776419 0.003450467))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (350.72668 595.03876 597.5274 715.4466 766.18787 787.28 881.06275 887.1022 910.1948 959.57764 1002.77057 1064.2315 1186.7736 1227.736 1296.5245 1305.1489 1365.536 1424.5297 1484.423 1524.4099 1568.3889 1634.5435 1699.5924 1717.7616 1764.4048 1805.0265 2428.9024 2550.7947 2570.3858 2642.4597 2642.5093 2695.7593 3298.3389 3420.8872 3478.9654 3506.6702 3565.978 3575.142 4267.1113 4396.5327 4431.4224))) (setf (chroma::fql rep) (quote (350.72668 595.03876 597.5274 715.4466 766.18787 787.28 881.06275 887.1022 910.1948 959.57764 1002.77057 1064.2315 1186.7736 1227.736 1296.5245 1305.1489 1365.536 1424.5297 1484.423 1524.4099 1568.3889 1634.5435 1699.5924 1717.7616 1764.4048 1805.0265 2428.9024 2550.7947 2570.3858 2642.4597 2642.5093 2695.7593 3298.3389 3420.8872 3478.9654 3506.6702 3565.978 3575.142 4267.1113 4396.5327 4431.4224))) (setf (chroma::amplitudes rep) (quote (6.220879E-4 0.0068884837 0.004176017 0.045144555 0.0033099188 0.05434994 0.49074483 0.39769927 0.00220325 0.002768079 0.0012441806 5.7078374E-4 0.002613383 0.0018744564 8.1936666E-4 8.2306244E-4 0.00289989 0.0038097767 0.003244169 0.0046479288 0.007538094 0.005143346 0.0014253348 0.02582908 0.015774288 0.011836043 0.0017118509 0.0011467062 0.0036699113 0.059506454 7.420554E-4 0.02779789 0.0011834513 0.014659842 0.0024049327 0.018641556 0.016891472 0.019115363 0.0011486849 0.0017532603 0.0024494054))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (351.26364 589.1504 595.70655 596.53925 710.7385 855.82605 962.324 981.78144 1147.6119 1290.8002 1706.6773 1747.3888 1804.9153 2538.8006 2553.8535 2568.1175 2646.9395 2707.6267 3413.7642 3450.019 3505.6348 3520.6397 3551.0647 3566.4134 4251.83 4260.5317 4528.543))) (setf (chroma::fql rep) (quote (351.26364 589.1504 595.70655 596.53925 710.7385 855.82605 962.324 981.78144 1147.6119 1290.8002 1706.6773 1747.3888 1804.9153 2538.8006 2553.8535 2568.1175 2646.9395 2707.6267 3413.7642 3450.019 3505.6348 3520.6397 3551.0647 3566.4134 4251.83 4260.5317 4528.543))) (setf (chroma::amplitudes rep) (quote (6.220879E-4 0.0015513977 0.0020024495 0.0029449712 0.007101165 0.30900887 0.0011907369 0.0020072896 7.134508E-4 8.1936666E-4 0.022507446 0.0029714902 0.005297269 0.007941324 0.053744424 0.05343784 0.0066219117 0.006498144 0.024894217 0.0063743005 0.003342619 0.005514857 0.0033412644 0.0031851498 0.003219887 0.0020478454 6.3344406E-4))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (596.4607 708.4883 712.75495 719.0452 802.7683 809.17176 809.46845 876.28455 882.238 900.1161 905.44 986.8368 987.221 996.7985 999.6648 1033.9533 1039.3993 1090.8502 1151.1465 1297.9328 1305.0419 1371.9098 1741.4966 1767.0236 1778.1753 1798.1732 1840.0863 2560.9263 2633.0635 2683.9812 2688.5786 2712.5476 2783.012 3422.7984 3532.0354 3541.5794 3576.146 3576.7779 3588.4046 3592.6443 3593.0694 3702.1875 4476.2256 4503.821))) (setf (chroma::fql rep) (quote (596.4607 708.4883 712.75495 719.0452 802.7683 809.17176 809.46845 876.28455 882.238 900.1161 905.44 986.8368 987.221 996.7985 999.6648 1033.9533 1039.3993 1090.8502 1151.1465 1297.9328 1305.0419 1371.9098 1741.4966 1767.0236 1778.1753 1798.1732 1840.0863 2560.9263 2633.0635 2683.9812 2688.5786 2712.5476 2783.012 3422.7984 3532.0354 3541.5794 3576.146 3576.7779 3588.4046 3592.6443 3593.0694 3702.1875 4476.2256 4503.821))) (setf (chroma::amplitudes rep) (quote (0.0010967422 0.0020470322 0.0018339628 0.06814189 0.001211047 0.0013267386 0.042055775 0.48858753 0.48872143 0.3383062 0.22841417 0.0018755901 0.0022467515 9.0244686E-4 7.101839E-4 6.2736537E-4 8.1938075E-4 8.125779E-4 5.468668E-4 6.471983E-4 6.334323E-4 6.101903E-4 0.01274067 0.01628751 0.011364519 0.013458023 0.01688668 0.015492904 0.042408213 0.039902624 0.03658536 0.029552192 0.020902979 0.003751817 0.006943123 0.01617975 0.013313549 0.0136742 0.014444962 0.020524484 0.015728029 0.007744262 0.0019097687 0.001931618))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (511.9584 603.51996 624.1297 707.5543 795.79035 814.58515 871.40375 880.8302 891.44245 1402.8804 1473.9951 1526.2713 1588.5731 1649.0496 1683.5575 1723.9421 1780.3248 1840.0851 2127.9983 2305.6209 2338.6753 2643.1082 2677.9822 2720.525 2762.8333 2787.979 2820.8157 2824.9456 2859.9795 3475.2647 3553.5 3555.3506 3561.3382 3617.2588 4152.705 4226.511 4265.6323 4286.2857))) (setf (chroma::fql rep) (quote (511.9584 603.51996 624.1297 707.5543 795.79035 814.58515 871.40375 880.8302 891.44245 1402.8804 1473.9951 1526.2713 1588.5731 1649.0496 1683.5575 1723.9421 1780.3248 1840.0851 2127.9983 2305.6209 2338.6753 2643.1082 2677.9822 2720.525 2762.8333 2787.979 2820.8157 2824.9456 2859.9795 3475.2647 3553.5 3555.3506 3561.3382 3617.2588 4152.705 4226.511 4265.6323 4286.2857))) (setf (chroma::amplitudes rep) (quote (0.001760323 6.659876E-4 0.0010560921 0.3511334 0.012228745 0.046212208 0.009263569 0.07909895 0.12371496 0.020916908 0.006213284 0.004983443 0.0015822946 0.007128095 0.0059244023 0.011364519 0.0057005263 0.0014834281 0.004575834 0.0011664188 0.0011063517 0.0013296463 0.008584625 0.007960357 0.0080079455 0.008547402 0.010055403 0.011246154 0.0110320365 0.0034692018 0.004628197 0.014976415 0.010607028 0.006218163 0.002840833 0.0027053159 0.0031713082 0.002046353))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (597.3998 703.6266 717.5057 875.4748 895.6368 919.47345 1194.3997 1275.9428 1329.1061 1386.7697 1425.0895 1791.3305 1909.2759 2367.5017 2436.2246 2559.684 2768.7818 2800.2803 2820.2683 2856.9478 2939.619 2970.6128 3008.166 3493.7332 3505.8594 3563.5264 3606.512 3623.178 3673.633 4180.345 4187.1255))) (setf (chroma::fql rep) (quote (597.3998 703.6266 717.5057 875.4748 895.6368 919.47345 1194.3997 1275.9428 1329.1061 1386.7697 1425.0895 1791.3305 1909.2759 2367.5017 2436.2246 2559.684 2768.7818 2800.2803 2820.2683 2856.9478 2939.619 2970.6128 3008.166 3493.7332 3505.8594 3563.5264 3606.512 3623.178 3673.633 4180.345 4187.1255))) (setf (chroma::amplitudes rep) (quote (0.30361414 0.10777287 0.008536735 0.0032814949 0.004188471 0.0040779356 0.082296774 0.0022912722 6.605075E-4 0.010123503 0.0019347135 0.0035891293 7.870591E-4 0.0083072 0.006628486 0.0012318827 0.003007148 0.0010289115 9.0529706E-4 0.0020968835 0.0018360523 0.002723909 0.0022595204 7.418736E-4 4.796068E-4 0.007981614 0.008274545 0.0035604276 0.006212677 0.0029217787 0.0012810055))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (504.88043 588.7087 590.7021 595.7529 702.4013 711.59644 896.60675 919.1884 1005.47004 1059.9623 1115.5778 1137.2056 1189.6295 1492.671 1502.7879 2005.04 2365.8958 2501.647 2524.4273 2527.8457 2585.1848 2754.7473 2999.2512 3002.5357 3053.7827 3474.5452 3533.4063 3541.7322 3583.3987 3604.6826 4002.913))) (setf (chroma::fql rep) (quote (504.88043 588.7087 590.7021 595.7529 702.4013 711.59644 896.60675 919.1884 1005.47004 1059.9623 1115.5778 1137.2056 1189.6295 1492.671 1502.7879 2005.04 2365.8958 2501.647 2524.4273 2527.8457 2585.1848 2754.7473 2999.2512 3002.5357 3053.7827 3474.5452 3533.4063 3541.7322 3583.3987 3604.6826 4002.913))) (setf (chroma::amplitudes rep) (quote (0.10058413 0.015192063 0.16986777 0.010690817 0.0053886795 0.0060768137 7.581615E-4 0.0012701411 0.082807675 0.011831794 0.04419803 0.0027164054 0.016891577 0.0019003286 0.0011434552 7.866696E-4 0.0018766681 0.0026851374 0.0028794355 0.0016018518 0.0044970373 0.0018314023 5.665172E-4 0.0012365226 0.0018691912 0.00398761 0.002129995 0.004371679 0.0029295143 0.0046801698 0.0014953986))) (setf (chroma::bwl rep) (quote nil)) rep))) :time-struct (list 0 1 2 3 4 5 6 7 8 9 10) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 93 42) (quote "<-- Get Model Pitch Data") "" (om-make-point 167 307) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODEL-DATA" (quote model-data) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 112 303) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 274 26) (quote "CREATING MODELS II") "" (om-make-point 289 28) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CR-MODEL" (quote cr-model) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "class name of the vertical structure" "modeltype" (quote fql) (list (list "Frequencies List" (quote (quote fql))) (list "Partials" (quote (quote ptl))) (list "OM Chord" (quote (quote chord))))) (om-load-inputfunmenu1 (quote input-funmenu) "SDIF analysis type" "datatype" (quote 1trc) (list (list "1TRC (additive analysis)" (quote (quote 1trc))) (list "1MRK (chord-seq analysis)" (quote (quote 1mrk))) (list "1HRM (harmonic analysis)" (quote (quote 1hrm))) (list "1FOB (FOF analysis)" (quote (quote 1fob))) (list "1FQ0 (fundamental freq. analysis)" (quote (quote 1fq0))))) (om-load-inputfun (quote input-funbox) "source file" "datasrc" nil) (om-load-inputfun (quote input-funbox) "temporal data" "time-struct" nil))) (om-make-point 92 207) (om-make-point 193 76) (if (find-class (quote cr-model) nil) (make-instance (quote cr-model) :modeltype (quote fql) :datatype (quote 1trc) :datasrc nil :time-struct (list 0.046428573 0.2786281 1.2770861 1.5441157 1.880805 1.9969047 2.1826644 2.321984 2.5425737 2.7515533 2.9953628 3.2740023 3.7964514 4.2144103 5.4218483 5.944297 6.4435263 6.942755) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 72 36) (quote "ANALYSIS DATA") "" (om-make-point 154 100) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 80 36) (quote "STRUCTURE TEMPS") "" (om-make-point 237 99) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 238 133) (om-make-point 56 57) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) "x" nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 160 132) (om-make-point 55 61) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) "x" nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 3 nil 0) (9 4 1 4 nil 0) (7 0 2 0 nil 0) (7 0 5 3 nil 0) (4 0 5 4 nil 0) (9 0 7 0 nil 0) (13 0 9 3 nil 0) (12 0 9 4 nil 0))) nil 7.06))
