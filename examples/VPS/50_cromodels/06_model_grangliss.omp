; OM File Header - Saved 2025/02/06 18:53:32
; (7.06 :patc (om-make-point 20 181) (om-make-point 0 0) (om-make-point 802 874) "non documentation" 183 0 nil "2025/02/06 18:53:32")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../../../../out-files/06_model_grangliss.aiff\""))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "06_model_grangliss" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil))) (om-make-point 507 619) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 119 616) (om-make-point 56 24) "t 0 148" "\"t 0 148\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 266 706) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 138 698) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ADD-11" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :durs) nil nil))) (om-make-point 113 754) (om-make-point 70 50) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 17))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0)) (quote (2.0 1.90129 1.11628 1.47676 0.5 0.918 0.53324 0.87156 0.58508 0.72768 0.98718)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) nil)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) nil)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.5 2.0 3.0 4.0 5.0 6.0 7.0 8.0)) (quote (0.0 1.0 0.5 0.2 0.1 0.05 0.02 0.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 341 666) (om-make-point 129 28) "06_model_grangliss" "\"06_model_grangliss\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1))) (om-make-point 335 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND1" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 416 754) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "06_model_grangliss" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "06_model_grangliss.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode)) (list nil nil nil (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE1" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (duration sound patch nchnls tables kr resolution evt-test run rescale sr name)" "Keyword input" (quote :name) nil nil))) (om-make-point 308 706) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :aenv) nil nil))) (om-make-point 313 544) (om-make-point 86 58) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 500.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.5 2.0 3.0 4.0 5.0 6.0 7.0 8.0)) (quote (0.0 1.0 0.5 0.2 0.1 0.05 0.02 0.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) "x" nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EXPAND-MODEL" (quote expand-model) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MY-MODEL" nil) (om-load-inputfun (quote input-funbox) "no documentation" "CTL-MODEL" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TARGET-CLASS" nil))) (om-make-point 254 597) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "CR-CONTROL" (let ((crctrl (om-load-patch-abs1 "CR-CONTROL" (quote ((let ((box (om-load-editor-box1 "BPF2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 5))) (om-make-point 630 260) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 20 30 40 50 60 70 80 90 100)) (quote (5 5 2 3 1 2 1 2 1 1 2)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF2") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "DURS" 3 (om-make-point 579 335) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "DURS" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 5))) (om-make-point 512 94) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.88 23.08 36.6 40.44 50.0 63.08 76.6 80.0 91.32 101.32)) (quote (10.0 9.407 4.69111 6.85667 0.98889 3.5 1.18856 3.221 1.5 2.35667 3.91556)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list nil (quote t) 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 3) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 3))) (om-make-point 552 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11" (om-make-point 114 35) (quote "Relative BPF to control the durations") "" (om-make-point 557 109) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 568 143) (om-make-point 23 22) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux10" (quote t) (quote nil) (om-make-point 606 147) (om-make-point 26 20) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-VPS-AMPS" (quote get-vps-amps) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 84 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "AENV" 2 (om-make-point 364 279) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "AENV" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 109 34) (quote "BPF as amplitude envelope") "" (om-make-point 368 199) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF1" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 0.1 2 3 4 5 6 7 8)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 1 0.5 0.2 0.1 0.05 0.02 0)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 5))) (om-make-point 314 142) (om-make-point 129 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 2.0 3.0 4.0 5.0 6.0 7.0 8.0)) (quote (0.0 1.0 0.2 0.1 0.05 0.02 0.005 0.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF1") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture show-stems deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list nil (quote t) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux91" (quote t) (quote nil) (om-make-point 300 75) (om-make-point 68 42) (list 0 0.01 2 3 4 5 6 7 8) "(0 0.01 2 3 4 5 6 7 8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux10" (quote t) (quote nil) (om-make-point 376 80) (om-make-point 101 34) (list 0 1 0.2 0.1 0.05 0.02 0.005 0) "(0 1 0.2 0.1 0.05 0.02 0.005 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-VPS-FREQS" (quote get-vps-freqs) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 204 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "FREQ" 1 (om-make-point 216 292) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "FREQ" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "AMP" 0 (om-make-point 77 303) (quote ((om-load-inputfun (quote input-funbox) "out" "out" 0.3))) "AMP" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-modeldatabox "MODEL DATA" (om-make-point 121 29) (om-make-point 134 55)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 2 nil 0) (0 0 1 0 nil 0) (2 2 3 0 nil 2) (5 0 3 1 nil 0) (6 0 3 2 nil 0) (16 4 7 0 nil 0) (10 0 8 0 nil 0) (11 0 10 1 nil 7) (12 0 10 2 nil 7) (16 4 13 0 nil 0) (13 0 14 0 nil 0) (7 0 15 0 nil 0))) 7.06 nil "" (om-make-point 0 0) (om-make-point 832 568)))) (change-class crctrl (find-class (quote cr-ctrl))) (setf (icon crctrl) (list 655 (find-library "OMChroma"))) (setf (compiled? crctrl) nil) crctrl) (quote nil) (om-make-point 245 467) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CR-MODEL" (quote cr-model) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "class name of the vertical structure" "modeltype" (quote fql) (list (list "Frequencies List" (quote (quote fql))) (list "Partials" (quote (quote ptl))) (list "OM Chord" (quote (quote chord))))) (om-load-inputfunmenu1 (quote input-funmenu) "SDIF analysis type" "datatype" (quote 1trc) (list (list "1TRC (additive analysis)" (quote (quote 1trc))) (list "1MRK (chord-seq analysis)" (quote (quote 1mrk))) (list "1HRM (harmonic analysis)" (quote (quote 1hrm))) (list "1FOB (FOF analysis)" (quote (quote 1fob))) (list "1FQ0 (fundamental freq. analysis)" (quote (quote 1fq0))))) (om-load-inputfun (quote input-funbox) "source file" "datasrc" nil) (om-load-inputfun (quote input-funbox) "temporal data" "time-struct" nil))) (om-make-point 88 426) (om-make-point 143 97) (if (find-class (quote cr-model) nil) (make-instance (quote cr-model) :modeltype (quote chroma::fql) :datatype (quote 1trc) :datasrc (list (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (224.0 225.0 368.0 369.7 370.804 476.0 680.0 800.0 1096.0 1200.0 1504.0 1628.0 2136.0 3060.0 3672.0 4160.0 5320.0))) (setf (chroma::fql rep) (quote (224.0 225.0 368.0 369.7 370.804 476.0 680.0 800.0 1096.0 1200.0 1504.0 1628.0 2136.0 3060.0 3672.0 4160.0 5320.0))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (248.88889 250.0 408.8889 410.77777 412.00446 528.8889 755.55555 888.8889 1217.7778 1333.3334 1671.1111 1808.8889 2373.3333 3400.0 4080.0 4622.222 5911.1113))) (setf (chroma::fql rep) (quote (248.88889 250.0 408.8889 410.77777 412.00446 528.8889 755.55555 888.8889 1217.7778 1333.3334 1671.1111 1808.8889 2373.3333 3400.0 4080.0 4622.222 5911.1113))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (273.77777 275.0 449.77777 451.85556 453.2049 581.7778 831.1111 977.7778 1339.5556 1466.6666 1838.2222 1989.7778 2610.6668 3740.0 4488.0 5084.4443 6502.222))) (setf (chroma::fql rep) (quote (273.77777 275.0 449.77777 451.85556 453.2049 581.7778 831.1111 977.7778 1339.5556 1466.6666 1838.2222 1989.7778 2610.6668 3740.0 4488.0 5084.4443 6502.222))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (298.66666 300.0 490.66666 492.93332 494.40533 634.6667 906.6667 1066.6666 1461.3334 1600.0 2005.3334 2170.6668 2848.0 4080.0 4896.0 5546.6665 7093.3335))) (setf (chroma::fql rep) (quote (298.66666 300.0 490.66666 492.93332 494.40533 634.6667 906.6667 1066.6666 1461.3334 1600.0 2005.3334 2170.6668 2848.0 4080.0 4896.0 5546.6665 7093.3335))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (323.55554 325.0 531.55555 534.0111 535.6058 687.55555 982.2222 1155.5556 1583.1111 1733.3334 2172.4444 2351.5557 3085.3333 4420.0 5304.0 6008.8887 7684.4443))) (setf (chroma::fql rep) (quote (323.55554 325.0 531.55555 534.0111 535.6058 687.55555 982.2222 1155.5556 1583.1111 1733.3334 2172.4444 2351.5557 3085.3333 4420.0 5304.0 6008.8887 7684.4443))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (348.44446 350.0 572.44446 575.08887 576.8062 740.44446 1057.7778 1244.4445 1704.8889 1866.6666 2339.5557 2532.4444 3322.6668 4760.0 5712.0 6471.1113 8275.556))) (setf (chroma::fql rep) (quote (348.44446 350.0 572.44446 575.08887 576.8062 740.44446 1057.7778 1244.4445 1704.8889 1866.6666 2339.5557 2532.4444 3322.6668 4760.0 5712.0 6471.1113 8275.556))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (373.33334 375.0 613.3333 616.1667 618.00666 793.3333 1133.3334 1333.3334 1826.6666 2000.0 2506.6668 2713.3333 3560.0 5100.0 6120.0 6933.3335 8866.667))) (setf (chroma::fql rep) (quote (373.33334 375.0 613.3333 616.1667 618.00666 793.3333 1133.3334 1333.3334 1826.6666 2000.0 2506.6668 2713.3333 3560.0 5100.0 6120.0 6933.3335 8866.667))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (398.22223 400.0 654.2222 657.24445 659.2071 846.2222 1208.8889 1422.2222 1948.4445 2133.3333 2673.7779 2894.2222 3797.3333 5440.0 6528.0 7395.5557 9457.777))) (setf (chroma::fql rep) (quote (398.22223 400.0 654.2222 657.24445 659.2071 846.2222 1208.8889 1422.2222 1948.4445 2133.3333 2673.7779 2894.2222 3797.3333 5440.0 6528.0 7395.5557 9457.777))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (423.1111 425.0 695.1111 698.3222 700.40754 899.1111 1284.4445 1511.1111 2070.2222 2266.6668 2840.889 3075.111 4034.6668 5780.0 6936.0 7857.778 10048.889))) (setf (chroma::fql rep) (quote (423.1111 425.0 695.1111 698.3222 700.40754 899.1111 1284.4445 1511.1111 2070.2222 2266.6668 2840.889 3075.111 4034.6668 5780.0 6936.0 7857.778 10048.889))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (448.0 450.0 736.0 739.4 741.608 952.0 1360.0 1600.0 2192.0 2400.0 3008.0 3256.0 4272.0 6120.0 7344.0 8320.0 10640.0))) (setf (chroma::fql rep) (quote (448.0 450.0 736.0 739.4 741.608 952.0 1360.0 1600.0 2192.0 2400.0 3008.0 3256.0 4272.0 6120.0 7344.0 8320.0 10640.0))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep))) :time-struct (list 0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11111" (om-make-point 100 39) (quote "Begin/End of Reference F0") "" (om-make-point 49 65) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment111" (om-make-point 169 26) (quote "Begin/End of Action Times") "" (om-make-point 247 413) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1))) (om-make-point 323 305) (om-make-point 81 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 390 59) (quote "Simple Granular Glissando (see cs2_tut07) realised as a cr-model") "" (om-make-point 91 11) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 18 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux9" (quote t) (quote nil) (om-make-point 317 280) (om-make-point 29 23) 10.0 "10.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 261 300) (om-make-point 17 29) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 269 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 205 239) (om-make-point 26 27) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 172 239) (om-make-point 12 22) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 106 239) (om-make-point 19 22) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 73 239) (om-make-point 12 22) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 181 118) (om-make-point 22 33) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-SAMPLE" (quote bpf-sample) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "a number" "XMIN" 0) (om-load-inputfun (quote input-funbox) "a number" "XMAX" 10) (om-load-inputfun (quote input-funbox) "an integer" "NBSAMPLES" 10) (om-load-inputfun (quote input-funbox) "a number" "COEFF" 1) (om-load-inputfun (quote input-funbox) "an integer" "NBDEC" 2))) (om-make-point 11 269) (om-make-point 233 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 49 105) (om-make-point 99 24) (list 400.0 800.0) "(400.0 800.0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 2))) (om-make-point 25 140) (om-make-point 105 78) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0)) (quote (400.0 800.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "Main_f0" nil))) (om-make-point 79 334) (om-make-point 97 55) nil nil (list (let ((box (om-load-editor-box1 "FQL 2" (quote chroma::fql) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "List of Frequencies" "fql" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "amplitudes" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "bwl" nil))) (om-make-point 131 330) (om-make-point 70 50) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote nil)) (setf (chroma::fql rep) (quote nil)) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 500 300))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 77 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-SAMPLE" (quote bpf-sample) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "a number" "XMIN" 0) (om-load-inputfun (quote input-funbox) "a number" "XMAX" 100) (om-load-inputfun (quote input-funbox) "an integer" "NBSAMPLES" 10))) (om-make-point 271 190) (om-make-point 107 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0.3))) (om-make-point 233 277) (om-make-point 67 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 139 424) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 164 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 238 71) (om-make-point 46 59) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 19 30 41 50 70 75 80 90 100)) (quote (229 152 238 95 210 382 544 119 30 233 30)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF2") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture deltapict outport inport zoom palette-mode obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list nil (om-make-point 0 0) 0 0 1 0 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1132" (om-make-point 85 69) (quote "Absolute BPF to control amplitudes (spectral envelope)") "" (om-make-point 288 69) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 29 85) (om-make-point 125 74) (list 0.56 0.5625 0.92 0.92425 0.92701 1.19 1.7 2 2.74 3 3.76 4.07 5.34 7.65 9.18 10.4 13.3) "(0.56 0.5625 0.92 0.92425 0.92701 1.19 1.7 2 2.74 3 3.76 4.07 5.34 7.65 9.18 10.4 13.3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" (list 0.56 0.5625 0.92 0.92425 1.19 1.7 2 2.74)) (om-load-inputfun (quote input-funbox) "second input" "NUM" 400))) (om-make-point 104 182) (om-make-point 53 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 140 23) (quote "List of Frequencies' Scalers") "" (om-make-point 16 51) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 160 28) "no documentation" "Main_f0" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 318 485) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 26 490) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((9 0 0 1 nil 0) (3 0 0 2 nil 0) (8 0 1 0 nil 0) (6 0 2 0 nil 0) (1 0 2 3 nil 0) (2 0 3 0 nil 0) (0 0 4 0 nil 0) (11 0 5 0 nil 1) (8 0 9 0 nil 1) (5 0 9 1 nil 1) (4 1 12 0 nil 0) (4 0 13 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (10 0 2 1 nil 0) (10 0 3 0 nil 0) (3 0 4 0 nil 0) (24 0 6 0 nil 0) (0 0 7 0 nil 0) (2 0 8 0 nil 0) (5 0 8 1 nil 0) (12 0 10 0 nil 0) (11 0 10 1 nil 0) (9 0 10 2 nil 0) (28 0 12 3 nil 0) (19 0 12 4 nil 0) (17 0 15 0 nil 0) (24 0 15 1 nil 0) (18 0 19 0 nil 0) (24 0 19 1 nil 0) (15 0 19 2 nil 0) (27 0 25 0 nil 0) (23 0 25 1 nil 0) (22 0 25 2 nil 0) (24 0 25 3 nil 0) (21 0 25 4 nil 0) (20 0 25 5 nil 0) (26 0 27 2 nil 0) (25 0 28 0 nil 0))) nil 7.06))
