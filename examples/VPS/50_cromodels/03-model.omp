; OM File Header - Saved 2025/02/06 18:53:32
; (7.06 :patc (om-make-point 159 74) (om-make-point 0 0) (om-make-point 802 648) "non documentation" 183 0 nil "2025/02/06 18:53:32")
; End File Header
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "03-model" (quote ((let ((box (om-load-boxcall (quote genfun) "PITCH-TRANSPOSE" (quote pitch-transpose) (quote ((om-load-inputfun (quote input-funbox) "model data" "SELF" nil) (om-load-inputfun (quote input-funbox) "stretching factor" "RATIO" 1))) (om-make-point 436 535) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 175 26) (quote "< - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -") "" (om-make-point 361 280) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 112 82) (quote "... or a lambda patch in charge of creating a pitch structure starting from another one") "" (om-make-point 599 245) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 563 237) (om-make-point 28 24) 0.001 "0.001" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote slot) "slot" (quote chroma::fql) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "REFERENCE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "THE-LIST" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "AMPLITUDES" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "BWL" nil))) (om-make-point 164 92) nil nil nil nil 5))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 137 55) (quote "... else return an empty chunk") "" (om-make-point 323 247) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 137 55) (quote "If the first partial is higher than the input threshold...") "" (om-make-point 9 85) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 137 55) (quote "... then return data") "" (om-make-point 175 194) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 297 252) (om-make-point 20 23) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 43 141) "no documentation" "seuil" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 101 157) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 71 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 154 276) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 129 10) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 175 354) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 0 nil 0) (0 3 6 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (0 0 8 1 nil 0) (4 0 8 2 nil 0) (8 0 10 0 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 537 267) nil nil "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STRETCH-VPS" (quote stretch-vps) (quote ((om-load-inputfun (quote input-funbox) "model data" "SELF" nil) (om-load-inputfun (quote input-funbox) "stretching factor" "FACT" 2))) (om-make-point 364 533) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "N-MAIN-PARTIALS" (quote n-main-partials) (quote ((om-load-inputfun (quote input-funbox) "model data" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of partials" "N" 20))) (om-make-point 273 532) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAIN-PARTIALS" (quote main-partials) (quote ((om-load-inputfun (quote input-funbox) "model data" "SELF" nil) (om-load-inputfun (quote input-funbox) "threshold amp" "THRESHOLD" 0.01))) (om-make-point 194 531) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HIGH-PASS-FILTER1" (quote high-pass-filter) (quote ((om-load-inputfun (quote input-funbox) "model data" "SELF" nil) (om-load-inputfun (quote input-funbox) "filter freq (Hz)" "FREQ" 800.0))) (om-make-point 103 529) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LOW-PASS-FILTER" (quote low-pass-filter) (quote ((om-load-inputfun (quote input-funbox) "model data" "SELF" nil) (om-load-inputfun (quote input-funbox) "filter freq (Hz)" "FREQ" 2000))) (om-make-point 18 528) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 135 41) (quote "Available predefined processing functions :") "" (om-make-point 27 481) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 268 242) (om-make-point 33 22) 2000 "2000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LOW-PASS-FILTER" (quote low-pass-filter) (quote ((om-load-inputfun (quote input-funbox) "model data" "SELF" nil) (om-load-inputfun (quote input-funbox) "filter freq (Hz)" "FREQ" 2000))) (om-make-point 222 263) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 140 82) (quote "Optional input :$Connect a LAMBDA processing function to apply on each data chunk") "" (om-make-point 19 310) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 163 50) (quote "New model created with modified data from the initial model") "" (om-make-point 416 413) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CR-MODEL" (quote cr-model) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "class name of the vertical structure" "modeltype" (quote fql) (list (list "Frequencies List" (quote (quote fql))) (list "Partials" (quote (quote ptl))) (list "OM Chord" (quote (quote chord))))) (om-load-inputfunmenu1 (quote input-funmenu) "SDIF analysis type" "datatype" (quote 1trc) (list (list "1TRC (additive analysis)" (quote (quote 1trc))) (list "1MRK (chord-seq analysis)" (quote (quote 1mrk))) (list "1HRM (harmonic analysis)" (quote (quote 1hrm))) (list "1FOB (FOF analysis)" (quote (quote 1fob))) (list "1FQ0 (fundamental freq. analysis)" (quote (quote 1fq0))))) (om-load-inputfun (quote input-funbox) "source file" "datasrc" nil) (om-load-inputfun (quote input-funbox) "temporal data" "time-struct" nil))) (om-make-point 218 407) (om-make-point 193 76) (if (find-class (quote cr-model) nil) (make-instance (quote cr-model) :modeltype (quote chroma::fql) :datatype (quote 1trc) :datasrc (list (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (352.68552 705.86 1061.7782 1406.0556))) (setf (chroma::fql rep) (quote (352.68552 705.86 1061.7782 1406.0556))) (setf (chroma::amplitudes rep) (quote (0.029314463 0.0140605215 0.0021506299 0.001097191))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (390.58853 702.0249 752.3504 768.29145 777.5996 795.91785 1120.231 1131.771 1132.0595 1154.2621 1217.0579 1497.4071 1542.4537))) (setf (chroma::fql rep) (quote (390.58853 702.0249 752.3504 768.29145 777.5996 795.91785 1120.231 1131.771 1132.0595 1154.2621 1217.0579 1497.4071 1542.4537))) (setf (chroma::amplitudes rep) (quote (0.03406464 0.0011283814 0.010354343 0.010425193 0.0104062455 0.006721498 0.0026769874 0.0041897753 0.0036060387 0.005509213 0.002459005 9.476589E-4 8.6472364E-4))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (384.2201 495.97748 799.0995 983.8273 1119.7643 1475.7584))) (setf (chroma::fql rep) (quote (384.2201 495.97748 799.0995 983.8273 1119.7643 1475.7584))) (setf (chroma::amplitudes rep) (quote (0.0027998137 0.07339615 0.002894846 0.046433114 0.010855752 0.0027383892))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (356.9352 403.3826 497.27564 595.7632 977.5124 1012.755 1063.5184 1117.0172 1181.9391 1788.634))) (setf (chroma::fql rep) (quote (356.9352 403.3826 497.27564 595.7632 977.5124 1012.755 1063.5184 1117.0172 1181.9391 1788.634))) (setf (chroma::amplitudes rep) (quote (0.0010272672 0.0027066488 0.031201318 0.24115242 0.018903258 0.017763846 0.0034290078 0.0130701 0.044172958 0.0029243462))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (353.52527 533.8577 591.31476 970.7443 980.42414 1057.0723 1066.0978 1128.2947 1166.8809 1602.7529))) (setf (chroma::fql rep) (quote (353.52527 533.8577 591.31476 970.7443 980.42414 1057.0723 1066.0978 1128.2947 1166.8809 1602.7529))) (setf (chroma::amplitudes rep) (quote (0.0014339044 0.16033989 0.055296507 6.4457464E-4 0.0012568475 0.010445479 0.06704336 0.035804093 0.021295533 0.0017487583))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (352.8814 503.7392 596.7007 969.88605 1001.66144 1052.5547 1060.0133 1157.0667 1191.0968 1496.2769))) (setf (chroma::fql rep) (quote (352.8814 503.7392 596.7007 969.88605 1001.66144 1052.5547 1060.0133 1157.0667 1191.0968 1496.2769))) (setf (chroma::amplitudes rep) (quote (0.0013422652 0.10060224 0.018963477 6.3953584E-4 0.063420795 0.020970187 0.042409808 0.0037158409 0.0052440413 0.0013795117))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (354.05862 499.20822 591.4282 600.94104 969.0468 977.64124 1017.206 1059.2311 1095.0697 1158.7587 1185.1497 1196.7789))) (setf (chroma::fql rep) (quote (354.05862 499.20822 591.4282 600.94104 969.0468 977.64124 1017.206 1059.2311 1095.0697 1158.7587 1185.1497 1196.7789))) (setf (chroma::amplitudes rep) (quote (0.0013815082 0.017887315 0.20672228 0.029588048 6.3147367E-4 0.006406188 0.003411081 0.016404698 0.019430843 0.0037177278 0.024792098 0.0052440413))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (353.41245 496.68777 500.99667 529.4549 592.15326 601.60126 715.08106 970.369 990.1588 1015.49817 1064.9197 1085.9917 1145.7211 1184.7418 1195.8126 1225.8136 1301.6508 1359.9223 1433.096))) (setf (chroma::fql rep) (quote (353.41245 496.68777 500.99667 529.4549 592.15326 601.60126 715.08106 970.369 990.1588 1015.49817 1064.9197 1085.9917 1145.7211 1184.7418 1195.8126 1225.8136 1301.6508 1359.9223 1433.096))) (setf (chroma::amplitudes rep) (quote (0.0017295793 0.011434214 0.006792688 0.008809567 0.04292328 0.05321136 0.24963823 0.0011057858 0.004721256 0.0037093095 0.003713396 0.0017187123 0.0020940458 0.0028349466 0.0046291403 0.0053087794 0.00938689 0.006551402 0.016151453))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (353.49332 494.90353 506.69858 590.2239 602.3097 674.426 715.5356 993.026 1054.994 1073.0307 1124.946 1191.8887 1194.6664 1325.8811 1351.807 1425.9514))) (setf (chroma::fql rep) (quote (353.49332 494.90353 506.69858 590.2239 602.3097 674.426 715.5356 993.026 1054.994 1073.0307 1124.946 1191.8887 1194.6664 1325.8811 1351.807 1425.9514))) (setf (chroma::amplitudes rep) (quote (0.0013877329 0.0042789467 0.0020083562 0.010030388 0.07559135 0.15334167 0.049747426 0.001577604 0.0017409126 9.217291E-4 0.0016627491 0.00181609 0.003655546 0.0017229999 0.040117968 0.008119753))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (352.68903 496.54117 598.53455 598.93506 676.8549 714.3651 991.1649 1020.1374 1063.5758 1192.2673 1197.6863 1278.5473 1295.5311 1341.0086 1425.1027 1792.7651))) (setf (chroma::fql rep) (quote (352.68903 496.54117 598.53455 598.93506 676.8549 714.3651 991.1649 1020.1374 1063.5758 1192.2673 1197.6863 1278.5473 1295.5311 1341.0086 1425.1027 1792.7651))) (setf (chroma::amplitudes rep) (quote (9.2406187E-4 0.0010705259 0.2265837 0.044472203 0.11608037 0.012594645 0.0010773192 0.0010806294 8.368793E-4 0.0041603847 0.038031847 0.019727948 0.017994849 0.0060796016 0.0011851516 0.0061082617))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (291.96426 351.5598 498.57718 534.54725 599.8774 707.3231 759.59467 973.1711 1031.2466 1047.7037 1184.0578 1225.0403 1280.3469 1306.5744 1320.0253 1393.907 1426.2374 1797.7014))) (setf (chroma::fql rep) (quote (291.96426 351.5598 498.57718 534.54725 599.8774 707.3231 759.59467 973.1711 1031.2466 1047.7037 1184.0578 1225.0403 1280.3469 1306.5744 1320.0253 1393.907 1426.2374 1797.7014))) (setf (chroma::amplitudes rep) (quote (8.260309E-4 8.629376E-4 0.0010705259 6.833332E-4 0.036827714 0.32537386 0.08581709 5.943394E-4 3.2759085E-4 3.2158295E-4 0.0041603847 0.006873135 0.0023031945 0.0015027395 0.012887313 0.01917664 0.020659939 0.0039574043))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (350.72668 595.03876 597.5274 715.4466 766.18787 787.28 881.06275 887.1022 910.1948 959.57764 1002.77057 1064.2315 1186.7736 1227.736 1296.5245 1305.1489 1365.536 1424.5297 1484.423 1524.4099 1568.3889 1634.5435 1699.5924 1717.7616 1764.4048 1805.0265))) (setf (chroma::fql rep) (quote (350.72668 595.03876 597.5274 715.4466 766.18787 787.28 881.06275 887.1022 910.1948 959.57764 1002.77057 1064.2315 1186.7736 1227.736 1296.5245 1305.1489 1365.536 1424.5297 1484.423 1524.4099 1568.3889 1634.5435 1699.5924 1717.7616 1764.4048 1805.0265))) (setf (chroma::amplitudes rep) (quote (6.220879E-4 0.0068884837 0.004176017 0.045144555 0.0033099188 0.05434994 0.49074483 0.39769927 0.00220325 0.002768079 0.0012441806 5.7078374E-4 0.002613383 0.0018744564 8.1936666E-4 8.2306244E-4 0.00289989 0.0038097767 0.003244169 0.0046479288 0.007538094 0.005143346 0.0014253348 0.02582908 0.015774288 0.011836043))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (351.26364 589.1504 595.70655 596.53925 710.7385 855.82605 962.324 981.78144 1147.6119 1290.8002 1706.6773 1747.3888 1804.9153))) (setf (chroma::fql rep) (quote (351.26364 589.1504 595.70655 596.53925 710.7385 855.82605 962.324 981.78144 1147.6119 1290.8002 1706.6773 1747.3888 1804.9153))) (setf (chroma::amplitudes rep) (quote (6.220879E-4 0.0015513977 0.0020024495 0.0029449712 0.007101165 0.30900887 0.0011907369 0.0020072896 7.134508E-4 8.1936666E-4 0.022507446 0.0029714902 0.005297269))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (596.4607 708.4883 712.75495 719.0452 802.7683 809.17176 809.46845 876.28455 882.238 900.1161 905.44 986.8368 987.221 996.7985 999.6648 1033.9533 1039.3993 1090.8502 1151.1465 1297.9328 1305.0419 1371.9098 1741.4966 1767.0236 1778.1753 1798.1732 1840.0863))) (setf (chroma::fql rep) (quote (596.4607 708.4883 712.75495 719.0452 802.7683 809.17176 809.46845 876.28455 882.238 900.1161 905.44 986.8368 987.221 996.7985 999.6648 1033.9533 1039.3993 1090.8502 1151.1465 1297.9328 1305.0419 1371.9098 1741.4966 1767.0236 1778.1753 1798.1732 1840.0863))) (setf (chroma::amplitudes rep) (quote (0.0010967422 0.0020470322 0.0018339628 0.06814189 0.001211047 0.0013267386 0.042055775 0.48858753 0.48872143 0.3383062 0.22841417 0.0018755901 0.0022467515 9.0244686E-4 7.101839E-4 6.2736537E-4 8.1938075E-4 8.125779E-4 5.468668E-4 6.471983E-4 6.334323E-4 6.101903E-4 0.01274067 0.01628751 0.011364519 0.013458023 0.01688668))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (511.9584 603.51996 624.1297 707.5543 795.79035 814.58515 871.40375 880.8302 891.44245 1402.8804 1473.9951 1526.2713 1588.5731 1649.0496 1683.5575 1723.9421 1780.3248 1840.0851))) (setf (chroma::fql rep) (quote (511.9584 603.51996 624.1297 707.5543 795.79035 814.58515 871.40375 880.8302 891.44245 1402.8804 1473.9951 1526.2713 1588.5731 1649.0496 1683.5575 1723.9421 1780.3248 1840.0851))) (setf (chroma::amplitudes rep) (quote (0.001760323 6.659876E-4 0.0010560921 0.3511334 0.012228745 0.046212208 0.009263569 0.07909895 0.12371496 0.020916908 0.006213284 0.004983443 0.0015822946 0.007128095 0.0059244023 0.011364519 0.0057005263 0.0014834281))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (597.3998 703.6266 717.5057 875.4748 895.6368 919.47345 1194.3997 1275.9428 1329.1061 1386.7697 1425.0895 1791.3305 1909.2759))) (setf (chroma::fql rep) (quote (597.3998 703.6266 717.5057 875.4748 895.6368 919.47345 1194.3997 1275.9428 1329.1061 1386.7697 1425.0895 1791.3305 1909.2759))) (setf (chroma::amplitudes rep) (quote (0.30361414 0.10777287 0.008536735 0.0032814949 0.004188471 0.0040779356 0.082296774 0.0022912722 6.605075E-4 0.010123503 0.0019347135 0.0035891293 7.870591E-4))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (504.88043 588.7087 590.7021 595.7529 702.4013 711.59644 896.60675 919.1884 1005.47004 1059.9623 1115.5778 1137.2056 1189.6295 1492.671 1502.7879))) (setf (chroma::fql rep) (quote (504.88043 588.7087 590.7021 595.7529 702.4013 711.59644 896.60675 919.1884 1005.47004 1059.9623 1115.5778 1137.2056 1189.6295 1492.671 1502.7879))) (setf (chroma::amplitudes rep) (quote (0.10058413 0.015192063 0.16986777 0.010690817 0.0053886795 0.0060768137 7.581615E-4 0.0012701411 0.082807675 0.011831794 0.04419803 0.0027164054 0.016891577 0.0019003286 0.0011434552))) (setf (chroma::bwl rep) (quote nil)) rep))) :time-struct (list 0.046428573 0.2786281 1.2770861 1.5441157 1.880805 1.9969047 2.1826644 2.321984 2.5425737 2.7515533 2.9953628 3.2740023 3.7964514 4.2144103 5.4218483 5.944297 6.4435263 6.942755) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODEL-DATA" (quote model-data) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "MODIF-FUNC" nil))) (om-make-point 176 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 274 26) (quote "PROCESSING MODEL DATA") "" (om-make-point 248 13) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CR-MODEL" (quote cr-model) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "class name of the vertical structure" "modeltype" (quote fql) (list (list "Frequencies List" (quote (quote fql))) (list "Partials" (quote (quote ptl))) (list "OM Chord" (quote (quote chord))))) (om-load-inputfunmenu1 (quote input-funmenu) "SDIF analysis type" "datatype" (quote 1trc) (list (list "1TRC (additive analysis)" (quote (quote 1trc))) (list "1MRK (chord-seq analysis)" (quote (quote 1mrk))) (list "1HRM (harmonic analysis)" (quote (quote 1hrm))) (list "1FOB (FOF analysis)" (quote (quote 1fob))) (list "1FQ0 (fundamental freq. analysis)" (quote (quote 1fq0))))) (om-load-inputfun (quote input-funbox) "source file" "datasrc" nil) (om-load-inputfun (quote input-funbox) "temporal data" "time-struct" nil))) (om-make-point 158 160) (om-make-point 193 76) (if (find-class (quote cr-model) nil) (make-instance (quote cr-model) :modeltype (quote fql) :datatype (quote 1trc) :datasrc nil :time-struct (list 0.046428573 0.2786281 1.2770861 1.5441157 1.880805 1.9969047 2.1826644 2.321984 2.5425737 2.7515533 2.9953628 3.2740023 3.7964514 4.2144103 5.4218483 5.944297 6.4435263 6.942755) :from-file t)) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 72 36) (quote "ANALYSIS DATA") "" (om-make-point 215 53) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 80 36) (quote "STRUCTURE TEMPS") "" (om-make-point 298 52) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 299 86) (om-make-point 56 57) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 221 85) (om-make-point 55 61) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 4 1 nil 0) (11 0 12 1 nil 0) (16 0 15 3 nil 0) (18 4 15 4 ((om-make-point 316 234) (om-make-point 432 250) (om-make-point 432 316) (om-make-point 378 407)) 0) (18 0 16 0 nil 0) (12 0 16 1 nil 0) (22 0 18 3 nil 0) (21 0 18 4 nil 0))) nil 7.06))
