; OM File Header - Saved 2025/02/06 18:54:32
; (7.06 :patc (om-make-point 141 240) (om-make-point 0 0) (om-make-point 714 913) "non documentation" 183 0 nil "2025/02/06 18:54:32")
; End File Header
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "09_model_grangliss4" (quote ((let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 183 678) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ADD-11" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :aenv) nil nil))) (om-make-point 178 723) (om-make-point 70 50) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 17))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0)) (quote (0.11929 0.25102 0.16707 0.1 0.13655 0.11108 0.11699 0.15959 0.47977 0.94189 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0)) (quote (14.07287 41.88188 24.15989 10.0 17.71711 12.33991 13.58652 22.5796 90.17462 187.73258 200.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) nil)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.5 2.0 3.0 4.0 5.0 6.0 7.0 8.0)) (quote (0.0 1.0 0.5 0.2 0.1 0.05 0.02 0.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 341 666) (om-make-point 129 28) "09_model_grangliss4" "\"09_model_grangliss4\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1))) (om-make-point 225 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND1" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 416 754) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems)) (list nil nil nil 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE1" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (duration sound patch nchnls tables kr resolution evt-test run rescale sr name)" "Keyword input" (quote :name) nil nil))) (om-make-point 308 706) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "Choose from this list (:e-dels :durs :amp :freq :aenv)" "Keyword input" (quote :aenv) nil nil))) (om-make-point 313 544) (om-make-point 86 58) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 500.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.5 2.0 3.0 4.0 5.0 6.0 7.0 8.0)) (quote (0.0 1.0 0.5 0.2 0.1 0.05 0.02 0.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) "x" nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EXPAND-MODEL" (quote expand-model) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MY-MODEL" nil) (om-load-inputfun (quote input-funbox) "no documentation" "CTL-MODEL" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TARGET-CLASS" nil))) (om-make-point 232 625) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "CR-CONTROL" (let ((crctrl (om-load-patch-abs1 "CR-CONTROL" (quote ((let ((box (om-load-boxcall (quote lispfun) "REVERSE1" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 858 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 5))) (om-make-point 896 503) (om-make-point 66 65) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF4") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list nil 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERPOL-VALUE1" (quote interpol-value) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LIST2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "NBSTEPS" nil) (om-load-inputfun (quote input-funbox) "no documentation" "I" nil))) (om-make-point 822 399) (om-make-point 149 63) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE1" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 3) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 3))) (om-make-point 765 324) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux71" (quote t) (quote nil) (om-make-point 771 239) (om-make-point 30 27) 10.0 "10.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1011" (quote t) (quote nil) (om-make-point 806 263) (om-make-point 40 35) 200.0 "200.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux101" (quote t) (quote nil) (om-make-point 513 233) (om-make-point 25 27) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 468 236) (om-make-point 22 27) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11" (om-make-point 114 35) (quote "Relative BPF to control the durations") "" (om-make-point 372 133) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 3) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 3))) (om-make-point 459 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERPOL-VALUE" (quote interpol-value) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LIST2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "NBSTEPS" nil) (om-load-inputfun (quote input-funbox) "no documentation" "I" nil))) (om-make-point 516 345) (om-make-point 149 63) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "DURS" 3 (om-make-point 613 552) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "DURS" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 5))) (om-make-point 590 449) (om-make-point 66 65) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list nil 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NB-EVTS" (quote nb-evts) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 643 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 5))) (om-make-point 672 321) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0)) (quote (0.11929 0.25102 0.16707 0.1 0.13655 0.11108 0.11699 0.15959 0.47977 0.94189 1.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF3") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list nil 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 577 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 5))) (om-make-point 409 166) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.88 23.08 31.07503 40.44 53.42929 63.08 74.31381 80.0 91.32 99.22432)) (quote (10.0 9.407 4.69111 1.42361 0.98889 0.92863 1.18856 0.81552 1.5 2.35667 1.0124)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF2") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom deltapict outport inport show-stems)) (list nil 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 (om-make-point 0 0) 0 0 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "AENV" 2 (om-make-point 154 565) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "AENV" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 109 34) (quote "BPF as amplitude envelope") "" (om-make-point 158 485) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF1" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 0.1 2 3 4 5 6 7 8)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 1 0.5 0.2 0.1 0.05 0.02 0)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 5))) (om-make-point 104 428) (om-make-point 129 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.5 2.0 3.0 4.0 5.0 6.0 7.0 8.0)) (quote (0.0 1.0 0.5 0.2 0.1 0.05 0.02 0.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF1") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems)) (list nil 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux91" (quote t) (quote nil) (om-make-point 90 361) (om-make-point 68 42) (list 0 1.5 2 3 4 5 6 7 8) "(0 1.5 2 3 4 5 6 7 8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux10" (quote t) (quote nil) (om-make-point 166 366) (om-make-point 101 34) (list 0 1 0.5 0.2 0.1 0.05 0.02 0) "(0 1 0.5 0.2 0.1 0.05 0.02 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-VPS-FREQS" (quote get-vps-freqs) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 204 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "FREQ" 1 (om-make-point 216 292) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "FREQ" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "AMP" 0 (om-make-point 917 587) (quote ((om-load-inputfun (quote input-funbox) "out" "out" 0.3))) "AMP" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-modeldatabox "MODEL DATA" (om-make-point 165 6) (om-make-point 505 55)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 1 2 nil 0) (3 0 2 0 nil 0) (0 0 2 1 nil 0) (13 0 2 2 ((om-make-point 662 204) (om-make-point 894 236) (om-make-point 912 302) (om-make-point 912 399)) 1) (25 3 2 3 ((om-make-point 499 59) (om-make-point 942 152) (om-make-point 942 229) (om-make-point 942 399)) 2) (16 2 3 0 nil 0) (4 0 3 1 nil 0) (5 0 3 2 nil 0) (16 2 9 0 nil 0) (7 0 9 1 nil 0) (6 0 9 2 nil 0) (9 0 10 0 nil 0) (15 0 10 1 nil 0) (13 0 10 2 ((om-make-point 662 204) (om-make-point 662 270) (om-make-point 657 312) (om-make-point 606 345)) 1) (25 3 10 3 nil 2) (12 0 11 0 nil 0) (10 0 12 2 nil 0) (25 0 13 0 nil 1) (15 0 14 2 nil 0) (9 0 15 0 nil 0) (19 0 17 0 nil 0) (20 0 19 1 nil 7) (21 0 19 2 nil 7) (25 4 22 0 nil 3) (22 0 23 0 nil 0) (1 0 24 0 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))) (change-class crctrl (find-class (quote cr-ctrl))) (setf (icon crctrl) (list 655 (find-library "OMChroma"))) (setf (compiled? crctrl) nil) crctrl) (quote nil) (om-make-point 251 466) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CR-MODEL" (quote cr-model) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "class name of the vertical structure" "modeltype" (quote fql) (list (list "Frequencies List" (quote (quote fql))) (list "Partials" (quote (quote ptl))) (list "OM Chord" (quote (quote chord))))) (om-load-inputfunmenu1 (quote input-funmenu) "SDIF analysis type" "datatype" (quote 1trc) (list (list "1TRC (additive analysis)" (quote (quote 1trc))) (list "1MRK (chord-seq analysis)" (quote (quote 1mrk))) (list "1HRM (harmonic analysis)" (quote (quote 1hrm))) (list "1FOB (FOF analysis)" (quote (quote 1fob))) (list "1FQ0 (fundamental freq. analysis)" (quote (quote 1fq0))))) (om-load-inputfun (quote input-funbox) "source file" "datasrc" nil) (om-load-inputfun (quote input-funbox) "temporal data" "time-struct" nil))) (om-make-point 88 426) (om-make-point 143 97) (if (find-class (quote cr-model) nil) (make-instance (quote cr-model) :modeltype (quote chroma::fql) :datatype (quote 1trc) :datasrc (list (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (224.0 225.0 368.0 369.7 370.804 476.0 680.0 800.0 1096.0 1200.0 1504.0 1628.0 2136.0 3060.0 3672.0 4160.0 5320.0))) (setf (chroma::fql rep) (quote (224.0 225.0 368.0 369.7 370.804 476.0 680.0 800.0 1096.0 1200.0 1504.0 1628.0 2136.0 3060.0 3672.0 4160.0 5320.0))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (235.788 236.84062 387.366 389.15546 390.31757 501.0495 715.785 842.1 1153.677 1263.15 1583.148 1713.6735 2248.407 3221.0325 3865.239 4378.92 5599.965))) (setf (chroma::fql rep) (quote (235.788 236.84062 387.366 389.15546 390.31757 501.0495 715.785 842.1 1153.677 1263.15 1583.148 1713.6735 2248.407 3221.0325 3865.239 4378.92 5599.965))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (247.5816 248.68688 406.7412 408.62018 409.8404 526.1109 751.587 884.22 1211.3814 1326.33 1662.3336 1799.3877 2360.8675 3382.1416 4058.5699 4597.944 5880.063))) (setf (chroma::fql rep) (quote (247.5816 248.68688 406.7412 408.62018 409.8404 526.1109 751.587 884.22 1211.3814 1326.33 1662.3336 1799.3877 2360.8675 3382.1416 4058.5699 4597.944 5880.063))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (259.3696 260.5275 426.1072 428.07562 429.35394 551.1604 787.372 926.32 1269.0584 1389.48 1741.4816 1885.0612 2473.2744 3543.174 4251.8086 4816.864 6160.028))) (setf (chroma::fql rep) (quote (259.3696 260.5275 426.1072 428.07562 429.35394 551.1604 787.372 926.32 1269.0584 1389.48 1741.4816 1885.0612 2473.2744 3543.174 4251.8086 4816.864 6160.028))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (271.1576 272.36813 445.4732 447.5311 448.86752 576.2099 823.157 968.42 1326.7354 1452.63 1820.6296 1970.7348 2585.6814 3704.2066 4445.048 5035.784 6439.993))) (setf (chroma::fql rep) (quote (271.1576 272.36813 445.4732 447.5311 448.86752 576.2099 823.157 968.42 1326.7354 1452.63 1820.6296 1970.7348 2585.6814 3704.2066 4445.048 5035.784 6439.993))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (282.9456 284.20874 464.8392 466.98654 468.38107 601.2594 858.942 1010.52 1384.4124 1515.78 1899.7776 2056.4082 2698.0884 3865.239 4638.2866 5254.704 6719.958))) (setf (chroma::fql rep) (quote (282.9456 284.20874 464.8392 466.98654 468.38107 601.2594 858.942 1010.52 1384.4124 1515.78 1899.7776 2056.4082 2698.0884 3865.239 4638.2866 5254.704 6719.958))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (294.7392 296.055 484.2144 486.45126 487.9039 626.3208 894.744 1052.64 1442.1168 1578.96 1978.9633 2142.1223 2810.5489 4026.348 4831.6177 5473.728 7000.056))) (setf (chroma::fql rep) (quote (294.7392 296.055 484.2144 486.45126 487.9039 626.3208 894.744 1052.64 1442.1168 1578.96 1978.9633 2142.1223 2810.5489 4026.348 4831.6177 5473.728 7000.056))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (306.5272 307.89563 503.5804 505.9067 507.41745 651.3703 930.529 1094.74 1499.7938 1642.11 2058.111 2227.796 2922.9558 4187.3804 5024.8565 5692.648 7280.021))) (setf (chroma::fql rep) (quote (306.5272 307.89563 503.5804 505.9067 507.41745 651.3703 930.529 1094.74 1499.7938 1642.11 2058.111 2227.796 2922.9558 4187.3804 5024.8565 5692.648 7280.021))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (318.3152 319.73624 522.9464 525.3622 526.931 676.4198 966.314 1136.84 1557.4708 1705.26 2137.2593 2313.4695 3035.3628 4348.413 5218.0957 5911.568 7559.986))) (setf (chroma::fql rep) (quote (318.3152 319.73624 522.9464 525.3622 526.931 676.4198 966.314 1136.84 1557.4708 1705.26 2137.2593 2313.4695 3035.3628 4348.413 5218.0957 5911.568 7559.986))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (330.1032 331.57687 542.3124 544.8176 546.4446 701.4693 1002.099 1178.94 1615.1478 1768.41 2216.4073 2399.1429 3147.7698 4509.4453 5411.3345 6130.488 7839.951))) (setf (chroma::fql rep) (quote (330.1032 331.57687 542.3124 544.8176 546.4446 701.4693 1002.099 1178.94 1615.1478 1768.41 2216.4073 2399.1429 3147.7698 4509.4453 5411.3345 6130.488 7839.951))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (341.8968 343.42313 561.6876 564.28235 565.9674 726.5307 1037.901 1221.06 1672.8522 1831.59 2295.5928 2484.8572 3260.2303 4670.5547 5604.6655 6349.512 8120.049))) (setf (chroma::fql rep) (quote (341.8968 343.42313 561.6876 564.28235 565.9674 726.5307 1037.901 1221.06 1672.8522 1831.59 2295.5928 2484.8572 3260.2303 4670.5547 5604.6655 6349.512 8120.049))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (353.6848 355.26376 581.0536 583.7378 585.48096 751.5802 1073.686 1263.16 1730.5292 1894.74 2374.7408 2570.5305 3372.6372 4831.587 5797.9043 6568.432 8400.014))) (setf (chroma::fql rep) (quote (353.6848 355.26376 581.0536 583.7378 585.48096 751.5802 1073.686 1263.16 1730.5292 1894.74 2374.7408 2570.5305 3372.6372 4831.587 5797.9043 6568.432 8400.014))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (365.4728 367.10437 600.4196 603.1933 604.9945 776.6297 1109.471 1305.26 1788.2062 1957.89 2453.889 2656.204 3485.0442 4992.6196 5991.1436 6787.352 8679.979))) (setf (chroma::fql rep) (quote (365.4728 367.10437 600.4196 603.1933 604.9945 776.6297 1109.471 1305.26 1788.2062 1957.89 2453.889 2656.204 3485.0442 4992.6196 5991.1436 6787.352 8679.979))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (377.2608 378.945 619.7856 622.64875 624.5081 801.6792 1145.256 1347.36 1845.8832 2021.04 2533.0369 2741.8777 3597.4512 5153.652 6184.3823 7006.272 8959.944))) (setf (chroma::fql rep) (quote (377.2608 378.945 619.7856 622.64875 624.5081 801.6792 1145.256 1347.36 1845.8832 2021.04 2533.0369 2741.8777 3597.4512 5153.652 6184.3823 7006.272 8959.944))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (389.0544 390.79126 639.1608 642.11347 644.03095 826.7406 1181.058 1389.48 1903.5877 2084.22 2612.2224 2827.5918 3709.9116 5314.761 6377.7134 7225.296 9240.042))) (setf (chroma::fql rep) (quote (389.0544 390.79126 639.1608 642.11347 644.03095 826.7406 1181.058 1389.48 1903.5877 2084.22 2612.2224 2827.5918 3709.9116 5314.761 6377.7134 7225.296 9240.042))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (400.8424 402.63187 658.5268 661.5689 663.5445 851.7901 1216.843 1431.58 1961.2647 2147.37 2691.3704 2913.2654 3822.3186 5475.7935 6570.952 7444.216 9520.007))) (setf (chroma::fql rep) (quote (400.8424 402.63187 658.5268 661.5689 663.5445 851.7901 1216.843 1431.58 1961.2647 2147.37 2691.3704 2913.2654 3822.3186 5475.7935 6570.952 7444.216 9520.007))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (412.6304 414.4725 677.8928 681.02436 683.05805 876.8396 1252.628 1473.68 2018.9417 2210.52 2770.5183 2998.9387 3934.7256 5636.826 6764.1914 7663.136 9799.972))) (setf (chroma::fql rep) (quote (412.6304 414.4725 677.8928 681.02436 683.05805 876.8396 1252.628 1473.68 2018.9417 2210.52 2770.5183 2998.9387 3934.7256 5636.826 6764.1914 7663.136 9799.972))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (424.4184 426.3131 697.2588 700.47986 702.5716 901.8891 1288.413 1515.78 2076.6187 2273.67 2849.6665 3084.6123 4047.1326 5797.8584 6957.43 7882.056 10079.937))) (setf (chroma::fql rep) (quote (424.4184 426.3131 697.2588 700.47986 702.5716 901.8891 1288.413 1515.78 2076.6187 2273.67 2849.6665 3084.6123 4047.1326 5797.8584 6957.43 7882.056 10079.937))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (436.212 438.15936 716.634 719.9445 722.0944 926.9505 1324.215 1557.9 2134.323 2336.85 2928.852 3170.3264 4159.593 5958.9673 7150.761 8101.08 10360.035))) (setf (chroma::fql rep) (quote (436.212 438.15936 716.634 719.9445 722.0944 926.9505 1324.215 1557.9 2134.323 2336.85 2928.852 3170.3264 4159.593 5958.9673 7150.761 8101.08 10360.035))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep)) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote (448.0 450.0 736.0 739.4 741.608 952.0 1360.0 1600.0 2192.0 2400.0 3008.0 3256.0 4272.0 6120.0 7344.0 8320.0 10640.0))) (setf (chroma::fql rep) (quote (448.0 450.0 736.0 739.4 741.608 952.0 1360.0 1600.0 2192.0 2400.0 3008.0 3256.0 4272.0 6120.0 7344.0 8320.0 10640.0))) (setf (chroma::amplitudes rep) (quote (68.7 54.3 52.8 70.8 48.0 32.4 51.9 78.9 114.6 129.9 144.9 160.2 35.7 16.5 54.6 47.1 9.0))) (setf (chroma::bwl rep) (quote nil)) rep))) :time-struct (list 0 0.0952381 0.1904762 0.2857143 0.3809524 0.47619048 0.5714286 0.6666667 0.7619048 0.85714287 0.95238096 1.0476191 1.1428572 1.2380953 1.3333334 1.4285715 1.5238096 1.6190477 1.7142857 1.8095238 1.9047619) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11111" (om-make-point 100 39) (quote "Begin/End of Reference F0") "" (om-make-point 49 65) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment111" (om-make-point 169 26) (quote "Begin/End of Action Times") "" (om-make-point 247 413) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1))) (om-make-point 326 302) (om-make-point 81 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 390 59) (quote "Simple Granular Glissando (see cs2_tut07) realised as a cr-model") "" (om-make-point 91 11) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 18 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux9" (quote t) (quote nil) (om-make-point 295 269) (om-make-point 29 23) 2.0 "2.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 270 272) (om-make-point 17 29) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 269 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 205 239) (om-make-point 12 22) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 172 239) (om-make-point 12 22) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 106 239) (om-make-point 19 22) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 73 239) (om-make-point 12 22) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 181 118) (om-make-point 22 33) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-SAMPLE" (quote bpf-sample) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "a number" "XMIN" 0) (om-load-inputfun (quote input-funbox) "a number" "XMAX" 10) (om-load-inputfun (quote input-funbox) "an integer" "NBSAMPLES" 10) (om-load-inputfun (quote input-funbox) "a number" "COEFF" 1) (om-load-inputfun (quote input-funbox) "an integer" "NBDEC" 2))) (om-make-point 11 269) (om-make-point 233 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 49 105) (om-make-point 99 24) (list 400.0 800.0) "(400.0 800.0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 2))) (om-make-point 25 140) (om-make-point 105 78) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0)) (quote (400.0 800.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list nil 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "Main_f0" nil))) (om-make-point 79 334) (om-make-point 97 55) nil nil (list (let ((box (om-load-editor-box1 "FQL 2" (quote chroma::fql) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "List of Frequencies" "fql" nil) (om-load-inputfun (quote input-funbox) "List of Amplitudes" "amplitudes" nil) (om-load-inputfun (quote input-funbox) "List of Bandwidths" "bwl" nil))) (om-make-point 142 344) (om-make-point 70 50) (when (find-class (quote chroma::fql) nil) (let ((rep (make-instance (quote chroma::fql)))) (setf (chroma::the-list rep) (quote nil)) (setf (chroma::fql rep) (quote nil)) (setf (chroma::amplitudes rep) (quote nil)) (setf (chroma::bwl rep) (quote nil)) rep)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 0 0))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 77 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-SAMPLE" (quote bpf-sample) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "a number" "XMIN" 0) (om-load-inputfun (quote input-funbox) "a number" "XMAX" 100) (om-load-inputfun (quote input-funbox) "an integer" "NBSAMPLES" 10))) (om-make-point 271 190) (om-make-point 107 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0.3))) (om-make-point 233 277) (om-make-point 67 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 139 424) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 164 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 238 71) (om-make-point 46 59) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10 19 30 41 50 70 75 80 90 100)) (quote (229 152 238 95 210 382 544 119 30 233 30)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF2") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict)) (list nil (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1132" (om-make-point 85 69) (quote "Absolute BPF to control amplitudes (spectral envelope)") "" (om-make-point 288 69) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 29 85) (om-make-point 125 74) (list 0.56 0.5625 0.92 0.92425 0.92701 1.19 1.7 2 2.74 3 3.76 4.07 5.34 7.65 9.18 10.4 13.3) "(0.56 0.5625 0.92 0.92425 0.92701 1.19 1.7 2 2.74 3 3.76 4.07 5.34 7.65 9.18 10.4 13.3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" (list 0.56 0.5625 0.92 0.92425 1.19 1.7 2 2.74)) (om-load-inputfun (quote input-funbox) "second input" "NUM" 400))) (om-make-point 104 182) (om-make-point 53 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 140 23) (quote "List of Frequencies' Scalers") "" (om-make-point 16 51) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 160 28) "no documentation" "Main_f0" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 318 485) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 26 490) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((9 0 0 1 nil 0) (3 0 0 2 nil 0) (8 0 1 0 nil 0) (6 0 2 0 nil 0) (1 0 2 3 nil 0) (2 0 3 0 nil 0) (0 0 4 0 nil 0) (11 0 5 0 nil 1) (8 0 9 0 nil 1) (5 0 9 1 nil 1) (4 1 12 0 nil 0) (4 0 13 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (0 0 1 0 nil 0) (21 0 3 0 nil 0) (5 0 4 0 nil 0) (7 0 5 0 nil 0) (2 0 5 1 nil 0) (9 0 7 0 nil 0) (8 0 7 1 nil 0) (6 0 7 2 nil 0) (25 0 9 3 nil 0) (16 0 9 4 nil 0) (14 0 12 0 nil 0) (3 0 12 1 nil 0) (15 0 16 0 nil 0) (14 0 16 1 nil 0) (12 0 16 2 nil 0) (24 0 22 0 nil 0) (20 0 22 1 nil 0) (19 0 22 2 nil 0) (21 0 22 3 nil 0) (18 0 22 4 nil 0) (17 0 22 5 nil 0) (23 0 24 2 nil 0) (22 0 25 0 nil 0))) nil 7.06))
