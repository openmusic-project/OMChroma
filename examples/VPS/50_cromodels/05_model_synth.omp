; OM File Header - Saved 2025/02/06 18:56:25
; (7.06 :patc (om-make-point 28 128) (om-make-point 0 0) (om-make-point 917 744) "non documentation" 183 0 nil "2025/02/06 18:56:25")
; End File Header
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "05_model_synth" (quote ((let ((box (om-load-editor-box1 "BUZZ-1" (quote buzz-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil))) (om-make-point 587 302) (om-make-point 80 50) (let ((rep (if (find-class (quote buzz-1) nil) (let ((rep (make-instance (quote buzz-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote f0) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 220.0)) (when (member (quote aenv) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (when (member (quote bzl) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzl)) 1)) (when (member (quote bzh) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzh)) 1.0)) (when (member (quote bzm) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzm)) 0.95)) (when (member (quote bzmenv) (get-init-slots-of-class (quote buzz-1)) :key (quote car)) (setf (slot-value rep (quote bzmenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 220.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)) (list 1) (list 1.0) (list 0.95) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil))))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SNARE-1" (quote snare-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil))) (om-make-point 492 356) (om-make-point 72 50) (let ((rep (if (find-class (quote snare-1) nil) (let ((rep (make-instance (quote snare-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 200.0)) (when (member (quote freq) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 20.0)) (when (member (quote inha) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote inha)) 75.0)) (when (member (quote jta) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jta)) 250.0)) (when (member (quote jtf) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 4000.0)) (when (member (quote bw) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 1500.0)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list 200.0) (list 20.0) (list 75.0) (list 250.0) (list 4000.0) (list 1500.0))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "CR-CONTROL" (let ((crctrl (om-load-patch-abs1 "CR-CONTROL" (quote ((let ((box (om-load-boxcall (quote bastype) "aux101" (quote t) (quote nil) (om-make-point 513 233) (om-make-point 25 27) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 468 236) (om-make-point 22 27) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11" (om-make-point 114 35) (quote "Relative BPF to control the durations") "" (om-make-point 337 272) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 3) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 3))) (om-make-point 459 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERPOL-VALUE" (quote interpol-value) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LIST2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "NBSTEPS" nil) (om-load-inputfun (quote input-funbox) "no documentation" "I" nil))) (om-make-point 516 345) (om-make-point 149 63) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "DURS" 3 (om-make-point 613 552) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "DURS" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 5))) (om-make-point 590 449) (om-make-point 66 65) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode picture)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 nil)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NB-EVTS" (quote nb-evts) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 643 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 5))) (om-make-point 742 307) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0)) (quote (0.88319 1.22016 0.79651 0.65467 0.64249 0.5 0.54375 1.11479 2.3746 4.70674 5.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF3") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode picture)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 577 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 5))) (om-make-point 397 202) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.88 23.08 35.56393 40.44 51.77613 63.08 75.2679 80.0 91.32 101.61602)) (quote (10.0 9.407 4.69111 2.14361 0.98889 0.90042 1.18856 1.21319 1.5 2.35667 1.67527)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF2") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (show-stems inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode picture)) (list (quote t) 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0 nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-VPS-AMPS" (quote get-vps-amps) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 84 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "AENV" 2 (om-make-point 154 565) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "AENV" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 109 34) (quote "BPF as amplitude envelope") "" (om-make-point 158 485) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF1" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 0.1 2 3 4 5 6 7 8)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 1 0.5 0.2 0.1 0.05 0.02 0)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 5))) (om-make-point 104 428) (om-make-point 129 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.5 2.0 3.0 4.0 5.0 6.0 7.0 8.0)) (quote (0.0 1.0 0.5 0.2 0.1 0.05 0.02 0.0 0.0)) (quote bpf) 5))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF1") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (show-stems deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode picture)) (list (quote t) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0 nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux91" (quote t) (quote nil) (om-make-point 90 361) (om-make-point 68 42) (list 0 1.5 2 3 4 5 6 7 8) "(0 1.5 2 3 4 5 6 7 8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux10" (quote t) (quote nil) (om-make-point 166 366) (om-make-point 101 34) (list 0 1 0.5 0.2 0.1 0.05 0.02 0) "(0 1 0.5 0.2 0.1 0.05 0.02 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-VPS-FREQS" (quote get-vps-freqs) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 204 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "FREQ" 1 (om-make-point 216 292) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "FREQ" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "AMP" 0 (om-make-point 77 303) (quote ((om-load-inputfun (quote input-funbox) "" "out" 0.3))) "AMP" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-modeldatabox "MODEL DATA" (om-make-point 165 6) (om-make-point 505 55)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 2 3 0 nil 0) (1 0 3 1 nil 0) (0 0 3 2 nil 0) (3 0 4 0 nil 0) (9 0 4 1 nil 0) (7 0 4 2 ((om-make-point 662 204) (om-make-point 662 270) (om-make-point 657 312) (om-make-point 606 345)) 1) (20 3 4 3 nil 2) (6 0 5 0 nil 0) (4 0 6 2 nil 0) (20 0 7 0 nil 1) (9 0 8 2 nil 0) (3 0 9 0 nil 0) (20 4 11 0 nil 3) (14 0 12 0 nil 0) (15 0 14 1 nil 7) (16 0 14 2 nil 7) (20 4 17 0 nil 3) (17 0 18 0 nil 0) (11 0 19 0 nil 0))) 7.06 nil "" (om-make-point 0 0) (om-make-point 985 506)))) (change-class crctrl (find-class (quote cr-ctrl))) (setf (icon crctrl) (list 655 (find-library "OMChroma"))) (setf (compiled? crctrl) nil) crctrl) (quote nil) (om-make-point 444 63) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 311 383) (om-make-point 109 24) "05-model_synth.aif" "\"05-model_synth.aif\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 59 25) (quote "FOF") "" (om-make-point 590 412) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 59 25) (quote "SNARE") "" (om-make-point 500 411) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 59 25) (quote "BUZZ") "" (om-make-point 591 274) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 59 25) (quote "ADD") "" (om-make-point 501 274) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "CR-CONTROL" (let ((crctrl (om-load-patch-abs1 "CR-CONTROL" (quote ((let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 490 108) (om-make-point 12 22) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 2))) (om-make-point 480 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 1 0)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 308 195) (om-make-point 117 93) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 10)) (quote (1 0 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "AMP" 3 (om-make-point 327 304) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "AMP" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-VPS-FREQS" (quote get-vps-freqs) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 184 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "FREQ" 3 (om-make-point 202 171) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "FREQ" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "DURS" 0 (om-make-point 472 212) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "DURS" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-modeldatabox "MODEL DATA" (om-make-point 275 12) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 2 1 0 nil 0) (0 0 1 1 nil 0) (2 0 3 0 nil 0) (7 4 4 0 nil 0) (4 0 5 0 nil 0) (1 0 6 0 nil 0))) 7.06 nil "" (om-make-point 0 0) (om-make-point 926 512)))) (change-class crctrl (find-class (quote cr-ctrl))) (setf (icon crctrl) (list 655 (find-library "OMChroma"))) (setf (compiled? crctrl) nil) crctrl) (quote nil) (om-make-point 396 174) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "CR-CONTROL" (let ((crctrl (om-load-patch-abs1 "CR-CONTROL" (quote ((let ((box (om-load-boxcall (quote lispfun) "GET-VPS-AMPS" (quote get-vps-amps) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 227 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "AMP" 3 (om-make-point 247 225) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "AMP" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-VPS-FREQS" (quote get-vps-freqs) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 146 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "FREQ" 3 (om-make-point 164 237) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "FREQ" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "DURS" 0 (om-make-point 94 180) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "DURS" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-modeldatabox "MODEL DATA" (om-make-point 107 61) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 4 0 0 nil 0) (0 0 1 0 nil 0) (5 4 2 0 nil 0) (2 0 3 0 nil 0) (5 2 4 0 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))) (change-class crctrl (find-class (quote cr-ctrl))) (setf (icon crctrl) (list 655 (find-library "OMChroma"))) (setf (compiled? crctrl) nil) crctrl) (quote nil) (om-make-point 346 174) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 310 66) (om-make-point 56 57) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) "x" nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FOF-1" (quote fof-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numrows" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 593 358) (om-make-point 70 50) (let ((rep (if (find-class (quote fof-1) nil) (let ((rep (make-instance (quote fof-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 500.0)) (when (member (quote f0) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote f0)) 100.0)) (when (member (quote freq) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 609)) (when (member (quote bw) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 77)) (when (member (quote aenv) (get-init-slots-of-class (quote fof-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 80.0 3600.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 220.0) (list 609) (list 77) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 80.0 3600.0 4096.0)) (quote (0.0 1.0 1.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil))))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 241 69) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 164 66) (om-make-point 55 61) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) "x" nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CR-MODEL" (quote cr-model) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "class name of the vertical structure" "modeltype" (quote fql) (list (list "Frequencies List" (quote (quote fql))) (list "Partials" (quote (quote ptl))) (list "OM Chord" (quote (quote chord))))) (om-load-inputfunmenu1 (quote input-funmenu) "SDIF analysis type" "datatype" (quote 1trc) (list (list "1TRC (additive analysis)" (quote (quote 1trc))) (list "1MRK (chord-seq analysis)" (quote (quote 1mrk))) (list "1HRM (harmonic analysis)" (quote (quote 1hrm))) (list "1FOB (FOF analysis)" (quote (quote 1fob))) (list "1FQ0 (fundamental freq. analysis)" (quote (quote 1fq0))))) (om-load-inputfun (quote input-funbox) "source file" "datasrc" nil) (om-load-inputfun (quote input-funbox) "temporal data" "time-struct" nil))) (om-make-point 90 155) (om-make-point 193 76) (if (find-class (quote cr-model) nil) (make-instance (quote cr-model) :modeltype (quote fql) :datatype (quote 1trc) :datasrc nil :time-struct (list 0.046428573 0.2786281 1.2770861 1.5441157 1.880805 1.9969047 2.1826644 2.321984 2.5425737 2.7515533 2.9953628 3.2740023 3.7964514 4.2144103 5.4218483 5.944297 6.4435263 6.942755) :from-file t)) "x" nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "CR-CONTROL" (let ((crctrl (om-load-patch-abs1 "CR-CONTROL" (quote ((let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 637 112) (om-make-point 20 22) (list 4) "(4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 614 112) (om-make-point 21 22) (list 1) "(1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERPOL-VALUE" (quote interpol-value) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST1" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LIST2" (list 4)) (om-load-inputfun (quote input-funbox) "no documentation" "NBSTEPS" 10) (om-load-inputfun (quote input-funbox) "no documentation" "I" 5))) (om-make-point 617 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 2))) (om-make-point 564 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 1 0)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 253 213) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 10)) (quote (1 0 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 1)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 342 188) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 5 10)) (quote (0 0 1)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "AMP" 3 (om-make-point 360 419) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "AMP" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF1" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 6))) (om-make-point 369 355) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF1") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list nil 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-VPS-FREQS" (quote get-vps-freqs) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 184 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NB-EVTS" (quote nb-evts) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 463 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERPOL-VALUE" (quote interpol-value) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST1" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LIST2" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "NBSTEPS" nil) (om-load-inputfun (quote input-funbox) "no documentation" "I" nil))) (om-make-point 355 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "FREQ" 3 (om-make-point 202 171) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "FREQ" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-slotout "DURS" 0 (om-make-point 556 313) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "DURS" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-modeldatabox "MODEL DATA" (om-make-point 275 12) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 2 0 nil 0) (0 0 2 1 nil 0) (9 0 2 2 nil 0) (13 3 2 3 nil 0) (13 2 3 0 nil 0) (2 0 3 1 nil 0) (7 0 6 0 nil 0) (10 0 7 2 nil 0) (13 4 8 0 nil 0) (13 0 9 0 nil 0) (4 2 10 0 nil 0) (5 2 10 1 nil 0) (9 0 10 2 nil 0) (13 3 10 3 nil 0) (8 0 11 0 nil 0) (3 0 12 0 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))) (change-class crctrl (find-class (quote cr-ctrl))) (setf (icon crctrl) (list 655 (find-library "OMChroma"))) (setf (compiled? crctrl) nil) crctrl) (quote nil) (om-make-point 448 174) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many vertical components for init ?" "numcols" 1) (om-load-inputfun (quote input-funbox) "local event offset (in seconds)" "action-time" 0) (om-load-inputfun (quote input-funbox) "doc for user-fun" "user-fun" nil))) (om-make-point 483 298) (om-make-point 73 56) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 1))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 500.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 440.0)) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 256.0 513.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0) (list 1) (list -6.0) (list 440.0) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 207 497) (om-make-point 177 91) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems)) (list nil nil nil 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (duration sound patch nchnls tables kr resolution evt-test run rescale sr name)" "Keyword input" (quote :name) nil nil))) (om-make-point 273 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EXPAND-MODEL" (quote expand-model) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "MY-MODEL" nil) (om-load-inputfun (quote input-funbox) "no documentation" "CTL-MODEL" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TARGET-CLASS" (quote add-1)))) (om-make-point 205 304) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 16 3 nil 0) (18 0 17 0 nil 0) (3 0 18 1 nil 0))) nil 7.06))
