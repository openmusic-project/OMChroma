; OM File Header - Saved 2013/10/29 22:34:29
; (6.0602 :patc (om-make-point 280 10) (om-make-point 140 30) (om-make-point 1264 881) "" 183 0 nil "2013/09/02 14:40:18")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/gs_06_B.aiff" "../../out-files/gs_06_C.aiff" "../../out-files/gs_06_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "gs_06 chord-seq to omchroma class" (quote ((om-load-boxcomment "comment 35" (om-make-point 136 56) (quote "Chords' density compensation") "" (om-make-point 697 516) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 34" (om-make-point 39 30) (quote ":amp") "" (om-make-point 612 485) nil (om-make-color 1.0 0.7482287 0.12633056) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 713 559) (om-make-point 97 30) (list 1 1 1 1 2 2 4) "(1 1 1 1 2 2 4)" nil) (om-load-boxcomment "comment 33" (om-make-point 49 30) (quote ":name") "" (om-make-point 556 599) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 32" (om-make-point 44 30) (quote ":aenv") "" (om-make-point 698 470) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 31" (om-make-point 39 30) (quote ":freq") "" (om-make-point 485 435) nil (om-make-color 0.02375424 0.057632923 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 30" (om-make-point 39 30) (quote ":durs") "" (om-make-point 651 449) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 29" (om-make-point 39 30) (quote ":edel") "" (om-make-point 595 382) nil (om-make-color 1.0 0.011651456 0.047027707) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "ADD-1 3" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 512 513) (om-make-point 173 76) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 7))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0.0 0.0 0.0 0.0 1.0 1.0 2.5))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (list 1.0 1.0 1.0 1.0 1.5 1.5 2.0))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1 1 1 1 2 2 4))) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 261.62555 349.22824 493.8833 659.2551 329.62756 587.3295 523.2511))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0.0 0.0 0.0 0.0 1.0 1.0 2.5) (list 1.0 1.0 1.0 1.0 1.5 1.5 2.0) (list 1 1 1 1 2 2 4) (list 261.62555 349.22824 493.8833 659.2551 329.62756 587.3295 523.2511) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote genfun) "SYNTHESIZE 3" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 504 608) nil nil nil nil 1) (om-load-editor-box1 "gs_06_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 513 670) (om-make-point 171 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gs_06_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gs_06_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 745 376) (om-make-point 71 30) (list 0 10 2 0) "(0 10 2 0)" nil) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 728 409) (om-make-point 84 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote lispfun) "BUTLAST 5" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 560 119) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 655 110) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000 6100 70)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 486 174) (om-make-point 273 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6500 7100 7600) (6400 7400) (7200))) :lonset (quote (0 1000 2500 4500)) :ldur (quote ((1000 1000 1000 1000) (1500 1500) (2000))) :lvel (quote ((100 100 100 100) (100 100) (100))) :loffset (quote ((0 0 0 0) (0 0) (0))) :lchan (quote ((1 1 1 1) (1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 36 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 619 603) (om-make-point 79 30) "gs_06_B" "\"gs_06_B\"" nil) (om-load-boxcall (quote genfun) "OM/ 6" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 682 329) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/ 5" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 588 352) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST 2" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 574 292) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH 3" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 437 417) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F 3" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 500 279) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 6" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 475 351) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 433 42) (om-make-point 274 30) (list (list 6000 6500 7100 7600) (list 6400 7400) (list 7200)) "((6000 6500 7100 7600) (6400 7400) (7200))" nil) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 590 71) (om-make-point 116 30) (list 1000 1500 2000) "(1000 1500 2000)" nil) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 619 314) (om-make-point 53 30) 1000.0 "1000.0" nil) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 700 292) (om-make-point 53 30) 1000.0 "1000.0" nil) (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 708 341) (om-make-point 113 30) (list 0 25 1000 1024) "(0 25 1000 1024)" nil) (om-load-boxwithed1 (quote box-with-win) "chord_comp 3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 509 361) nil nil nil (list (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 45 234) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 47 180) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 47 112) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 55 46) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 70 311) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 4 314) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "chord_comp" nil) (om-load-boxwithed1 (quote box-with-win) "repeat_edel 3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chord_comp" nil) (om-load-inputfun (quote input-funbox) "" "edel" nil))) (om-make-point 546 444) nil nil nil (list (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 119 330) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 73 261) nil nil nil nil 3) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 69 191) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 42 122) nil nil nil nil 1) (om-load-boxin "edel" 1 (om-make-point 52 49) "" "edel" nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 118 119) nil nil nil nil 1) (om-load-boxin "chord_comp" 0 (om-make-point 105 49) "" "chord_comp" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 109 403) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 16 331) nil nil nil 0)) (quote ((1 1 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 5 0 nil 0) (0 0 7 0 nil 0) (1 0 8 0 nil 0))) 1 "repeat_edel" nil) (om-load-boxcall (quote genfun) "FLAT 5" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 677 375) nil nil nil nil 1) (om-load-boxcomment "comment 28" (om-make-point 44 30) (quote "midic") "" (om-make-point 527 69) nil (om-make-color 0.02375424 0.057632923 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 27" (om-make-point 39 30) (quote "onset") "" (om-make-point 584 92) nil (om-make-color 1.0 0.011651456 0.047027707) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 26" (om-make-point 39 30) (quote "dur") "" (om-make-point 598 117) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 25" (om-make-point 60 30) (quote "numcols") "" (om-make-point 458 464) nil (om-make-color 0.9989267 0.059780777 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 24" (om-make-point 44 88) (quote "B") "" (om-make-point 491 109) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 23" (om-make-point 24 737) (quote "|$|$|$|$|$|$|$|$|$|$|$|$|$|$|$|$") "" (om-make-point 836 29) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 22" (om-make-point 43 88) (quote "C") "" (om-make-point 931 106) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 21" (om-make-point 24 737) (quote "|$|$|$|$|$|$|$|$|$|$|$|$|$|$|$|$") "" (om-make-point 407 27) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 20" (om-make-point 44 88) (quote "A") "" (om-make-point 68 104) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 19" (om-make-point 60 30) (quote "numcols") "" (om-make-point 894 462) nil (om-make-color 0.9989267 0.059780777 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 18" (om-make-point 60 30) (quote "numcols") "" (om-make-point 29 462) nil (om-make-color 0.9989267 0.059780777 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 17" (om-make-point 39 30) (quote "dur") "" (om-make-point 1136 127) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 16" (om-make-point 39 30) (quote "onset") "" (om-make-point 1003 115) nil (om-make-color 1.0 0.011651456 0.047027707) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 15" (om-make-point 44 30) (quote "midic") "" (om-make-point 963 71) nil (om-make-color 0.02375424 0.057632923 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 14" (om-make-point 39 30) (quote "dur") "" (om-make-point 169 115) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 39 30) (quote "onset") "" (om-make-point 155 90) nil (om-make-color 1.0 0.011651456 0.047027707) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 12" (om-make-point 44 30) (quote "midic") "" (om-make-point 98 67) nil (om-make-color 0.02375424 0.057632923 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 1010 74) (om-make-point 63 30) (list 0 1000) "(0 1000)" nil) (om-load-boxcomment "comment 6" (om-make-point 49 30) (quote ":name") "" (om-make-point 993 597) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 44 30) (quote ":aenv") "" (om-make-point 1133 468) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 39 30) (quote ":freq") "" (om-make-point 919 433) nil (om-make-color 0.02375424 0.057632923 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 39 30) (quote ":durs") "" (om-make-point 1086 447) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 39 30) (quote ":edel") "" (om-make-point 1030 380) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 947 511) (om-make-point 173 76) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 7))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0.0 0.0 1.0 2.0 2.0 3.0 4.0))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (list 2.0 1.0 1.0 3.0 3.0 2.0 1.0))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 349.22824 659.2551 587.3295 523.2511 329.62756 987.7666 174.61412))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0.0 0.0 1.0 2.0 2.0 3.0 4.0) (list 2.0 1.0 1.0 3.0 3.0 2.0 1.0) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 349.22824 659.2551 587.3295 523.2511 329.62756 987.7666 174.61412) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 939 606) nil nil nil nil 1) (om-load-editor-box1 "gs_06_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 949 668) (om-make-point 171 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gs_06_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gs_06_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 1180 374) (om-make-point 78 30) (list 0 10 10 0) "(0 10 10 0)" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 1163 407) (om-make-point 84 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000 6100 70)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 922 172) (om-make-point 273 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500 7600) (7400) (7200 6400) (8300) (5300))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((2000 1000) (1000) (3000 3000) (2000) (1000))) :lvel (quote ((100 100) (100) (100 100) (100) (100))) :loffset (quote ((0 0) (0) (0 0) (0) (0))) :lchan (quote ((1 1) (1) (1 1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 1 (om-make-point 27 279) (om-make-point 898 437) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 36 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1053 601) (om-make-point 79 30) "gs_06_C" "\"gs_06_C\"" nil) (om-load-boxcall (quote genfun) "OM/ 2" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 1117 327) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 1023 350) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1009 290) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 874 415) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 935 277) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 910 349) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 863 42) (om-make-point 286 30) (list (list 6500 7600) (list 7400) (list 7200 6400) (list 8300) (list 5300)) "((6500 7600) (7400) (7200 6400)(8300)(5300))" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1046 100) (om-make-point 246 30) (list (list 2000 1000) (list 1000) (list 3000) (list 2000) (list 1000)) "((2000 1000)(1000)(3000)(2000)(1000))" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1054 312) (om-make-point 53 30) 1000.0 "1000.0" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1135 290) (om-make-point 53 30) 1000.0 "1000.0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1143 337) (om-make-point 113 30) (list 0 24 1000 1024) "(0 24 1000 1024)" nil) (om-load-boxwithed1 (quote box-with-win) "chord_comp 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 944 359) nil nil nil (list (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 45 234) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 47 180) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 47 112) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 55 46) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 70 311) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 4 314) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "chord_comp" nil) (om-load-boxwithed1 (quote box-with-win) "repeat_edel 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chord_comp" nil) (om-load-inputfun (quote input-funbox) "" "edel" nil))) (om-make-point 981 442) nil nil nil (list (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 119 330) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 73 261) nil nil nil nil 3) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 69 191) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 42 122) nil nil nil nil 1) (om-load-boxin "edel" 1 (om-make-point 52 49) "" "edel" nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 118 119) nil nil nil nil 1) (om-load-boxin "chord_comp" 0 (om-make-point 105 49) "" "chord_comp" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 109 403) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 16 331) nil nil nil 0)) (quote ((1 1 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 5 0 nil 0) (0 0 7 0 nil 0) (1 0 8 0 nil 0))) 1 "repeat_edel" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1112 373) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 248 373) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "repeat_edel" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chord_comp" nil) (om-load-inputfun (quote input-funbox) "" "edel" nil))) (om-make-point 117 442) nil nil nil (list (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 119 284) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 73 220) nil nil nil nil 3) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 69 160) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 42 91) nil nil nil nil 1) (om-load-boxin "edel" 1 (om-make-point 52 26) "" "edel" nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 118 88) nil nil nil nil 1) (om-load-boxin "chord_comp" 0 (om-make-point 105 26) "" "chord_comp" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 185 284) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 16 285) nil nil nil 0)) (quote ((1 1 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 5 0 nil 0) (0 0 7 0 nil 0) (1 0 8 0 nil 0))) 1 "repeat_edel" nil) (om-load-boxwithed1 (quote box-with-win) "chord_comp" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 80 359) nil nil nil (list (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 68 213) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 70 159) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 70 96) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 78 33) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 87 289) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 21 292) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "chord_comp" nil) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 279 339) (om-make-point 113 30) (list 0 25 1000 1024) "(0 25 1000 1024)" nil) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 271 290) (om-make-point 53 30) 1000.0 "1000.0" nil) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 190 312) (om-make-point 53 30) 1000.0 "1000.0" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 161 69) (om-make-point 116 30) (list 1000 1500 2000) "(1000 1500 2000)" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 4 40) (om-make-point 274 30) (list (list 6000 6500 7100 7600) (list 6400 7400) (list 7200)) "((6000 6500 7100 7600) (6400 7400) (7200))" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 46 349) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F 2" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 71 277) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 8 415) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST 4" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 145 290) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/ 4" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 159 350) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/ 3" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 253 327) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 190 601) (om-make-point 79 30) "gs_06_A" "\"gs_06_A\"" nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000 6100 70)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 57 172) (om-make-point 273 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6500 7100 7600) (6400 7400) (7200))) :lonset (quote (0 1000 2500 4500)) :ldur (quote ((1000 1000 1000 1000) (1500 1500) (2000))) :lvel (quote ((100 100 100 100) (100 100) (100))) :loffset (quote ((0 0 0 0) (0 0) (0))) :lchan (quote ((1 1 1 1) (1 1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 36 2)) t nil nil nil) (om-load-boxcall (quote genfun) "DX->X 2" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 226 108) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST 3" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 131 117) nil nil nil nil 1) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 299 407) (om-make-point 84 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 316 374) (om-make-point 71 30) (list 0 10 2 0) "(0 10 2 0)" nil) (om-load-editor-box1 "gs_06_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 84 668) (om-make-point 171 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gs_06_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gs_06_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 75 606) nil nil nil nil 1) (om-load-editor-box1 "ADD-1 2" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 83 511) (om-make-point 173 76) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 7))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0.0 0.0 0.0 0.0 1.0 1.0 2.5))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (list 1.0 1.0 1.0 1.0 1.5 1.5 2.0))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 261.62555 349.22824 493.8833 659.2551 329.62756 587.3295 523.2511))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0.0 0.0 0.0 0.0 1.0 1.0 2.5) (list 1.0 1.0 1.0 1.0 1.5 1.5 2.0) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 261.62555 349.22824 493.8833 659.2551 329.62756 587.3295 523.2511) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-boxcomment "comment 11" (om-make-point 39 30) (quote ":edel") "" (om-make-point 166 380) nil (om-make-color 1.0 0.011651456 0.047027707) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 10" (om-make-point 39 30) (quote ":durs") "" (om-make-point 222 447) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 39 30) (quote ":freq") "" (om-make-point 56 433) nil (om-make-color 0.02375424 0.057632923 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 44 30) (quote ":aenv") "" (om-make-point 269 468) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 49 30) (quote ":name") "" (om-make-point 130 597) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 482 34) (quote "Tutorial Getting Started 06 - Chord-seq to OMChroma Class") "" (om-make-point 56 0) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((20 0 8 1 nil 5) (29 0 8 4 nil 2) (30 0 8 5 nil 3) (2 0 8 6 nil 4) (22 0 8 7 nil 1) (12 0 8 8 nil 0) (8 0 9 0 nil 0) (16 0 9 1 nil 0) (9 0 10 0 nil 0) (27 0 12 1 nil 0) (11 0 12 2 nil 0) (14 0 13 0 nil 2) (24 0 14 1 nil 3) (23 0 15 1 nil 1) (13 0 15 2 nil 2) (24 0 15 3 nil 3) (15 3 17 0 nil 3) (26 0 17 1 nil 0) (19 0 18 0 nil 2) (25 0 18 1 nil 0) (15 2 19 0 nil 2) (22 0 20 0 nil 1) (15 1 21 0 nil 1) (21 0 22 0 nil 1) (21 0 28 0 nil 1) (28 0 29 0 nil 1) (18 0 29 1 nil 2) (17 0 30 0 nil 3) (64 0 54 1 nil 5) (73 0 54 4 nil 2) (74 0 54 5 nil 3) (66 0 54 7 nil 1) (58 0 54 8 nil 0) (54 0 55 0 nil 0) (60 0 55 1 nil 0) (55 0 56 0 nil 0) (71 0 58 1 nil 0) (57 0 58 2 nil 0) (67 0 59 1 nil 1) (48 0 59 2 nil 2) (68 0 59 3 nil 3) (59 3 61 0 nil 3) (70 0 61 1 nil 0) (63 0 62 0 nil 2) (69 0 62 1 nil 0) (59 2 63 0 nil 2) (66 0 64 0 nil 1) (59 1 65 0 nil 1) (65 0 66 0 nil 1) (65 0 72 0 nil 1) (72 0 73 0 nil 1) (62 0 73 1 nil 2) (61 0 74 0 nil 3) (88 0 75 0 nil 3) (77 0 76 0 nil 1) (87 0 76 1 nil 2) (84 0 77 0 nil 1) (84 0 83 0 nil 1) (90 1 84 0 nil 1) (83 0 85 0 nil 1) (90 2 86 0 nil 2) (86 0 87 0 nil 2) (80 0 87 1 nil 0) (90 3 88 0 nil 3) (79 0 88 1 nil 0) (82 0 90 1 nil 1) (92 0 90 2 nil 2) (81 0 90 3 nil 3) (81 0 91 1 nil 3) (91 0 92 0 nil 2) (78 0 93 1 nil 0) (94 0 93 2 nil 0) (96 0 95 0 nil 0) (97 0 96 0 nil 0) (89 0 96 1 nil 0) (85 0 97 1 nil 5) (76 0 97 4 nil 2) (75 0 97 5 nil 3) (83 0 97 7 nil 1) (93 0 97 8 nil 0))) nil 6.0602))
