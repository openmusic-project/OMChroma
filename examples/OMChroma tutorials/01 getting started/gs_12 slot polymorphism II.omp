; OM File Header - Saved 2019/07/02 10:53:49
; (6.15 :patc (om-make-point 13 138) (om-make-point 607 207) (om-make-point 1169 809) "non documentation" 183 0 nil "2019/07/02 10:53:49")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../out-files/t12b.aiff\""))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "gs_12 slot polymorphism II" (quote ((let ((box (om-load-editor-box1 "t12b.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 674 542) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "t12b" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "t12b.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1055 242) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 936 185) (om-make-point 73 30) (list 0 2 100) "(0 2 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 990 215) (om-make-point 110 30) (list 0 10 4 2 0.5 0) "(0 10 4 2 0.5 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 948 272) (om-make-point 105 84) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3 3" (om-make-point 93 50) (quote "Case 2 b") "" (om-make-point 769 144) nil (om-make-color 23/85 31/255 224/255) (om-make-font "Geneva" 18.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 76 50) (quote "Case 4") "" (om-make-point 714 227) nil (om-make-color 23/85 31/255 224/255) (om-make-font "Geneva" 18.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ROUND" (quote round) (quote ((om-load-inputfun (quote input-funbox) "M" "M" nil))) (om-make-point 305 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 366 226) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 356 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 415 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALEANUM 2" (quote aleanum) (quote ((om-load-inputfun (quote input-funbox) "min" "HIGH" 0) (om-load-inputfun (quote input-funbox) "max" "LOW" 0))) (om-make-point 402 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4 2" (quote t) (quote nil) (om-make-point 383 184) (om-make-point 38 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5 2" (quote t) (quote nil) (om-make-point 442 185) (om-make-point 38 30) 5.0 "5.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 628 281) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 3))) (om-make-point 540 321) (om-make-point 113 56) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0)) (quote (5.0 4.5 4.0 3.5 3.0 2.5 2.0 1.5 1.0 0.5)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 717 174) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 671 175) (om-make-point 39 30) -25 "-25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3 7" (om-make-point 92 50) (quote "Case 5 a") "" (om-make-point 623 129) nil (om-make-color 23/85 31/255 224/255) (om-make-font "Geneva" 18.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3 5" (om-make-point 93 50) (quote "Case 2 a") "" (om-make-point 380 135) nil (om-make-color 23/85 31/255 224/255) (om-make-font "Geneva" 18.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 524 517) (om-make-point 55 30) "t12b" "\"t12b\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 482 547) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2 2" (quote t) (quote nil) (om-make-point 467 262) (om-make-point 191 30) (list 5 4.5 4 3.5 3 2.5 2 1.5 1 0.5) "(5 4.5 4 3.5 3 2.5 2 1.5 1 0.5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3 2" (om-make-point 76 50) (quote "Case 3") "" (om-make-point 464 225) nil (om-make-color 23/85 31/255 224/255) (om-make-font "Geneva" 18.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) 1 nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) -6.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 440.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) (list (quote make-cs-table) (quote (quote gen07)) (list (quote list) 0 2048 4096) (list (quote list) 0 100 0) 1 "?" 4097) nil))) (om-make-point 35 382) (om-make-point 995 124) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 100))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 2.2836805 0.51017225 1.0152048 1.1417639 2.4758559 0.48936665 3.2959204 0.53873897 3.5076685 0.36299586 0.6207013 2.951253 2.5135506 3.4659815 2.459454 0.08318901 2.2436018 1.9114858 4.179674 4.663735 2.7304626 3.8475204 3.6009593 0.011327863 4.3314905 2.135859 4.396944 1.1757702 1.9349396 3.089829 2.4209953 3.3047529 1.8383235))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0)) (quote (5.0 4.5 4.0 3.5 3.0 2.5 2.0 1.5 1.0 0.5)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (list -1.4732304 -5.5825195 -11.4743395 -17.963927 -23.824 -28.07306 -30.187952 -30.188357 -28.577614 -26.16423 -23.819918 -22.24421 -21.799542 -22.456553 -23.855227 -25.453978 -26.71538 -27.270686 -27.016072 -26.11786 -24.933287 -23.878647 -23.290408 -23.323512 -23.916188 -24.827319 -25.729048 -26.320786 -26.426236 -26.043038 -25.331954 -24.552975 -23.972634 -23.774764 -24.00398 -24.558739 -25.233489 -25.793307 -26.054398 -25.943312 -25.516156 -24.933325 -24.400353 -24.096322 -24.114468 -24.43444 -24.934163 -25.435582 -25.767479 -25.823359 -25.595067 -25.171677 -24.705424 -24.357438 -24.24249 -24.391545 -24.744189 -25.172497 -25.527047 -25.688736 -25.608473 -25.32167 -24.933386 -24.580145 -24.382184 -24.402771 -24.62826 -24.975068 -25.320405 -25.54555 -25.57646 -25.407935 -25.103474 -24.771586 -24.527276 -24.452359 -24.568209 -24.829993 -25.143786 -25.400134 -25.512099 -25.444626 -25.225327 -24.933476 -24.671456 -24.528965 -24.552405 -24.729893 -24.996689 -25.2587 -25.425574 -25.44177 -25.304957 -25.065655 -24.808699 -24.623227 -24.571839 -24.669545 -24.879546 -25.127007))) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 291.56848 411.6679 1129.4281 1622.9833 895.7987 1622.488 1250.4773 683.6098 1181.2935 1990.5108 1378.6963 1091.8237 1708.1079 1037.4708 1938.9891 325.3143 682.37085 858.4711 370.4563 579.81904 1443.8627 411.83637 1045.4585 657.04224 822.70295 220.7367 1799.1558 282.3305 1816.4341 713.23835 814.28876 1404.7463 1252.9619 483.57495 539.5775 793.5117 1067.419 946.6862 1013.44965 387.05402 737.4162 1353.4229 1964.9268 940.20795 415.9144 804.7954 1425.9519 605.6028 644.0144 695.734 1394.6694 887.99286 1902.9494 1476.0856 1496.3148 1464.6303 1413.0036 1962.5613 1489.3108 689.9074 1997.164 1497.0595 1368.3475 727.92737 732.11957 1056.7505 648.3162 1253.3853 743.78504 1551.2662 1087.9741 1302.486 866.1903 1774.4884 331.85547 314.7861 521.5445 1953.3574 287.33316 1433.7402 1761.717 1571.6417 506.34152 710.4023 311.34857 773.0943 1780.8893 1015.6945 1396.3281 1241.8284 320.80457 1490.4713 564.7158 1275.0286 1839.9026 219.6136 1739.4153 1072.0639 530.7009 1126.34))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 2.2836805 0.51017225 1.0152048 1.1417639 2.4758559 0.48936665 3.2959204 0.53873897 3.5076685 0.36299586 0.6207013 2.951253 2.5135506 3.4659815 2.459454 0.08318901 2.2436018 1.9114858 4.179674 4.663735 2.7304626 3.8475204 3.6009593 0.011327863 4.3314905 2.135859 4.396944 1.1757702 1.9349396 3.089829 2.4209953 3.3047529 1.8383235 2.2836805 0.51017225 1.0152048 1.1417639 2.4758559 0.48936665 3.2959204 0.53873897 3.5076685 0.36299586 0.6207013 2.951253 2.5135506 3.4659815 2.459454 0.08318901 2.2436018 1.9114858 4.179674 4.663735 2.7304626 3.8475204 3.6009593 0.011327863 4.3314905 2.135859 4.396944 1.1757702 1.9349396 3.089829 2.4209953 3.3047529 1.8383235 2.2836805 0.51017225 1.0152048 1.1417639 2.4758559 0.48936665 3.2959204 0.53873897 3.5076685 0.36299586 0.6207013 2.951253 2.5135506 3.4659815 2.459454 0.08318901 2.2436018 1.9114858 4.179674 4.663735 2.7304626 3.8475204 3.6009593 0.011327863 4.3314905 2.135859 4.396944 1.1757702 1.9349396 3.089829 2.4209953 3.3047529 1.8383235 2.2836805) (list 5.0 4.9545455 4.909091 4.8636365 4.8181815 4.772727 4.7272725 4.681818 4.6363635 4.590909 4.5454545 4.5 4.4545455 4.409091 4.3636365 4.318182 4.272727 4.2272725 4.181818 4.1363635 4.090909 4.0454545 4.0 3.9545455 3.909091 3.8636365 3.8181818 3.7727273 3.7272728 3.6818183 3.6363638 3.5909093 3.5454545 3.5 3.4545455 3.4090908 3.3636363 3.3181818 3.2727273 3.2272725 3.181818 3.1363635 3.090909 3.0454545 3.0 2.9545453 2.9090908 2.8636363 2.8181818 2.7727273 2.7272728 2.681818 2.6363635 2.590909 2.5454545 2.5 2.4545455 2.4090908 2.3636363 2.3181818 2.2727273 2.2272728 2.1818183 2.1363635 2.090909 2.0454545 2.0 1.9545455 1.9090909 1.8636364 1.8181819 1.7727273 1.7272728 1.6818181 1.6363636 1.590909 1.5454545 1.5 1.4545454 1.4090909 1.3636364 1.3181818 1.2727273 1.2272728 1.1818181 1.1363636 1.0909091 1.0454545 1.0 0.95454544 0.90909094 0.8636364 0.8181818 0.77272726 0.7272727 0.6818182 0.6363636 0.59090907 0.54545457 0.54545457) (list -1.4732304 -5.5825195 -11.4743395 -17.963927 -23.824 -28.07306 -30.187952 -30.188357 -28.577614 -26.16423 -23.819918 -22.24421 -21.799542 -22.456553 -23.855227 -25.453978 -26.71538 -27.270686 -27.016072 -26.11786 -24.933287 -23.878647 -23.290408 -23.323512 -23.916188 -24.827319 -25.729048 -26.320786 -26.426236 -26.043038 -25.331954 -24.552975 -23.972634 -23.774764 -24.00398 -24.558739 -25.233489 -25.793307 -26.054398 -25.943312 -25.516156 -24.933325 -24.400353 -24.096322 -24.114468 -24.43444 -24.934163 -25.435582 -25.767479 -25.823359 -25.595067 -25.171677 -24.705424 -24.357438 -24.24249 -24.391545 -24.744189 -25.172497 -25.527047 -25.688736 -25.608473 -25.32167 -24.933386 -24.580145 -24.382184 -24.402771 -24.62826 -24.975068 -25.320405 -25.54555 -25.57646 -25.407935 -25.103474 -24.771586 -24.527276 -24.452359 -24.568209 -24.829993 -25.143786 -25.400134 -25.512099 -25.444626 -25.225327 -24.933476 -24.671456 -24.528965 -24.552405 -24.729893 -24.996689 -25.2587 -25.425574 -25.44177 -25.304957 -25.065655 -24.808699 -24.623227 -24.571839 -24.669545 -24.879546 -25.127007) (list 291.56848 411.6679 1129.4281 1622.9833 895.7987 1622.488 1250.4773 683.6098 1181.2935 1990.5108 1378.6963 1091.8237 1708.1079 1037.4708 1938.9891 325.3143 682.37085 858.4711 370.4563 579.81904 1443.8627 411.83637 1045.4585 657.04224 822.70295 220.7367 1799.1558 282.3305 1816.4341 713.23835 814.28876 1404.7463 1252.9619 483.57495 539.5775 793.5117 1067.419 946.6862 1013.44965 387.05402 737.4162 1353.4229 1964.9268 940.20795 415.9144 804.7954 1425.9519 605.6028 644.0144 695.734 1394.6694 887.99286 1902.9494 1476.0856 1496.3148 1464.6303 1413.0036 1962.5613 1489.3108 689.9074 1997.164 1497.0595 1368.3475 727.92737 732.11957 1056.7505 648.3162 1253.3853 743.78504 1551.2662 1087.9741 1302.486 866.1903 1774.4884 331.85547 314.7861 521.5445 1953.3574 287.33316 1433.7402 1761.717 1571.6417 506.34152 710.4023 311.34857 773.0943 1780.8893 1015.6945 1396.3281 1241.8284 320.80457 1490.4713 564.7158 1275.0286 1839.9026 219.6136 1739.4153 1072.0639 530.7009 1126.34) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 100.0 198.0 296.0 394.0)) (quote (0.0 10.0 4.0 2.0 0.5 0.0)) (quote gen07) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 824 360) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment211" (om-make-point 892 96) (quote "SEMANTICS OF THE POLYMORPHISM OF A MATRIX SLOT OF TYPE \"NUMBER\"$                                          CASE 4 AND 5") "" (om-make-point 54 0) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 24.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 626 176) (om-make-point 38 30) 0.6 "0.6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sinx/x" (om-load-patch-abs1 "sinx/x" (quote ((let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 192 299) (om-make-point 203 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 229 166) (om-make-point 72 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "max" 3 (om-make-point 215 51) "" "max" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 175 244) (om-make-point 119 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "min" 2 (om-make-point 304 51) "" "min" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 93 85) (om-make-point 47 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 132 14) "no documentation" "factor" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1))) (om-make-point 94 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SIN" (quote sin) (quote ((om-load-inputfun (quote input-funbox) "RADIANS" "RADIANS" nil))) (om-make-point 52 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 61 17) "no documentation" "x" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 59 338) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (4 0 0 1 nil 0) (2 0 1 0 nil 0) (4 0 1 1 nil 0) (7 0 3 0 nil 0) (1 0 3 1 nil 0) (9 0 5 0 nil 0) (6 0 5 1 nil 0) (8 0 7 0 nil 0) (5 0 7 1 ((om-make-point 115 118) (om-make-point 141 139) (om-make-point 141 168) (om-make-point 108 179)) 0) (5 0 8 0 nil 0) (0 0 10 0 nil 0))) 6.15 nil "" (om-make-point 820 85) (om-make-point 435 472)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "x" 0) (om-load-inputfun (quote input-funbox) "no documentation" "factor" nil) (om-load-inputfun (quote input-funbox) "" "min" nil) (om-load-inputfun (quote input-funbox) "" "max" nil))) (om-make-point 666 231) nil (list nil) "l" "sinx/x"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 721 262) (om-make-point 53 31) (quote sin) "sin" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 832 185) (om-make-point 59 30) 2000.0 "2000.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 773 184) (om-make-point 52 30) 200.0 "200.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALEANUM" (quote aleanum) (quote ((om-load-inputfun (quote input-funbox) "min" "HIGH" 0) (om-load-inputfun (quote input-funbox) "max" "LOW" 0))) (om-make-point 792 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 805 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 88 75) (quote "numcols$ ---->") "" (om-make-point 112 293) nil (om-make-color 23/85 31/255 224/255) (om-make-font "Geneva" 18.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 168 332) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((21 0 0 0 nil 0) (2 0 4 1 nil 0) (3 0 4 2 nil 0) (1 0 4 3 nil 0) (9 0 7 0 nil 0) (34 0 9 0 nil 1) (8 0 9 1 nil 0) (11 0 10 0 nil 2) (7 0 10 1 nil 0) (12 0 11 0 nil 0) (13 0 11 1 nil 0) (22 0 15 2 nil 0) (14 0 15 3 nil 0) (24 0 21 0 nil 0) (20 0 21 1 nil 0) (34 0 24 1 nil 1) (10 0 24 4 nil 2) (15 0 24 5 nil 0) (27 0 24 6 nil 0) (32 0 24 7 nil 0) (4 0 24 8 nil 0) (26 0 27 1 nil 0) (17 0 27 2 nil 0) (16 0 27 3 nil 0) (30 0 31 0 nil 0) (29 0 31 1 nil 0) (31 0 32 0 nil 2) (34 0 32 1 nil 1))) nil 6.15))