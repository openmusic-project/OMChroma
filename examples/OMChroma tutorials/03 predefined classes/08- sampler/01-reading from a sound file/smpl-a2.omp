; OM File Header - Saved 2013/10/29 22:34:30
; (6.0602 :patc (om-make-point 226 10) (om-make-point 272 274) (om-make-point 1170 495) "" 183 0 "2012/12/02 12:39:17" "2013/08/31 17:51:18")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../out-files/smpl-a1_B.aiff" "../../../../in-files/count.aiff" "../../../../out-files/smpl-a2_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "smpl-a2" (quote ((om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 727 153) (om-make-point 41 40) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1000 162) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 26" (om-make-point 49 51) (quote "f0 $max") "" (om-make-point 664 115) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 665 161) (om-make-point 69 30) (list 1 -1 -1) "(1 -1 -1)" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 623 99) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 958 162) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-boxcomment "comment 21" (om-make-point 37 34) (quote "jta") "" (om-make-point 827 137) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 832 163) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 16" (om-make-point 37 51) (quote "f0$dur") "" (om-make-point 797 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 801 162) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 14" (om-make-point 37 51) (quote "f0 $jta") "" (om-make-point 772 117) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 771 162) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 689 84) (om-make-point 64 30) (list 1 -1 1) "(1 -1 1)" nil) (om-load-boxcomment "comment 13" (om-make-point 44 88) (quote "B") "" (om-make-point 546 57) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 12" (om-make-point 51 34) (quote "durs") "" (om-make-point 618 75) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 616 132) nil nil nil "C#ed") (om-load-boxcomment "comment 10" (om-make-point 31 27) (quote "f0") "" (om-make-point 701 59) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 48 34) (quote "skip") "" (om-make-point 859 136) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 862 163) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 7" (om-make-point 48 34) (quote "aenv") "" (om-make-point 902 131) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 902 153) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcomment "comment 6" (om-make-point 48 34) (quote "win") "" (om-make-point 958 136) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 48 34) (quote "wrap") "" (om-make-point 989 136) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-a1_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 552 190) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-a1_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-a1_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 875 640) (om-make-point 298 388) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 100) (om-make-point 91 30) "smpl-a1_B" "\"smpl-a1_B\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 540 120) (om-make-point 51 67) nil nil "Synt") (om-load-boxcomment "comment 4" (om-make-point 41 34) (quote "afil") "" (om-make-point 932 36) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-A1" (quote smpl-a1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0max" (quote :f0max) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0env" (quote :f0env) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0jta" (quote :f0jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0dur" (quote :f0dur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wrap" (quote :wrap) nil nil))) (om-make-point 618 200) (om-make-point 390 62) (let ((rep (if (find-class (quote smpl-a1) nil) (let ((rep (make-instance (quote smpl-a1) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 4 8))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote durs)) 4)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0)) (list 1 -1 1))) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0max)) (list 1 -1 -1))) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote afil)) (om-make-pathname :directory (quote (:absolute "_documentation" "beta" "in-files")) :device nil :host nil :name "count" :type "aiff"))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote skip)) 2)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a1)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 4 8) (list 4 4 4) (list 0.0 0.0 0.0) (list 1 -1 1) (list 1 -1 -1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0 0 0) (list 0 0 0) (list 0 0 0) (list (om-make-pathname :directory (quote (:absolute "_documentation" "beta" "in-files")) :device nil :host nil :name "count" :type "aiff") (om-make-pathname :directory (quote (:absolute "_documentation" "beta" "in-files")) :device nil :host nil :name "count" :type "aiff") (om-make-pathname :directory (quote (:absolute "_documentation" "beta" "in-files")) :device nil :host nil :name "count" :type "aiff")) (list 2 2 2) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.1 0.1 0.1) (list 1 1 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote genfun) "INFILE 2" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 937 91) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 914 61) (om-make-point 83 30) "count.aiff" "\"count.aiff\"" nil) (om-load-boxcomment "comment 3" (om-make-point 44 45) (quote "f0$env") "" (om-make-point 729 114) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 86 34) (quote "SMPL-A1") "" (om-make-point 749 267) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SMPL-A2" (quote smpl-a2) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0" (quote :f0) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0max" (quote :f0max) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0env" (quote :f0env) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0jta" (quote :f0jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "f0dur" (quote :f0dur) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "afil" (quote :afil) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "skip" (quote :skip) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "win" (quote :win) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "wrap" (quote :wrap) nil nil))) (om-make-point 105 208) (om-make-point 393 62) (let ((rep (if (find-class (quote smpl-a2) nil) (let ((rep (make-instance (quote smpl-a2) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 4 8))) (when (member (quote durs) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote durs)) 4)) (when (member (quote amp) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote amp)) 0.0)) (when (member (quote f0) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0)) (list 1 -1 1))) (when (member (quote f0max) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0max)) (list 1 -1 -1))) (when (member (quote f0env) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0env)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote f0jta) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0jta)) 0)) (when (member (quote f0dur) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote f0dur)) 0)) (when (member (quote jta) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote jta)) 0)) (when (member (quote afil) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote afil)) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "count" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "count.aiff") (set-tonalite newobj nil) newobj))) (when (member (quote skip) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote skip)) 0.2)) (when (member (quote aenv) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (when (member (quote win) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote win)) 0.1)) (when (member (quote wrap) (get-init-slots-of-class (quote smpl-a2)) :key (quote car)) (setf (slot-value rep (quote wrap)) 1)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 4 8) (list 4 4 4) (list 0.0 0.0 0.0) (list 1 -1 1) (list 1 -1 -1) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0 0 0) (list 0 0 0) (list 0 0 0) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "count" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "count.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "count" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "count.aiff") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "count" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "count.aiff") (set-tonalite newobj nil) newobj)) (list 0.2 0.2 0.2) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)) (list 0.1 0.1 0.1) (list 1 1 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 500 280) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil))))) nil nil nil t) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 154 87) (om-make-point 64 30) (list 1 -1 1) "(1 -1 1)" nil) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 345 150) (om-make-point 38 30) 0.2 "0.2" nil) (om-load-boxcomment "comment 30" (om-make-point 49 51) (quote "f0 $max") "" (om-make-point 156 112) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 150 154) (om-make-point 54 29) (list 1 -1 -1) "(1 -1 -1)" nil) (om-load-boxcomment "comment 29" (om-make-point 44 88) (quote "A") "" (om-make-point 29 55) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "count.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 335 66) (om-make-point 83 46) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "count" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "count.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil) (om-load-boxcomment "comment 28" (om-make-point 51 34) (quote "durs") "" (om-make-point 99 68) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 104 92) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 97 125) nil (list 3 (list 0 4 8)) nil "C#ed") (om-load-boxcomment "comment 27" (om-make-point 31 27) (quote "f0") "" (om-make-point 164 61) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 25" (om-make-point 48 34) (quote "skip") "" (om-make-point 337 123) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 24" (om-make-point 48 34) (quote "aenv") "" (om-make-point 382 120) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 428 151) (om-make-point 38 30) 0.1 "0.1" nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 378 142) (om-make-point 46 43) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 99 100)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment 23" (om-make-point 48 34) (quote "win") "" (om-make-point 427 123) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 471 151) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 22" (om-make-point 48 34) (quote "wrap") "" (om-make-point 459 123) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "smpl-a2_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 33 183) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "smpl-a2_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "smpl-a2_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 221 625) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 2" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 104) (om-make-point 91 30) "smpl-a2_A" "\"smpl-a2_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 31 69) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "fm-1" nil))) (om-make-point 21 113) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "_workspace" "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "smpl-a2_A" :type "aiff")) nil "Synt") (om-load-boxcomment "comment 20" (om-make-point 41 34) (quote "afil") "" (om-make-point 357 43) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 208 144) (om-make-point 41 40) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 33 66 100)) (quote (0 0 10 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 255 151) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 19" (om-make-point 37 51) (quote "f0$jta") "" (om-make-point 252 108) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 284 151) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 18" (om-make-point 37 51) (quote "f0$dur") "" (om-make-point 280 107) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 316 151) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 17" (om-make-point 37 34) (quote "jta") "" (om-make-point 314 122) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 11" (om-make-point 44 45) (quote "f0$env") "" (om-make-point 211 105) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 15" (om-make-point 86 34) (quote "SMPL-A2") "" (om-make-point 259 270) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 28 253) (quote "|$|$|$|$|$$$") "" (om-make-point 504 26) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 151 34) (quote "Tutorial SMPL-A2") "" (om-make-point 56 2) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((4 0 15 0 nil 3) (12 0 15 1 nil 1) (24 0 23 0 nil 0) (26 0 24 0 nil 2) (15 0 26 1 nil 1) (15 1 26 4 nil 2) (4 0 26 5 nil 3) (12 0 26 7 nil 1) (3 0 26 8 nil 1) (0 0 26 9 nil 0) (11 0 26 10 nil 3) (9 0 26 11 nil 1) (7 0 26 12 nil 1) (27 0 26 13 nil 1) (18 0 26 14 nil 5) (20 0 26 15 nil 2) (5 0 26 16 nil 3) (1 0 26 17 nil 5) (28 0 27 0 nil 0) (40 0 31 1 nil 0) (40 1 31 4 nil 0) (39 0 31 5 nil 3) (32 0 31 7 nil 1) (35 0 31 8 nil 4) (52 0 31 9 nil 3) (53 0 31 10 nil 1) (55 0 31 11 nil 1) (57 0 31 12 nil 2) (37 0 31 13 nil 2) (33 0 31 14 nil 4) (45 0 31 15 nil 2) (44 0 31 16 nil 0) (47 0 31 17 nil 1) (39 0 40 0 nil 3) (32 0 40 1 nil 1) (50 0 49 0 nil 0) (31 0 50 0 nil 2))) nil 6.0602))
