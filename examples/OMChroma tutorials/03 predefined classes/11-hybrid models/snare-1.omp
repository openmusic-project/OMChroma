; OM File Header - Saved 2013/10/29 22:34:30
; (6.0602 :patc (om-make-point 226 10) (om-make-point 100 141) (om-make-point 1055 763) "" 183 0 "2012/12/30 18:47:31" "2013/09/02 15:40:06")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../out-files/snare-1_G.aiff" "../../../out-files/snare-1_H.aiff" "../../../out-files/snare-1_I.aiff" "../../../out-files/snare-1_C.aiff" "../../../out-files/snare-1_F.aiff" "../../../out-files/snare-1_B.aiff" "../../../out-files/snare-1_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "snare-1" (quote ((om-load-boxcomment "comment 81" (om-make-point 1050 62) (quote "____________________________________________") "" (om-make-point 16 207) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 80" (om-make-point 1050 62) (quote "____________________________________________") "" (om-make-point 20 415) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 79" (om-make-point 25 207) (quote "|$|$|$|$$") "" (om-make-point 343 470) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 78" (om-make-point 44 88) (quote "G") "" (om-make-point 24 476) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 77" (om-make-point 51 34) (quote "durs") "" (om-make-point 78 473) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 9" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 79 535) nil (list 3 (list 0 1 2)) nil "C#ed") (om-load-boxcomment "comment 76" (om-make-point 47 30) (quote "jta") "" (om-make-point 159 471) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 75" (om-make-point 40 31) (quote "amp") "" (om-make-point 127 539) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "snare-1_G.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 18 607) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "snare-1_G" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snare-1_G.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 410 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 9" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 88) (om-make-point 90 30) "snare-1_G" "\"snare-1_G\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 17 538) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "snare-1_G" :type "aiff")) nil "Synt") (om-load-editor-box1 "SNARE-1 9" (quote snare-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "inha" (quote :inha) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 74 606) (om-make-point 266 62) (let ((rep (if (find-class (quote snare-1) nil) (let ((rep (make-instance (quote snare-1) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2))) (when (member (quote durs) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0)) (when (member (quote freq) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 25)) (when (member (quote inha) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote inha)) 0)) (when (member (quote jta) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jta)) (list 10 100 500))) (when (member (quote jtf) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 4000)) (when (member (quote bw) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 2000)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2) (list 1 1 1) (list 0 0 0) (list 25 25 25) (list 0 0 0) (list 10 100 500) (list 4000 4000 4000) (list 2000 2000 2000))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 74" (om-make-point 40 31) (quote "inha") "" (om-make-point 210 539) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 73" (om-make-point 40 31) (quote "jtf") "" (om-make-point 251 539) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 72" (om-make-point 40 31) (quote "bw") "" (om-make-point 300 539) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 63" (quote t) (quote nil) (om-make-point 88 497) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 62" (quote t) (quote nil) (om-make-point 249 564) (om-make-point 48 30) 4000 "4000" nil) (om-load-boxcomment "comment 71" (om-make-point 40 31) (quote "freq") "" (om-make-point 167 539) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 61" (quote t) (quote nil) (om-make-point 120 497) (om-make-point 94 30) (list 10 100 500) "(10 100 500)" nil) (om-load-boxcall (quote bastype) "aux 60" (quote t) (quote nil) (om-make-point 171 564) (om-make-point 34 30) 25 "25" nil) (om-load-boxcall (quote bastype) "aux 59" (quote t) (quote nil) (om-make-point 298 564) (om-make-point 48 30) 2000 "2000" nil) (om-load-boxcall (quote bastype) "aux 58" (quote t) (quote nil) (om-make-point 130 564) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 57" (quote t) (quote nil) (om-make-point 208 564) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 70" (om-make-point 44 88) (quote "E") "" (om-make-point 372 262) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 69" (om-make-point 51 34) (quote "durs") "" (om-make-point 426 259) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 8" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 427 321) nil (list 4 (list 0 1 2 3)) nil "C#ed") (om-load-boxcomment "comment 68" (om-make-point 47 30) (quote "inha") "" (om-make-point 489 259) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 67" (om-make-point 40 31) (quote "amp") "" (om-make-point 475 325) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "snare-1_H.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 365 393) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "snare-1_H" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snare-1_H.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 410 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 8" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 87) (om-make-point 88 30) "snare-1_E" "\"snare-1_E\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 365 324) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "snare-1_H" :type "aiff")) nil "Synt") (om-load-editor-box1 "SNARE-1 8" (quote snare-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "inha" (quote :inha) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 422 392) (om-make-point 266 62) (let ((rep (if (find-class (quote snare-1) nil) (let ((rep (make-instance (quote snare-1) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3))) (when (member (quote durs) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0)) (when (member (quote freq) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 25)) (when (member (quote inha) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote inha)) (list 0 -6 -12 -18))) (when (member (quote jta) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0)) (when (member (quote jtf) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 4000)) (when (member (quote bw) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 2000)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3) (list 1 1 1 1) (list 0 0 0 0) (list 25 25 25 25) (list 0 -6 -12 -18) (list 0 0 0 0) (list 4000 4000 4000 4000) (list 2000 2000 2000 2000))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 66" (om-make-point 40 31) (quote "jta") "" (om-make-point 558 325) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 65" (om-make-point 40 31) (quote "jtf") "" (om-make-point 599 325) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 64" (om-make-point 40 31) (quote "bw") "" (om-make-point 648 325) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 56" (quote t) (quote nil) (om-make-point 436 283) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 55" (quote t) (quote nil) (om-make-point 597 350) (om-make-point 48 30) 4000 "4000" nil) (om-load-boxcomment "comment 63" (om-make-point 40 31) (quote "freq") "" (om-make-point 515 325) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 54" (quote t) (quote nil) (om-make-point 467 283) (om-make-point 99 30) (list 0 -6 -12 -18) "(0 -6 -12 -18)" nil) (om-load-boxcall (quote bastype) "aux 53" (quote t) (quote nil) (om-make-point 519 350) (om-make-point 34 30) 25 "25" nil) (om-load-boxcall (quote bastype) "aux 52" (quote t) (quote nil) (om-make-point 646 350) (om-make-point 48 30) 2000 "2000" nil) (om-load-boxcall (quote bastype) "aux 51" (quote t) (quote nil) (om-make-point 478 350) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 50" (quote t) (quote nil) (om-make-point 556 350) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 49" (quote t) (quote nil) (om-make-point 465 77) (om-make-point 94 30) (list 0 -6 -12 18) "(0 -6 -12 18)" nil) (om-load-boxcall (quote abstraction) "Synt 7" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 89) (om-make-point 89 30) "snare-1_B" "\"snare-1_B\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 363 118) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "snare-1_G" :type "aiff")) nil "Synt") (om-load-editor-box1 "snare-1_G.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 363 187) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "snare-1_G" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snare-1_G.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 410 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment 62" (om-make-point 40 31) (quote "inha") "" (om-make-point 511 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 61" (om-make-point 47 30) (quote "amp") "" (om-make-point 487 53) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 48" (quote t) (quote nil) (om-make-point 514 144) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote abstraction) "C#ed 7" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 425 115) nil (list 4 (list 0 1 2 3)) nil "C#ed") (om-load-boxcall (quote bastype) "aux 47" (quote t) (quote nil) (om-make-point 434 77) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 60" (om-make-point 51 34) (quote "durs") "" (om-make-point 424 53) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 59" (om-make-point 44 88) (quote "B") "" (om-make-point 370 56) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SNARE-1 7" (quote snare-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "inha" (quote :inha) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 420 186) (om-make-point 266 62) (let ((rep (if (find-class (quote snare-1) nil) (let ((rep (make-instance (quote snare-1) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3))) (when (member (quote durs) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 0 -6 -12 18))) (when (member (quote freq) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 25)) (when (member (quote inha) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote inha)) 0)) (when (member (quote jta) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0)) (when (member (quote jtf) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 4000)) (when (member (quote bw) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 2000)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3) (list 1 1 1 1) (list 0 -6 -12 18) (list 25 25 25 25) (list 0 0 0 0) (list 0 0 0 0) (list 4000 4000 4000 4000) (list 2000 2000 2000 2000))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 46" (quote t) (quote nil) (om-make-point 554 144) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 58" (om-make-point 40 31) (quote "jta") "" (om-make-point 556 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 45" (quote t) (quote nil) (om-make-point 595 144) (om-make-point 48 30) 4000 "4000" nil) (om-load-boxcomment "comment 57" (om-make-point 40 31) (quote "jtf") "" (om-make-point 597 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 44" (quote t) (quote nil) (om-make-point 644 144) (om-make-point 48 30) 2000 "2000" nil) (om-load-boxcomment "comment 56" (om-make-point 40 31) (quote "bw") "" (om-make-point 646 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 55" (om-make-point 40 31) (quote "freq") "" (om-make-point 468 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 43" (quote t) (quote nil) (om-make-point 472 143) (om-make-point 34 30) 25 "25" nil) (om-load-boxcomment "comment 54" (om-make-point 25 207) (quote "|$|$|$|$$") "" (om-make-point 693 257) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 42" (quote t) (quote nil) (om-make-point 817 498) (om-make-point 70 30) (list 0 0.5 1) "(0 0.5 1)" nil) (om-load-boxcall (quote bastype) "aux 41" (quote t) (quote nil) (om-make-point 946 566) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 53" (om-make-point 44 88) (quote "I") "" (om-make-point 721 478) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 52" (om-make-point 51 34) (quote "durs") "" (om-make-point 775 475) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 6" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 776 537) nil (list 3 (list 0 1 2)) nil "C#ed") (om-load-boxcomment "comment 51" (om-make-point 47 30) (quote "bw") "" (om-make-point 833 475) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 50" (om-make-point 40 31) (quote "amp") "" (om-make-point 824 541) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "snare-1_I.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 715 609) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "snare-1_I" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snare-1_I.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 410 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 6" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 88) (om-make-point 86 30) "snare-1_I" "\"snare-1_I\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 714 540) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "snare-1_I" :type "aiff")) nil "Synt") (om-load-editor-box1 "SNARE-1 6" (quote snare-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "inha" (quote :inha) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 771 608) (om-make-point 266 62) (let ((rep (if (find-class (quote snare-1) nil) (let ((rep (make-instance (quote snare-1) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2))) (when (member (quote durs) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0)) (when (member (quote freq) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 25)) (when (member (quote inha) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote inha)) -99)) (when (member (quote jta) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0)) (when (member (quote jtf) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 2000)) (when (member (quote bw) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote bw)) (list 0 0.5 1))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2) (list 1 1 1) (list 0 0 0) (list 25 25 25) (list -99 -99 -99) (list 0 0 0) (list 2000 2000 2000) (list 0 0.5 1))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 49" (om-make-point 40 31) (quote "inha") "" (om-make-point 907 541) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 48" (om-make-point 40 31) (quote "jta") "" (om-make-point 948 541) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 47" (om-make-point 40 31) (quote "jtf") "" (om-make-point 997 541) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 40" (quote t) (quote nil) (om-make-point 785 499) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 46" (om-make-point 40 31) (quote "freq") "" (om-make-point 864 541) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 39" (quote t) (quote nil) (om-make-point 868 566) (om-make-point 34 30) 25 "25" nil) (om-load-boxcall (quote bastype) "aux 38" (quote t) (quote nil) (om-make-point 995 566) (om-make-point 48 30) 2000 "2000" nil) (om-load-boxcall (quote bastype) "aux 37" (quote t) (quote nil) (om-make-point 827 566) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 36" (quote t) (quote nil) (om-make-point 905 566) (om-make-point 39 30) -99 "-99" nil) (om-load-boxcomment "comment 45" (om-make-point 25 207) (quote "|$|$|$|$$") "" (om-make-point 695 467) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 44" (om-make-point 44 88) (quote "H") "" (om-make-point 378 474) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 43" (om-make-point 51 34) (quote "durs") "" (om-make-point 432 471) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 5" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 433 533) nil (list 4 (list 0 1 2 3)) nil "C#ed") (om-load-boxcomment "comment 41" (om-make-point 47 30) (quote "jtf") "" (om-make-point 515 471) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 40" (om-make-point 40 31) (quote "amp") "" (om-make-point 481 537) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "snare-1_H.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 372 605) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "snare-1_H" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snare-1_H.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 410 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 5" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 88) (om-make-point 89 30) "snare-1_H" "\"snare-1_H\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 371 536) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "snare-1_H" :type "aiff")) nil "Synt") (om-load-editor-box1 "SNARE-1 5" (quote snare-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "inha" (quote :inha) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 428 604) (om-make-point 266 62) (let ((rep (if (find-class (quote snare-1) nil) (let ((rep (make-instance (quote snare-1) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3))) (when (member (quote durs) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -99)) (when (member (quote freq) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 25)) (when (member (quote inha) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote inha)) -99)) (when (member (quote jta) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jta)) 0)) (when (member (quote jtf) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) (list 50 100 1000 10000))) (when (member (quote bw) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 2000)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3) (list 1 1 1 1) (list -99 -99 -99 -99) (list 25 25 25 25) (list -99 -99 -99 -99) (list 0 0 0 0) (list 50 100 1000 10000) (list 2000 2000 2000 2000))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 39" (om-make-point 40 31) (quote "inha") "" (om-make-point 564 537) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 38" (om-make-point 40 31) (quote "jta") "" (om-make-point 605 537) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 37" (om-make-point 40 31) (quote "bw") "" (om-make-point 654 537) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 35" (quote t) (quote nil) (om-make-point 442 495) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 34" (quote t) (quote nil) (om-make-point 603 562) (om-make-point 27 30) 0 "0" nil) (om-load-boxcomment "comment 36" (om-make-point 40 31) (quote "freq") "" (om-make-point 521 537) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 33" (quote t) (quote nil) (om-make-point 473 495) (om-make-point 140 30) (list 50 100 1000 10000) "(50 100 1000 10000)" nil) (om-load-boxcall (quote bastype) "aux 32" (quote t) (quote nil) (om-make-point 525 562) (om-make-point 34 30) 25 "25" nil) (om-load-boxcall (quote bastype) "aux 30" (quote t) (quote nil) (om-make-point 652 562) (om-make-point 48 30) 2000 "2000" nil) (om-load-boxcall (quote bastype) "aux 29" (quote t) (quote nil) (om-make-point 484 562) (om-make-point 39 30) -99 "-99" nil) (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 562 562) (om-make-point 39 30) -99 "-99" nil) (om-load-boxcomment "comment 35" (om-make-point 44 88) (quote "D") "" (om-make-point 25 267) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 34" (om-make-point 51 34) (quote "durs") "" (om-make-point 79 264) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 4" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 80 326) nil (list 5 (list 0 1 2 3 4)) nil "C#ed") (om-load-boxcomment "comment 33" (om-make-point 47 30) (quote "inha") "" (om-make-point 162 264) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 32" (om-make-point 40 31) (quote "amp") "" (om-make-point 128 330) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "snare-1_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 18 398) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "snare-1_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snare-1_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 410 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 4" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 87) (om-make-point 89 30) "snare-1_D" "\"snare-1_D\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 18 329) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "snare-1_C" :type "aiff")) nil "Synt") (om-load-editor-box1 "SNARE-1 4" (quote snare-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "inha" (quote :inha) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 75 397) (om-make-point 266 62) (let ((rep (if (find-class (quote snare-1) nil) (let ((rep (make-instance (quote snare-1) :numcols 5))) (when (member (quote e-dels) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3 4))) (when (member (quote durs) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -99)) (when (member (quote freq) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 25)) (when (member (quote inha) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote inha)) (list 0 -6 -12 -18 -24))) (when (member (quote jta) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jta)) -99)) (when (member (quote jtf) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 4000)) (when (member (quote bw) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 2000)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3 4) (list 1 1 1 1 1) (list -99 -99 -99 -99 -99) (list 25 25 25 25 25) (list 0 -6 -12 -18 -24) (list -99 -99 -99 -99 -99) (list 4000 4000 4000 4000 4000) (list 2000 2000 2000 2000 2000))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 31" (om-make-point 40 31) (quote "jta") "" (om-make-point 211 330) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 30" (om-make-point 40 31) (quote "jtf") "" (om-make-point 252 330) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 29" (om-make-point 40 31) (quote "bw") "" (om-make-point 301 330) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 27" (quote t) (quote nil) (om-make-point 89 288) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 250 355) (om-make-point 48 30) 4000 "4000" nil) (om-load-boxcomment "comment 28" (om-make-point 40 31) (quote "freq") "" (om-make-point 168 330) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 120 288) (om-make-point 122 30) (list 0 -6 -12 -18 -24) "(0 -6 -12 -18 -24)" nil) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 172 355) (om-make-point 34 30) 25 "25" nil) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 299 355) (om-make-point 48 30) 2000 "2000" nil) (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 131 355) (om-make-point 39 30) -99 "-99" nil) (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 209 355) (om-make-point 39 30) -99 "-99" nil) (om-load-boxcomment "comment 27" (om-make-point 25 207) (quote "|$|$|$|$$") "" (om-make-point 341 262) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 26" (om-make-point 25 207) (quote "|$|$|$|$$") "" (om-make-point 339 48) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 911 349) (om-make-point 39 30) -99 "-99" nil) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 833 349) (om-make-point 39 30) -99 "-99" nil) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 1001 349) (om-make-point 48 30) 2000 "2000" nil) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 874 349) (om-make-point 34 30) 25 "25" nil) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 822 282) (om-make-point 94 30) (list 10 100 500) "(10 100 500)" nil) (om-load-boxcomment "comment 25" (om-make-point 40 31) (quote "freq") "" (om-make-point 870 324) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 952 349) (om-make-point 48 30) 4000 "4000" nil) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 791 282) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 24" (om-make-point 40 31) (quote "bw") "" (om-make-point 1003 324) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 21" (om-make-point 40 31) (quote "jtf") "" (om-make-point 954 324) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 19" (om-make-point 40 31) (quote "inha") "" (om-make-point 913 324) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SNARE-1 3" (quote snare-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "inha" (quote :inha) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 777 391) (om-make-point 266 62) (let ((rep (if (find-class (quote snare-1) nil) (let ((rep (make-instance (quote snare-1) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2))) (when (member (quote durs) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -99)) (when (member (quote freq) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 25)) (when (member (quote inha) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote inha)) -99)) (when (member (quote jta) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jta)) (list 10 100 500))) (when (member (quote jtf) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 4000)) (when (member (quote bw) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 2000)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2) (list 1 1 1) (list -99 -99 -99) (list 25 25 25) (list -99 -99 -99) (list 10 100 500) (list 4000 4000 4000) (list 2000 2000 2000))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote abstraction) "Synt 3" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 88) (om-make-point 87 30) "snare-1_F" "\"snare-1_F\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 720 323) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "snare-1_F" :type "aiff")) nil "Synt") (om-load-editor-box1 "snare-1_F.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 716 396) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "snare-1_F" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snare-1_F.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 410 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment 17" (om-make-point 40 31) (quote "amp") "" (om-make-point 830 324) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 16" (om-make-point 47 30) (quote "jta") "" (om-make-point 854 258) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 3" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 782 320) nil (list 3 (list 0 1 2)) nil "C#ed") (om-load-boxcomment "comment 15" (om-make-point 51 34) (quote "durs") "" (om-make-point 781 258) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 14" (om-make-point 44 88) (quote "F") "" (om-make-point 727 261) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 25 207) (quote "|$|$|$|$$") "" (om-make-point 692 50) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 910 143) (om-make-point 39 30) -99 "-99" nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 832 143) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1000 143) (om-make-point 48 30) 2000 "2000" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 869 143) (om-make-point 39 30) -99 "-99" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 821 76) (om-make-point 112 30) (list 25 50 100 200) "(25 50 100 200)" nil) (om-load-boxcomment "comment 12" (om-make-point 40 31) (quote "inha") "" (om-make-point 867 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 951 143) (om-make-point 48 30) 4000 "4000" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 790 76) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 11" (om-make-point 40 31) (quote "bw") "" (om-make-point 1002 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 10" (om-make-point 40 31) (quote "jtf") "" (om-make-point 953 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 40 31) (quote "jta") "" (om-make-point 912 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SNARE-1 2" (quote snare-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "inha" (quote :inha) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 776 185) (om-make-point 266 62) (let ((rep (if (find-class (quote snare-1) nil) (let ((rep (make-instance (quote snare-1) :numcols 4))) (when (member (quote e-dels) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3))) (when (member (quote durs) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote amp)) 0)) (when (member (quote freq) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 25 50 100 200))) (when (member (quote inha) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote inha)) -99)) (when (member (quote jta) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jta)) -99)) (when (member (quote jtf) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 4000)) (when (member (quote bw) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 2000)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3) (list 1 1 1 1) (list 0 0 0 0) (list 25 50 100 200) (list -99 -99 -99 -99) (list -99 -99 -99 -99) (list 4000 4000 4000 4000) (list 2000 2000 2000 2000))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote abstraction) "Synt" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 88) (om-make-point 89 30) "snare-1_C" "\"snare-1_C\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 719 117) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "snare-1_B" :type "aiff")) nil "Synt") (om-load-editor-box1 "snare-1_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 719 186) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "snare-1_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snare-1_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 410 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment 8" (om-make-point 40 31) (quote "amp") "" (om-make-point 827 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 47 30) (quote "freq") "" (om-make-point 863 52) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "C#ed 2" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 781 114) nil (list 4 (list 0 1 2 3)) nil "C#ed") (om-load-boxcomment "comment 6" (om-make-point 51 34) (quote "durs") "" (om-make-point 780 52) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 44 88) (quote "C") "" (om-make-point 726 55) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 121 143) (om-make-point 34 30) 25 "25" nil) (om-load-boxcomment "comment 42" (om-make-point 40 31) (quote "freq") "" (om-make-point 117 118) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 40 31) (quote "bw") "" (om-make-point 295 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 293 144) (om-make-point 48 30) 2000 "2000" nil) (om-load-boxcomment "comment 4" (om-make-point 40 31) (quote "jtf") "" (om-make-point 246 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 244 144) (om-make-point 48 30) 4000 "4000" nil) (om-load-boxcomment "comment" (om-make-point 40 31) (quote "jta") "" (om-make-point 205 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 203 144) (om-make-point 39 30) -99 "-99" nil) (om-load-editor-box1 "SNARE-1" (quote snare-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "inha" (quote :inha) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jta" (quote :jta) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "jtf" (quote :jtf) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "bw" (quote :bw) nil nil))) (om-make-point 69 186) (om-make-point 266 62) (let ((rep (if (find-class (quote snare-1) nil) (let ((rep (make-instance (quote snare-1) :numcols 5))) (when (member (quote e-dels) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2 3 4))) (when (member (quote durs) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 0 -6 -12 -18 -24))) (when (member (quote freq) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote freq)) 25)) (when (member (quote inha) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote inha)) -99)) (when (member (quote jta) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jta)) -99)) (when (member (quote jtf) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote jtf)) 4000)) (when (member (quote bw) (get-init-slots-of-class (quote snare-1)) :key (quote car)) (setf (slot-value rep (quote bw)) 2000)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2 3 4) (list 1 1 1 1 1) (list 0 -6 -12 -18 -24) (list 25 25 25 25 25) (list -99 -99 -99 -99 -99) (list -99 -99 -99 -99 -99) (list 4000 4000 4000 4000 4000) (list 2000 2000 2000 2000 2000))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment 23" (om-make-point 44 88) (quote "A") "" (om-make-point 19 56) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 22" (om-make-point 51 34) (quote "durs") "" (om-make-point 73 53) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 83 77) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote abstraction) "C#ed" (om-load-patch-abs1 "C#ed" (quote ((om-load-boxout "output 2" 1 (om-make-point 127 369) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "edel" nil) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 45 326) nil nil nil nil 1) (om-load-boxin "length" 1 (om-make-point 111 12) "" "length" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 204) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 94) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 136 144) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 109 80) nil nil nil nil 1) (om-load-boxin "durs" 0 (om-make-point 200 139) "" "durs" nil nil) (om-load-boxout "output" 0 (om-make-point 43 374) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "length" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 103 222) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 111 265) nil nil nil nil 1))) (quote ((10 0 0 0 nil 0) (10 0 1 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (1 0 8 0 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (7 0 10 2 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "durs" nil) (om-load-inputfun (quote input-funbox) "" "length" nil))) (om-make-point 74 115) nil (list 5 (list 0 1 2 3 4)) nil "C#ed") (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 163 144) (om-make-point 39 30) -99 "-99" nil) (om-load-boxcomment "comment 20" (om-make-point 47 30) (quote "amp") "" (om-make-point 156 53) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 18" (om-make-point 40 31) (quote "inha") "" (om-make-point 160 119) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "snare-1_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 13 187) (om-make-point 50 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "snare-1_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "snare-1_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 410 388) (om-make-point 875 640) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote abstraction) "Synt 2" (om-load-patch-abs1 "Synt" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 85 88) (om-make-point 89 30) "snare-1_A" "\"snare-1_A\"" nil) (om-load-boxin "OMCh" 0 (om-make-point 36 74) "" "OMCh" nil nil) (om-load-boxout "output" 0 (om-make-point 55 205) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 45 143) nil nil nil nil 1))) (quote ((3 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "OMCh" nil))) (om-make-point 12 118) (om-make-point 51 67) (list (om-make-pathname :directory (quote (:absolute "OMChroma_Tutorial" "out-files")) :device :unspecific :host nil :name "snare-1_A" :type "aiff")) nil "Synt") (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 114 77) (om-make-point 122 30) (list 0 -6 -12 -18 -24) "(0 -6 -12 -18 -24)" nil) (om-load-boxcomment "comment 2" (om-make-point 154 34) (quote "Tutorial SNARE-1") "" (om-make-point 57 2) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((14 0 5 0 nil 3) (17 0 5 1 nil 1) (9 0 8 0 nil 0) (10 0 9 0 nil 2) (5 0 10 1 nil 1) (5 1 10 4 nil 2) (14 0 10 5 nil 3) (20 0 10 6 nil 0) (18 0 10 7 nil 0) (21 0 10 8 nil 0) (17 0 10 9 nil 1) (15 0 10 10 nil 0) (19 0 10 11 nil 0) (33 0 24 0 nil 3) (36 0 24 1 nil 1) (28 0 27 0 nil 0) (29 0 28 0 nil 2) (24 0 29 1 nil 1) (24 1 29 4 nil 2) (33 0 29 5 nil 3) (39 0 29 6 nil 0) (37 0 29 7 nil 0) (36 0 29 8 nil 1) (40 0 29 9 nil 0) (34 0 29 10 nil 0) (38 0 29 11 nil 0) (51 0 42 0 nil 2) (42 0 43 0 nil 0) (48 0 47 0 nil 3) (41 0 47 1 nil 1) (47 0 51 1 nil 1) (47 1 51 4 nil 2) (48 0 51 5 nil 3) (41 0 51 6 nil 1) (59 0 51 7 nil 0) (46 0 51 8 nil 0) (52 0 51 9 nil 0) (54 0 51 10 nil 0) (56 0 51 11 nil 0) (74 0 65 0 nil 3) (61 0 65 1 nil 1) (69 0 68 0 nil 0) (70 0 69 0 nil 2) (65 0 70 1 nil 1) (65 1 70 4 nil 2) (74 0 70 5 nil 3) (78 0 70 6 nil 0) (76 0 70 7 nil 0) (79 0 70 8 nil 0) (62 0 70 9 nil 0) (77 0 70 10 nil 0) (61 0 70 11 nil 1) (92 0 83 0 nil 3) (95 0 83 1 nil 1) (87 0 86 0 nil 0) (88 0 87 0 nil 2) (83 0 88 1 nil 1) (83 1 88 4 nil 2) (92 0 88 5 nil 3) (98 0 88 6 nil 0) (96 0 88 7 nil 0) (99 0 88 8 nil 0) (93 0 88 9 nil 0) (95 0 88 10 nil 1) (97 0 88 11 nil 0) (111 0 102 0 nil 3) (114 0 102 1 nil 1) (106 0 105 0 nil 0) (107 0 106 0 nil 2) (102 0 107 1 nil 1) (102 1 107 4 nil 2) (111 0 107 5 nil 3) (117 0 107 6 nil 0) (115 0 107 7 nil 0) (114 0 107 8 nil 1) (118 0 107 9 nil 0) (112 0 107 10 nil 0) (116 0 107 11 nil 0) (137 0 132 1 nil 1) (137 1 132 4 nil 2) (128 0 132 5 nil 3) (122 0 132 6 nil 0) (124 0 132 7 nil 0) (121 0 132 8 nil 0) (125 0 132 9 nil 1) (127 0 132 10 nil 0) (123 0 132 11 nil 0) (132 0 133 0 nil 2) (133 0 134 0 nil 0) (128 0 137 0 nil 3) (125 0 137 1 nil 1) (157 0 152 1 nil 1) (157 1 152 4 nil 2) (148 0 152 5 nil 3) (142 0 152 6 nil 0) (145 0 152 7 nil 1) (144 0 152 8 nil 0) (141 0 152 9 nil 0) (147 0 152 10 nil 0) (143 0 152 11 nil 0) (152 0 153 0 nil 2) (153 0 154 0 nil 0) (148 0 157 0 nil 3) (145 0 157 1 nil 1) (172 0 168 1 nil 1) (172 1 168 4 nil 2) (171 0 168 5 nil 3) (178 0 168 6 nil 1) (160 0 168 7 nil 0) (173 0 168 8 nil 0) (167 0 168 9 nil 0) (165 0 168 10 nil 0) (163 0 168 11 nil 0) (171 0 172 0 nil 3) (178 0 172 1 nil 1) (177 0 176 0 nil 0) (168 0 177 0 nil 2))) nil 6.0602))
