; OM File Header - Saved 2013/10/30 13:45:25
; (6.060015 :patc (om-make-point 13 138) (om-make-point 278 67) (om-make-point 1169 809) "non documentation" 183 0 "2013/10/26 23:28:15" "2013/10/30 13:41:10")
; End File Header
; External resources 
; (list (list (quote :sound) "../out-files/t12a.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "12_slots_a" (quote ((om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 733 108) (om-make-point 27 30) 3 "3" nil) (om-load-editor-box1 "t12a.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 625 426) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "t12a" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "t12a.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 504 417) (om-make-point 55 30) "t12a" "\"t12a\"" nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 462 447) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 599 96) (om-make-point 127 30) (list 100 10 30 5 10 1) "(100 10 30 5 10 1)" nil) (om-load-boxcomment "comment3 6" (om-make-point 92 50) (quote "Case 2 c") "" (om-make-point 781 55) nil (om-make-color 23/85 31/255 224/255) (om-make-font "Geneva" 18.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment3 3" (om-make-point 92 50) (quote "Case 2 a") "" (om-make-point 309 168) nil (om-make-color 23/85 31/255 224/255) (om-make-font "Geneva" 18.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2 2" (quote t) (quote nil) (om-make-point 414 172) (om-make-point 191 30) (list 5 4.5 4 3.5 3 2.5 2 1.5 1 0.5) "(5 4.5 4 3.5 3 2.5 2 1.5 1 0.5)" nil) (om-load-boxcomment "comment3 2" (om-make-point 93 50) (quote "Case 2 b") "" (om-make-point 411 137) nil (om-make-color 23/85 31/255 224/255) (om-make-font "Geneva" 18.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) 1 nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) -6.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 440.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) (list (quote make-cs-table) (quote (quote gen07)) (list (quote list) 0 2048 4096) (list (quote list) 0 100 0) 1 "?" 4097) nil))) (om-make-point 15 272) (om-make-point 995 124) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 10))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0.0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (list 4 1 0.5 0.1))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0)) (quote (100.0 10.0 30.0 5.0 10.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 1229.4801 522.04334 1313.5432 820.3954 655.57447 1332.3175 939.94556 1525.6074 1144.8762 1084.1074 464.01572 1318.6588 1523.9653 594.9874 1022.5576 1225.2005 1758.9315 1168.3123 630.70997 491.0654 762.4126 1034.3792 1427.7434 1501.7832 1038.5945 917.18665 770.4829 1340.8418 1195.5964 775.2239 771.0054 596.91016 1498.8457 1681.047 1334.6964 1381.6439 1113.4469 821.09974 493.40845 854.07935))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?") newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) (list 4 1 0.5 0.1 4 1 0.5 0.1 4 1) (list 100.0 50.000004 12.222221 23.33333 24.444447 10.555557 6.666666 9.444443 6.000002 1.0) (list 1229.4801 522.04334 1313.5432 820.3954 655.57447 1332.3175 939.94556 1525.6074 1144.8762 1084.1074) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?") newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?") newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 500 280) (om-make-point 10 40))) t nil nil nil) (om-load-boxcomment "comment211" (om-make-point 892 96) (quote "SEMANTICS OF THE POLYMORPHISM OF A MATRIX SLOT OF TYPE \"NUMBER\"$                                       CASE 1 TO 3") "" (om-make-point 54 0) nil (om-make-color 239/255 31/255 29/255) (om-make-font "Geneva" 24.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment3211" (om-make-point 76 50) (quote "Case 3") "" (om-make-point 595 51) nil (om-make-color 23/85 31/255 224/255) (om-make-font "Geneva" 18.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment3" (om-make-point 76 50) (quote "Case 1") "" (om-make-point 235 190) nil (om-make-color 23/85 31/255 224/255) (om-make-font "Geneva" 18.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 616 138) (om-make-point 104 77) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0)) (quote (100.0 10.0 30.0 5.0 10.0 1.0)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems picture)) (list 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (quote t) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 842 105) (om-make-point 59 30) 1760.0 "1760.0" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 783 104) (om-make-point 52 30) 440.0 "440.0" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 868 166) (om-make-point 34 30) 40 "40" nil) (om-load-boxcall (quote genfun) "ALEANUM" (quote aleanum) (quote ((om-load-inputfun (quote input-funbox) "min" "HIGH" 0) (om-load-inputfun (quote input-funbox) "max" "LOW" 0))) (om-make-point 802 137) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 835 196) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 312 203) (om-make-point 92 30) (list 4 1 0.5 0.1) "(4 1 0.5 0.1)" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 241 226) (om-make-point 38 30) 0.0 "0.0" nil) (om-load-boxcomment "comment" (om-make-point 88 75) (quote "numcols$ ---->") "" (om-make-point 84 183) nil (om-make-color 23/85 31/255 224/255) (om-make-font "Geneva" 18.0 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 148 222) (om-make-point 34 30) 10 "10" nil))) (quote ((3 0 1 0 nil 0) (9 0 3 0 nil 0) (2 0 3 1 nil 0) (22 0 9 1 nil 0) (20 0 9 4 nil 0) (19 0 9 5 nil 0) (13 0 9 6 nil 0) (18 0 9 7 nil 0) (4 0 13 2 nil 0) (0 0 13 3 nil 0) (15 0 17 0 nil 0) (14 0 17 1 nil 0) (17 0 18 0 nil 2) (16 0 18 1 nil 2))) nil 6.060015))
