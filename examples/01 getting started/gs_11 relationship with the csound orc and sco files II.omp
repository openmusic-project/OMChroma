; OM File Header - Saved 2025/02/06 18:22:39
; (6.0602 :patc (om-make-point 118 10) (om-make-point 252 101) (om-make-point 1074 717) "" 183 0 nil "2025/02/06 18:22:39")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/gs_11.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "gs_11 relationship with the csound orc and sco files II" (quote ((om-load-boxcomment "comment 3" (om-make-point 67 34) (quote "events") "" (om-make-point 23 45) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 131 425) (quote "| OM random$| generation$| of the data's$| score and $| convertion $| to the matrix$|$|$|$|$|$|$|$|$|$|$|$|$|$|$|$|") "" (om-make-point 893 38) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "mc->f" (om-load-patch-abs1 "mc->f" (quote ((om-load-boxout "output" 0 (om-make-point 75 195) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 77 141) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 88 74) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 85 8) "" nil nil nil))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0))) 6.0602 nil "" (om-make-point 962 37) (om-make-point 200 284)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 258 367) nil nil nil nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 97 193) (om-make-point 432 160) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7202) (6578) (3412) (7730) (7551) (5996) (9994) (3212) (8326) (7493) (9822) (9781) (2926) (3754) (9376) (3128) (7827) (5669))) :lonset (quote (0 300 600 900 1200 1500 1800 2100 2400 2700 3000 3300 3600 3900 4200 4500 4800 5100 5400)) :ldur (quote ((300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 16 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -16) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 747 533) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil t) (om-load-boxcall (quote abstraction) "onlytodisplay" (om-load-patch-abs1 "onlytodisplay" (quote ((om-load-boxout "output 2" 1 (om-make-point 94 156) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output" 0 (om-make-point 15 157) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 77 35) (om-make-point 51 30) (list 300) "(300)" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 50 73) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 44 34) (om-make-point 21 30) 0 "0" nil))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 754 36) (om-make-point 200 247)) (quote nil) (om-make-point 445 109) nil nil nil "onlytodisplay") (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 96 377) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 29 71) (om-make-point 34 30) 18 "18" nil) (om-load-boxcomment "comment 26" (om-make-point 46 34) (quote "max") "" (om-make-point 250 44) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 25" (om-make-point 46 34) (quote "min") "" (om-make-point 197 46) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 253 70) (om-make-point 38 30) 7.5 "7.5" nil) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 199 71) (om-make-point 38 30) 5.1 "5.1" nil) (om-load-boxcall (quote abstraction) "durs" (om-load-patch-abs1 "durs" (quote ((om-load-boxin "max" 2 (om-make-point 113 9) "" "max" nil nil) (om-load-boxin "min" 1 (om-make-point 70 8) "" "min" nil nil) (om-load-boxin "repeat" 0 (om-make-point 149 62) "" "repeat" nil nil) (om-load-boxout "output" 0 (om-make-point 114 200) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "durs" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 66 75) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 104 137) nil nil nil nil 1))) (quote ((5 0 3 0 nil 0) (1 0 4 0 nil 0) (0 0 4 1 nil 0) (4 0 5 0 nil 0) (2 0 5 1 nil 0))) 6.0602 nil "" (om-make-point 310 38) (om-make-point 231 294)) (quote ((om-load-inputfun (quote input-funbox) "" "repeat" nil) (om-load-inputfun (quote input-funbox) "" "min" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 177 111) (om-make-point 124 67) nil nil "durs") (om-load-boxcomment "comment 24" (om-make-point 46 34) (quote "max") "" (om-make-point 132 45) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 23" (om-make-point 46 34) (quote "min") "" (om-make-point 89 46) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 134 71) (om-make-point 38 30) 3.0 "3.0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 91 71) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote abstraction) "e-dels" (om-load-patch-abs1 "e-dels" (quote ((om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 27 218) (om-make-point 27 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 176 66) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 128 118) (om-make-point 47 35) nil nil nil 1) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 37 248) nil nil nil nil 1) (om-load-boxin "max" 2 (om-make-point 62 36) "" "max" nil nil) (om-load-boxin "min" 1 (om-make-point 19 35) "" "min" nil nil) (om-load-boxin "repeat" 0 (om-make-point 109 41) "" "repeat" nil nil) (om-load-boxout "output" 0 (om-make-point 127 222) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "e-dels" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 15 102) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 53 164) nil nil nil nil 1))) (quote ((6 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 3 0 nil 0) (9 0 3 1 nil 0) (3 0 7 0 nil 0) (5 0 8 0 nil 0) (4 0 8 1 nil 0) (8 0 9 0 nil 0) (2 0 9 1 nil 0))) 6.0602 nil "" (om-make-point 73 38) (om-make-point 232 350)) (quote ((om-load-inputfun (quote input-funbox) "" "repeat" nil) (om-load-inputfun (quote input-funbox) "" "min" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 46 110) (om-make-point 124 67) nil nil "e-dels") (om-load-boxcomment "comment 22" (om-make-point 46 51) (quote "X$min") "" (om-make-point 600 39) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 21" (om-make-point 49 51) (quote "X$max") "" (om-make-point 645 39) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 20" (om-make-point 46 51) (quote "Y$min") "" (om-make-point 700 39) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 19" (om-make-point 49 51) (quote "Y$max") "" (om-make-point 744 38) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 18" (om-make-point 66 34) (quote "stages") "" (om-make-point 787 54) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 16" (om-make-point 51 34) (quote "exp") "" (om-make-point 845 54) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 552 200) (om-make-point 317 151) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 53 101 136 204 232 279 376 420 463 563 655 726 825 881 893)) (quote (0 64 15 27 3 36 36 1 3 36 58 3 64 36 1 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 29 50 141 228 289 384 416 466 526 608 664 686 713 790 881)) (quote (0 64 1 23 36 52 1 52 36 19 36 19 58 1 23 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 90 150 203 285 349 425 504 520 550 597 676 687 700 748 839)) (quote (0 5 32 11 11 8 47 64 47 5 5 32 36 64 27 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 65 82 168 267 314 388 443 502 531 562 640 672 691 716 790)) (quote (0 64 19 5 11 42 8 5 15 23 15 19 11 15 3 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 67 98 193 205 257 311 357 402 479 530 543 575 668 733 794)) (quote (0 32 15 1 58 23 23 3 42 1 27 5 32 58 15 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 73 108 167 235 266 303 372 471 516 538 631 706 720 802 897)) (quote (0 23 1 36 47 47 8 15 42 52 1 36 19 47 58 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 80 169 191 262 286 366 429 464 480 537 625 705 748 784 876)) (quote (0 5 47 58 5 11 52 19 27 64 5 42 19 42 64 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 36 103 121 182 199 227 271 293 367 433 461 506 536 595 692)) (quote (0 19 52 36 42 36 23 58 19 3 64 19 11 32 64 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 44 86 167 261 308 336 351 389 425 488 549 580 624 720 749)) (quote (0 5 52 42 47 42 27 11 19 5 27 47 36 19 27 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 54 118 133 187 230 271 360 456 539 636 709 740 819 859 931)) (quote (0 42 32 5 52 11 47 5 19 42 58 36 27 42 47 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 22 65 153 242 266 334 431 449 462 483 565 590 687 773 800)) (quote (0 8 47 15 15 5 3 15 36 52 1 8 64 3 52 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 52 70 123 175 191 244 340 357 367 410 488 525 556 630 700)) (quote (0 36 3 5 32 11 27 11 58 1 52 23 36 1 32 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 40 104 177 212 227 296 383 468 531 630 725 818 903 920 992)) (quote (0 32 42 64 42 42 5 64 64 64 64 8 58 8 3 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 95 191 246 332 415 487 581 658 712 727 808 856 878 895 918)) (quote (0 52 27 52 42 47 64 32 64 3 19 52 23 42 58 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 30 88 109 188 212 259 305 363 376 409 443 504 579 640 675)) (quote (0 11 64 1 11 23 8 27 3 5 47 58 64 11 42 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 65 98 128 184 277 366 380 413 501 530 597 640 689 779 828)) (quote (0 8 52 36 58 8 36 36 47 3 58 52 47 1 52 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 55 88 173 222 238 320 342 402 457 547 601 650 672 727)) (quote (0 11 15 52 8 27 1 11 64 8 1 42 8 52 3 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 49 64 115 132 209 229 256 344 404 472 520 560 624 693 754)) (quote (0 47 15 11 23 27 52 15 42 15 64 19 15 47 19 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 854 77) (om-make-point 38 30) 1.5 "1.5" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 800 78) (om-make-point 34 30) 15 "15" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 750 78) (om-make-point 34 30) 16 "16" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 704 78) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 646 79) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 604 79) (om-make-point 34 30) 10 "10" nil) (om-load-boxwithed1 (quote box-with-win) "aenv" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "comp#" nil) (om-load-inputfun (quote input-funbox) "" "Xmin" nil) (om-load-inputfun (quote input-funbox) "" "Xmax" nil) (om-load-inputfun (quote input-funbox) "" "Ymin" nil) (om-load-inputfun (quote input-funbox) "" "Ymax" nil) (om-load-inputfun (quote input-funbox) "" "steps" nil) (om-load-inputfun (quote input-funbox) "" "exp" nil))) (om-make-point 552 119) (om-make-point 318 59) nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 24 328) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 155 290) nil nil nil nil 3) (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 53 360) nil nil nil nil 1) (om-load-boxin "exp" 6 (om-make-point 255 54) "" "exp" nil nil) (om-load-boxin "steps" 5 (om-make-point 208 54) "" "steps" nil nil) (om-load-boxin "Ymax" 4 (om-make-point 165 54) "" "Ymax" nil nil) (om-load-boxin "Ymin" 3 (om-make-point 125 54) "" "Ymin" nil nil) (om-load-boxin "Xmax" 2 (om-make-point 81 55) "" "Xmax" nil nil) (om-load-boxin "Xmin" 1 (om-make-point 41 55) "" "Xmin" nil nil) (om-load-boxcall (quote abstraction) "bpf_random" (om-load-patch-abs1 "bpf_random" (quote ((om-load-boxin "exp" 5 (om-make-point 245 140) "" "exp" nil nil) (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 214 201) nil nil nil nil 1) (om-load-boxout "output 2" 1 (om-make-point 240 377) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "y" nil) (om-load-boxout "output" 0 (om-make-point 100 371) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "x" nil) (om-load-boxin "step#" 4 (om-make-point 153 33) "" "step#" nil nil) (om-load-boxin "y_max" 3 (om-make-point 264 31) "" "y_max" nil nil) (om-load-boxin "y_min" 2 (om-make-point 201 29) "" "y_min" nil nil) (om-load-boxin "x_max" 1 (om-make-point 89 32) "" "x_max" nil nil) (om-load-boxin "x_min" 0 (om-make-point 31 30) "" "x_min" nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 312 97) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 289 134) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 102 227) nil nil nil (list (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 99 72) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 28 113) nil nil nil nil 1) (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 34 177) nil nil nil nil 3) (om-load-boxin "input" 0 (om-make-point 36 53) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 138 179) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 82 148) nil nil nil 0)) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (1 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 73 254) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "X-APPEND 2" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 83 301) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 296 280) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 220 276) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 223 312) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 259 215) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 196 102) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 88 162) (om-make-point 58 59) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 41 90) nil nil nil nil 1))) (quote ((18 0 1 0 nil 0) (0 0 1 1 nil 0) (16 0 2 0 nil 0) (13 0 3 0 nil 0) (4 0 10 0 nil 2) (9 0 10 1 nil 0) (19 0 11 0 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0) (15 0 16 0 nil 0) (17 0 16 1 nil 0) (14 0 16 2 nil 0) (1 0 17 0 nil 0) (10 0 17 1 nil 0) (6 0 18 0 nil 0) (5 0 18 1 nil 0) (20 0 19 0 nil 0) (4 0 19 1 nil 2) (8 0 20 0 nil 0) (7 0 20 1 nil 0))) 6.0602 nil "" (om-make-point 424 419) (om-make-point 376 465)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" 20) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil))) (om-make-point 15 115) (om-make-point 296 67) nil nil nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 83 194) (om-make-point 162 86) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 97 182 232 301 335 401 434 453 501 547 611 658 710 797 811 901 961 989 1021 1037 1050 1082 1106 1170 1229 1296 1372 1407 1476 1504 1591 1644 1710 1719 1739 1767 1820 1910 1969 2039 2053 2078 2112 2185 2220 2242 2317 2396 2431 2499 2501 2554 2639 2704 2753 2777 2835 2923 2958 3050 3146 3197 3288 3321 3383 3437 3461 3556 3591 3655 3667 3703 3802 3893 3958 4048 4110 4196 4278 4376 4413 4456 4490 4587 4624 4667 4739 4809 4856 4907 4954 5052 5148 5229 5252 5275 5373 5410 5434 5517)) (quote (0 89 89 42 68 100 34 50 50 42 21 42 50 11 78 42 89 89 11 100 15 89 21 111 68 11 15 78 89 68 100 100 89 59 42 11 78 100 42 59 78 68 15 78 78 89 50 15 59 78 15 21 100 50 68 15 100 89 21 15 21 42 59 68 89 50 78 78 11 100 100 100 27 111 89 68 68 59 78 100 42 100 100 34 89 111 42 100 100 27 42 100 89 42 15 100 11 50 100 42 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxin "comp#" 0 (om-make-point 63 297) "" "comp#" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 209 384) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 122 384) nil nil nil 0)) (quote ((10 0 1 0 nil 0) (0 0 2 0 nil 0) (11 0 2 1 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (6 0 9 2 nil 0) (5 0 9 3 nil 0) (4 0 9 4 nil 0) (3 0 9 5 nil 0) (9 0 10 1 nil 0) (9 1 10 2 nil 0) (1 1 12 0 nil 0) (2 0 13 0 nil 1) (1 0 13 1 nil 0))) 1 "aenv" nil) (om-load-boxcomment "comment 15" (om-make-point 46 34) (quote "max") "" (om-make-point 381 46) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 14" (om-make-point 46 34) (quote "min") "" (om-make-point 322 46) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 379 71) (om-make-point 55 30) 10000 "10000" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 321 71) (om-make-point 48 30) 1800 "1800" nil) (om-load-boxcall (quote abstraction) "freq" (om-load-patch-abs1 "freq" (quote ((om-load-boxin "max" 2 (om-make-point 71 33) "" "max" nil nil) (om-load-boxin "min" 1 (om-make-point 28 32) "" "min" nil nil) (om-load-boxin "repeat" 0 (om-make-point 107 86) "" "repeat" nil nil) (om-load-boxout "output" 0 (om-make-point 75 238) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "freq" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 24 99) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 65 175) nil nil nil nil 1))) (quote ((5 0 3 0 nil 0) (1 0 4 0 nil 0) (0 0 4 1 nil 0) (4 0 5 0 nil 0) (2 0 5 1 nil 0))) 6.0602 nil "" (om-make-point 547 36) (om-make-point 200 316)) (quote ((om-load-inputfun (quote input-funbox) "" "repeat" nil) (om-load-inputfun (quote input-funbox) "" "min" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 312 111) (om-make-point 124 67) nil nil nil) (om-load-editor-box1 "gs_11.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 516 411) (om-make-point 341 101) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gs_11" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gs_11.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t) (om-load-editor-box1 "ADD-1 2" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 58 437) (om-make-point 287 75) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 18))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1.3780357 0.6632906 1.1018636 1.2749537 1.5574383 2.802309 1.103572 0.57854105 2.4911967 0.16170323 1.3109826 0.22841227 1.8661662 1.7818891 1.1277845 2.309447 2.36695))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (list 7.2669993 5.7817984 6.99552 5.4833346 6.358174 6.587288 7.3548484 6.938013 5.477534 5.8838906 5.1132426 6.07133 7.3370614 6.909998 7.1039844 6.553953 6.7440534 7.252183))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 523.85596 365.3224 58.67577 710.6653 640.8575 261.0218 2627.8972 52.274174 1002.713 619.7431 2379.363 2323.6758 44.31407 71.491165 1838.9837 49.79836 751.62 216.09566))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 53 101 136 204 232 279 376 420 463 563 655 726 825 881 893)) (quote (0 64 15 27 3 36 36 1 3 36 58 3 64 36 1 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 29 50 141 228 289 384 416 466 526 608 664 686 713 790 881)) (quote (0 64 1 23 36 52 1 52 36 19 36 19 58 1 23 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 90 150 203 285 349 425 504 520 550 597 676 687 700 748 839)) (quote (0 5 32 11 11 8 47 64 47 5 5 32 36 64 27 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 65 82 168 267 314 388 443 502 531 562 640 672 691 716 790)) (quote (0 64 19 5 11 42 8 5 15 23 15 19 11 15 3 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 67 98 193 205 257 311 357 402 479 530 543 575 668 733 794)) (quote (0 32 15 1 58 23 23 3 42 1 27 5 32 58 15 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 73 108 167 235 266 303 372 471 516 538 631 706 720 802 897)) (quote (0 23 1 36 47 47 8 15 42 52 1 36 19 47 58 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 80 169 191 262 286 366 429 464 480 537 625 705 748 784 876)) (quote (0 5 47 58 5 11 52 19 27 64 5 42 19 42 64 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 36 103 121 182 199 227 271 293 367 433 461 506 536 595 692)) (quote (0 19 52 36 42 36 23 58 19 3 64 19 11 32 64 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 44 86 167 261 308 336 351 389 425 488 549 580 624 720 749)) (quote (0 5 52 42 47 42 27 11 19 5 27 47 36 19 27 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 54 118 133 187 230 271 360 456 539 636 709 740 819 859 931)) (quote (0 42 32 5 52 11 47 5 19 42 58 36 27 42 47 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 22 65 153 242 266 334 431 449 462 483 565 590 687 773 800)) (quote (0 8 47 15 15 5 3 15 36 52 1 8 64 3 52 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 52 70 123 175 191 244 340 357 367 410 488 525 556 630 700)) (quote (0 36 3 5 32 11 27 11 58 1 52 23 36 1 32 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 40 104 177 212 227 296 383 468 531 630 725 818 903 920 992)) (quote (0 32 42 64 42 42 5 64 64 64 64 8 58 8 3 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 95 191 246 332 415 487 581 658 712 727 808 856 878 895 918)) (quote (0 52 27 52 42 47 64 32 64 3 19 52 23 42 58 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 30 88 109 188 212 259 305 363 376 409 443 504 579 640 675)) (quote (0 11 64 1 11 23 8 27 3 5 47 58 64 11 42 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 65 98 128 184 277 366 380 413 501 530 597 640 689 779 828)) (quote (0 8 52 36 58 8 36 36 47 3 58 52 47 1 52 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 55 88 173 222 238 320 342 402 457 547 601 650 672 727)) (quote (0 11 15 52 8 27 1 11 64 8 1 42 8 52 3 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 49 64 115 132 209 229 256 344 404 472 520 560 624 693 754)) (quote (0 47 15 11 23 27 52 15 42 15 64 19 15 47 19 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1.3780357 0.6632906 1.1018636 1.2749537 1.5574383 2.802309 1.103572 0.57854105 2.4911967 0.16170323 1.3109826 0.22841227 1.8661662 1.7818891 1.1277845 2.309447 2.36695) (list 7.2669993 5.7817984 6.99552 5.4833346 6.358174 6.587288 7.3548484 6.938013 5.477534 5.8838906 5.1132426 6.07133 7.3370614 6.909998 7.1039844 6.553953 6.7440534 7.252183) (list -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0 -6.0) (list 523.85596 365.3224 58.67577 710.6653 640.8575 261.0218 2627.8972 52.274174 1002.713 619.7431 2379.363 2323.6758 44.31407 71.491165 1838.9837 49.79836 751.62 216.09566) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 53 101 136 204 232 279 376 420 463 563 655 726 825 881 893)) (quote (0 64 15 27 3 36 36 1 3 36 58 3 64 36 1 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 29 50 141 228 289 384 416 466 526 608 664 686 713 790 881)) (quote (0 64 1 23 36 52 1 52 36 19 36 19 58 1 23 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 90 150 203 285 349 425 504 520 550 597 676 687 700 748 839)) (quote (0 5 32 11 11 8 47 64 47 5 5 32 36 64 27 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 65 82 168 267 314 388 443 502 531 562 640 672 691 716 790)) (quote (0 64 19 5 11 42 8 5 15 23 15 19 11 15 3 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 67 98 193 205 257 311 357 402 479 530 543 575 668 733 794)) (quote (0 32 15 1 58 23 23 3 42 1 27 5 32 58 15 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 73 108 167 235 266 303 372 471 516 538 631 706 720 802 897)) (quote (0 23 1 36 47 47 8 15 42 52 1 36 19 47 58 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 80 169 191 262 286 366 429 464 480 537 625 705 748 784 876)) (quote (0 5 47 58 5 11 52 19 27 64 5 42 19 42 64 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 36 103 121 182 199 227 271 293 367 433 461 506 536 595 692)) (quote (0 19 52 36 42 36 23 58 19 3 64 19 11 32 64 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 44 86 167 261 308 336 351 389 425 488 549 580 624 720 749)) (quote (0 5 52 42 47 42 27 11 19 5 27 47 36 19 27 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 54 118 133 187 230 271 360 456 539 636 709 740 819 859 931)) (quote (0 42 32 5 52 11 47 5 19 42 58 36 27 42 47 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 22 65 153 242 266 334 431 449 462 483 565 590 687 773 800)) (quote (0 8 47 15 15 5 3 15 36 52 1 8 64 3 52 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 52 70 123 175 191 244 340 357 367 410 488 525 556 630 700)) (quote (0 36 3 5 32 11 27 11 58 1 52 23 36 1 32 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 40 104 177 212 227 296 383 468 531 630 725 818 903 920 992)) (quote (0 32 42 64 42 42 5 64 64 64 64 8 58 8 3 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 95 191 246 332 415 487 581 658 712 727 808 856 878 895 918)) (quote (0 52 27 52 42 47 64 32 64 3 19 52 23 42 58 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 30 88 109 188 212 259 305 363 376 409 443 504 579 640 675)) (quote (0 11 64 1 11 23 8 27 3 5 47 58 64 11 42 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 65 98 128 184 277 366 380 413 501 530 597 640 689 779 828)) (quote (0 8 52 36 58 8 36 36 47 3 58 52 47 1 52 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 55 88 173 222 238 320 342 402 457 547 601 650 672 727)) (quote (0 11 15 52 8 27 1 11 64 8 1 42 8 52 3 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 49 64 115 132 209 229 256 344 404 472 520 560 624 693 754)) (quote (0 47 15 11 23 27 52 15 42 15 64 19 15 47 19 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 535 594) (om-make-point 109 45))) nil nil nil t) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 449 451) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "name" (om-load-patch-abs1 "name" (quote ((om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 63 39) (om-make-point 64 30) "gs_11" "\"gs_11\"" nil) (om-load-boxout "output" 0 (om-make-point 73 77) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "name" nil))) (quote ((0 0 1 0 nil 0))) 6.0602 nil "" (om-make-point 852 349) (om-make-point 207 182)) (quote nil) (om-make-point 368 438) nil nil nil "name") (om-load-boxcomment "comment" (om-make-point 629 34) (quote "Tutorial Getting Started 11 - Relationship with the Csound orc and sco files II") "" (om-make-point 53 0) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((3 1 2 0 nil 0) (35 0 3 1 nil 0) (4 0 3 2 nil 0) (4 1 3 3 nil 0) (16 0 5 0 nil 1) (6 0 11 0 nil 2) (10 0 11 1 nil 0) (9 0 11 2 nil 0) (6 0 16 0 nil 2) (15 0 16 1 nil 0) (14 0 16 2 nil 0) (30 0 23 1 nil 0) (6 0 30 0 nil 2) (29 0 30 1 nil 0) (28 0 30 2 nil 0) (27 0 30 3 nil 0) (26 0 30 4 nil 0) (25 0 30 5 nil 0) (24 0 30 6 nil 0) (6 0 35 0 nil 2) (34 0 35 1 nil 0) (33 0 35 2 nil 0) (38 0 36 0 nil 0) (5 0 37 1 nil 0) (16 0 37 4 nil 1) (11 0 37 5 nil 3) (2 0 37 7 nil 0) (23 0 37 8 nil 0) (37 0 38 0 nil 0) (39 0 38 1 nil 1))) nil 6.0602))
