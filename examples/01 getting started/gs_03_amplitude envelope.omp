; OM File Header - Saved 2013/10/29 22:34:29
; (6.0602 :patc (om-make-point 10 10) (om-make-point 614 109) (om-make-point 816 524) "" 183 0 nil "2013/09/02 14:40:17")
; End File Header
; External resources 
; (list (list (quote :picture) "../../resources/pict/arrow_down_1") (list (quote :sound) "../../out-files/gs_03_B.aiff" "../../out-files/gs_03_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "gs_03_amplitude envelope" (quote ((om-load-boxcomment "comment 15" (om-make-point 44 88) (quote "B") "" (om-make-point 411 37) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 21" (om-make-point 44 88) (quote "A") "" (om-make-point 42 39) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 20" (om-make-point 29 465) (quote "|$|$|$|$|$|$|$|$|$|$$") "" (om-make-point 350 25) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 19" (om-make-point 60 30) (quote "numcols") "" (om-make-point 408 153) nil (om-make-color 0.9989267 0.059780777 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 60 30) (quote "numcols") "" (om-make-point 29 169) nil (om-make-color 0.9989267 0.059780777 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 18" (om-make-point 39 30) (quote ":edel") "" (om-make-point 465 133) nil (om-make-color 1.0 0.0 0.035351754) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 39 30) (quote ":edel") "" (om-make-point 81 157) nil (om-make-color 1.0 0.0 0.035351754) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 39 30) (quote ":durs") "" (om-make-point 494 101) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 39 30) (quote ":durs") "" (om-make-point 105 126) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 39 30) (quote ":amp") "" (om-make-point 492 74) nil (om-make-color 1.0 0.7482287 0.12633056) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 39 30) (quote ":amp") "" (om-make-point 114 97) nil (om-make-color 1.0 0.7482287 0.12633056) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 17" (om-make-point 39 30) (quote ":freq") "" (om-make-point 502 42) nil (om-make-color 0.019781232 0.1980896 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 49 30) (quote ":tables") "" (om-make-point 499 307) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 12" (om-make-point 49 30) (quote ":name") "" (om-make-point 461 290) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 11" (om-make-point 49 30) (quote ":name") "" (om-make-point 93 288) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 630 130) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 465 265) (om-make-point 79 30) "gs_03_B" "\"gs_03_B\"" nil) (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 435 334) nil nil nil nil 1) (om-load-boxcomment "comment 10" (om-make-point 44 30) (quote ":aenv") "" (om-make-point 586 143) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 386 125) (om-make-point 43 43) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 540 46) (om-make-point 95 30) (list 440 660 880) "(440 660 880)" nil) (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 529 77) (om-make-point 70 30) (list 0 -6 -12) "(0 -6 -12)" nil) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 532 105) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 501 137) (om-make-point 53 30) (list 0 1 2) "(0 1 2)" nil) (om-load-editor-box1 "ADD-1 2" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 437 178) (om-make-point 173 76) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 0 -6 -12))) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 440 660 880))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) 10)) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2) (list 1 1 1) (list 0 -6 -12) (list 440 660 880) (list 10 10 10))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-editor-box1 "gs_03_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 424 398) (om-make-point 171 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gs_03_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gs_03_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 157 292) (om-make-point 79 30) "gs_03_A" "\"gs_03_A\"" nil) (om-load-boxcomment "comment 5" (om-make-point 44 30) (quote ":aenv") "" (om-make-point 190 171) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 39 30) (quote ":freq") "" (om-make-point 117 67) nil (om-make-color 0.019781232 0.1980896 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 7 141) (om-make-point 43 43) nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 153 71) (om-make-point 95 30) (list 440 660 880) "(440 660 880)" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 151 102) (om-make-point 70 30) (list 0 -6 -12) "(0 -6 -12)" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 144 130) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 116 162) (om-make-point 53 30) (list 0 1 2) "(0 1 2)" nil) (om-load-boxcomment "comment" (om-make-point 402 34) (quote "Tutorial Getting Started 03 - Amplitude Envelope") "" (om-make-point 54 0) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 50 203) (om-make-point 173 76) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 3))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 1 2))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 0 -6 -12))) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 440 660 880))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 1000 1024)) (quote (0 10 2 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 1 2) (list 1 1 1) (list 0 -6 -12) (list 440 660 880) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 42 297) nil nil nil nil 1) (om-load-editor-box1 "gs_03_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 52 359) (om-make-point 171 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gs_03_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gs_03_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 522 291) (om-make-point 215 30) "f10 0 1024 7 0 100 10 900 2 24 0" "\"f10 0 1024 7 0 100 10 900 2 24 0\"" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 275 91) (om-make-point 71 30) (list 0 10 2 0) "(0 10 2 0)" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 214 48) (om-make-point 120 30) (list 0 100 1000 1024) "(0 100 1000 1024)" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 229 132) (om-make-point 84 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 1000 1024)) (quote (0 10 2 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (quote ((24 0 17 0 nil 0) (16 0 17 1 nil 0) (38 0 17 2 nil 0) (23 0 19 0 nil 2) (19 0 24 1 nil 5) (23 0 24 4 nil 2) (22 0 24 5 nil 3) (21 0 24 6 nil 4) (20 0 24 7 nil 1) (15 0 24 8 nil 0) (17 0 25 0 nil 0) (33 0 29 0 nil 2) (29 0 35 1 nil 5) (33 0 35 4 nil 2) (32 0 35 5 nil 3) (31 0 35 6 nil 4) (30 0 35 7 nil 1) (41 0 35 8 nil 0) (35 0 36 0 nil 0) (26 0 36 1 nil 0) (36 0 37 0 nil 0) (40 0 41 1 nil 0) (39 0 41 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "arrow_down_1" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "arrow_down_1" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 619 173)) (setf (pict-size newpict) (om-make-point 50 112)) newpict)) 6.0602))
