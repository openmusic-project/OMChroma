; OM File Header - Saved 2025/02/06 18:22:39
; (6.0602 :patc (om-make-point 118 10) (om-make-point 584 105) (om-make-point 762 651) "" 183 0 nil "2025/02/06 18:22:39")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/gs_10.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "gs_10 relationship with the csound orc and sco files I" (quote ((om-load-boxcomment "comment 6" (om-make-point 100 67) (quote "| Player$| $|") "" (om-make-point 344 468) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 161 68) (quote "| Sound rendering$| $|") "" (om-make-point 345 385) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 214 30) (quote "<- double click to open the editor") "" (om-make-point 353 339) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 210 68) (quote "| Matrix to the Orchestra$| 8 rows$|") "" (om-make-point 344 299) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 200 119) (quote "| Csound score$| 8 lines (i-statements)$|$|$|$|") "" (om-make-point 339 49) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 222 102) (quote "| Convertion to the matrix$|$|$|$|") "" (om-make-point 343 185) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 626 34) (quote "Tutorial Getting Started 10 -  Relationship with the Csound orc and sco files I") "" (om-make-point 53 0) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "name&tables" (om-load-patch-abs1 "name&tables" (quote ((om-load-boxout "output 2" 1 (om-make-point 143 186) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "tables" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 25 138) (om-make-point 64 30) "gs_10" "\"gs_10\"" nil) (om-load-boxout "output" 0 (om-make-point 35 176) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "name" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 151 137) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 11 96) (om-make-point 214 30) "f12 0 1024 5 0.1 912 10 112 0.1" "\"f12 0 1024 5 0.1 912 10 112 0.1\"" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 10 69) (om-make-point 214 30) "f11 0 1024 5 0.1 500 10 524 0.1" "\"f11 0 1024 5 0.1 500 10 524 0.1\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 11 41) (om-make-point 214 30) "f10 0 1024 5 0.1 100 10 924 0.1" "\"f10 0 1024 5 0.1 100 10 924 0.1\"" nil))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (6 0 3 0 nil 1) (5 0 3 1 nil 2) (4 0 3 2 nil 3))) 6.0602 nil "" (om-make-point 1262 152) (om-make-point 255 295)) (quote nil) (om-make-point 159 385) nil nil nil "name&tables") (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "tables" (quote :tables) nil nil))) (om-make-point 274 399) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 80 242) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "aenv" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 287 179) nil nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 32 120) (om-make-point 27 30) 5 "5" nil) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 67 150) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 56 195) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 63 82) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 71 20) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 87 276) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 19 279) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (3 0 1 1 nil 0) (1 0 2 0 nil 0) (4 0 3 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "aenv" nil) (om-load-boxwithed1 (quote box-with-win) "freq" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 260 232) nil nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 32 121) (om-make-point 27 30) 4 "4" nil) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 67 151) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 56 196) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 63 83) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 71 21) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 87 277) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 19 280) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (3 0 1 1 nil 0) (1 0 2 0 nil 0) (4 0 3 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "freq" nil) (om-load-boxwithed1 (quote box-with-win) "amp" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 231 180) nil nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 32 129) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 67 159) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 56 204) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 63 91) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 71 29) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 87 285) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 19 288) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (3 0 1 1 nil 0) (1 0 2 0 nil 0) (4 0 3 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "amp" nil) (om-load-boxwithed1 (quote box-with-win) "edel" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 173 180) nil nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 31 129) (om-make-point 27 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 66 159) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 55 204) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 62 91) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 70 29) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 86 285) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 18 288) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (3 0 1 1 nil 0) (1 0 2 0 nil 0) (4 0 3 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "edel" nil) (om-load-boxwithed1 (quote box-with-win) "dur" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 204 232) nil nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 31 127) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 66 157) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 55 202) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 62 89) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 70 27) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 86 283) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 18 286) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (3 0 1 1 nil 0) (1 0 2 0 nil 0) (4 0 3 0 nil 0) (2 1 5 0 nil 0) (2 0 6 0 nil 0))) 1 "dur" nil) (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 197 48) (om-make-point 129 123) (load-buffer-textfile (quote ("(i1	0	1	0	440	10)" "(i1	2	1	-6	550	11)" "(i1	4	1	-12 	660 	12)" "(i1 	6 	5	-6	770	11)" "(i1	7	4	-6	880	11)" "(i1	8	3	-6	990	11)" "(i1	9	2	-6	660	11)" "(i1	10	1	-6	650	11)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 42 295) (om-make-point 287 75) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 8))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0 2 4 6 7 8 9 10))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (list 1 1 1 5 4 3 2 1))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 0 -6 -12 -6 -6 -6 -6 -6))) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 440 550 660 770 880 990 660 650))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (list 10 11 12 11 11 11 11 11))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 2 4 6 7 8 9 10) (list 1 1 1 5 4 3 2 1) (list 0 -6 -12 -6 -6 -6 -6 -6) (list 440 550 660 770 880 990 660 650) (list 10 11 12 11 11 11 11 11))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 109 45) (om-make-point 535 594) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))))) nil nil nil t) (om-load-editor-box1 "gs_10.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 169 465) (om-make-point 171 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gs_10" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gs_10.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil t))) (quote ((16 0 8 0 nil 0) (7 0 8 1 nil 1) (7 1 8 2 nil 2) (13 0 9 0 nil 0) (15 1 10 0 nil 0) (15 1 11 0 nil 0) (15 1 12 0 nil 0) (15 1 13 0 nil 0) (15 1 14 0 nil 0) (9 0 16 1 nil 0) (13 0 16 4 nil 0) (14 0 16 5 nil 0) (12 0 16 6 nil 0) (11 0 16 7 nil 0) (10 0 16 8 nil 0) (8 0 17 0 nil 0))) nil 6.0602))
