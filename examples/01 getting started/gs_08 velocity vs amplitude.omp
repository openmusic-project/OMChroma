; OM File Header - Saved 2013/10/29 22:34:29
; (6.0602 :patc (om-make-point 280 10) (om-make-point 160 109) (om-make-point 1311 872) "" 183 0 nil "2013/09/02 14:40:18")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/gs_08_B.aiff" "../../out-files/gs_08_C.aiff" "../../out-files/gs_08_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "gs_08 velocity vs amplitude" (quote ((om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 659 459) (om-make-point 56 51) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 269 451) (om-make-point 56 51) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-boxcall (quote abstraction) "dB 2" (om-load-patch-abs1 "dB" (quote ((om-load-boxcomment "comment" (om-make-point 194 39) (quote "This number is  1 dB increase.") "" (om-make-point 24 46) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 166 162) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "dB" nil) (om-load-boxin "velocity" 0 (om-make-point 210 55) "" "velocity" nil nil) (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 106 116) (om-make-point 149 39) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 47 71) (om-make-point 123 30) 1.122462 "1.12246204830937" nil))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1010 365) nil nil nil nil) (om-load-boxcomment "comment 8" (om-make-point 24 737) (quote "|$|$|$|$|$|$|$|$|$|$|$|$|$|$|$|$") "" (om-make-point 747 50) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "dB" (om-load-patch-abs1 "dB" (quote ((om-load-boxcomment "comment" (om-make-point 194 39) (quote "This number is 1 dB increase.") "" (om-make-point 65 7) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 207 104) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "dB" nil) (om-load-boxin "velocity" 0 (om-make-point 251 2) "" "velocity" nil nil) (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or list" "A" 1) (om-load-inputfun (quote input-funbox) "number or list" "B" 1))) (om-make-point 147 63) (om-make-point 149 39) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 88 32) (om-make-point 123 30) 1.122462 "1.12246204830937" nil))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0))) 6.0602 nil "" (om-make-point 49 793) (om-make-point 346 195)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 591 384) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 575 610) (om-make-point 79 30) "gs_08_B" "\"gs_08_B\"" nil) (om-load-boxcomment "comment 38" (om-make-point 49 30) (quote ":name") "" (om-make-point 514 606) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 36" (om-make-point 39 30) (quote ":freq") "" (om-make-point 441 442) nil (om-make-color 0.02375424 0.057632923 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 35" (om-make-point 39 30) (quote ":durs") "" (om-make-point 608 456) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "ADD-1 3" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 469 520) (om-make-point 173 76) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 16))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (list 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 1.9999999 3.9999993 7.999998 15.999995 31.999989 63.99997 127.99993 255.99985 511.99966 1023.9992 2047.9983 4095.9964 8191.992 16383.982 32767.963 65535.92))) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5) (list 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5) (list 1.9999999 3.9999993 7.999998 15.999995 31.999989 63.99997 127.99993 255.99985 511.99966 1023.9992 2047.9983 4095.9964 8191.992 16383.982 32767.963 65535.92) (list 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote genfun) "SYNTHESIZE 3" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 461 615) nil nil nil nil 1) (om-load-editor-box1 "gs_08_B.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 471 677) (om-make-point 171 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gs_08_B" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gs_08_B.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000 6100 70)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 443 181) (om-make-point 273 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000)) :ldur (quote ((500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500))) :lvel (quote ((6) (12) (18) (24) (30) (36) (42) (48) (54) (60) (66) (72) (78) (84) (90) (96))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 36 2)) t nil nil t) (om-load-boxcall (quote genfun) "OM/ 6" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 639 336) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/ 5" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 545 378) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST 2" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 531 299) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH 3" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 394 424) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F 3" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 457 286) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 9" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 432 358) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 29" (quote t) (quote nil) (om-make-point 429 130) (om-make-point 52 30) (list 6000) "(6000)" nil) (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 539 130) (om-make-point 45 30) (list 500) "(500)" nil) (om-load-boxcall (quote bastype) "aux 27" (quote t) (quote nil) (om-make-point 556 344) (om-make-point 47 26) 1000.0 "1000.0" nil) (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 657 299) (om-make-point 53 30) 1000.0 "1000.0" nil) (om-load-boxwithed1 (quote box-with-win) "chord_comp 3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 466 368) nil nil nil (list (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 45 234) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 47 180) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 47 112) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 55 46) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 70 311) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 4 314) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "chord_comp" nil) (om-load-boxwithed1 (quote box-with-win) "repeat_edel 3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chord_comp" nil) (om-load-inputfun (quote input-funbox) "" "edel" nil))) (om-make-point 503 451) nil nil nil (list (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 119 330) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 73 261) nil nil nil nil 3) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 69 191) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 42 122) nil nil nil nil 1) (om-load-boxin "edel" 1 (om-make-point 52 49) "" "edel" nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 118 119) nil nil nil nil 1) (om-load-boxin "chord_comp" 0 (om-make-point 105 49) "" "chord_comp" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 109 403) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 16 331) nil nil nil 0)) (quote ((1 1 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 5 0 nil 0) (0 0 7 0 nil 0) (1 0 8 0 nil 0))) 1 "repeat_edel" nil) (om-load-boxcall (quote genfun) "FLAT 8" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 634 382) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 482 130) (om-make-point 56 30) (list 0 500) "(0 500)" nil) (om-load-boxcall (quote genfun) "ARITHM-SER 2" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 597 107) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 590 72) (om-make-point 21 30) 6 "6" nil) (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 619 73) (om-make-point 28 30) 96 "96" nil) (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 662 73) (om-make-point 21 30) 6 "6" nil) (om-load-boxcomment "comment 34" (om-make-point 39 30) (quote ":edel") "" (om-make-point 549 409) nil (om-make-color 1.0 0.0 0.035351754) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 33" (om-make-point 44 30) (quote "midic") "" (om-make-point 460 149) nil (om-make-color 0.02375424 0.057632923 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 32" (om-make-point 39 30) (quote "onset") "" (om-make-point 508 148) nil (om-make-color 1.0 0.011651456 0.047027707) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 31" (om-make-point 39 30) (quote "dur") "" (om-make-point 560 150) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "FLAT 7" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 596 283) nil nil nil nil 1) (om-load-boxcomment "comment 30" (om-make-point 39 30) (quote ":amp") "" (om-make-point 569 442) nil (om-make-color 1.0 0.7482287 0.12633056) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 29" (om-make-point 39 30) (quote "vel") "" (om-make-point 594 151) nil (om-make-color 1.0 0.7482287 0.12633056) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 28" (om-make-point 60 30) (quote "numcols") "" (om-make-point 415 470) nil (om-make-color 0.9989267 0.059780777 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 27" (om-make-point 105 64) (quote "B") "" (om-make-point 456 68) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 26" (om-make-point 24 737) (quote "|$|$|$|$|$|$|$|$|$|$|$|$|$|$|$|$") "" (om-make-point 350 47) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 25" (om-make-point 43 88) (quote "C") "" (om-make-point 863 92) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 22" (om-make-point 105 64) (quote "A") "" (om-make-point 74 59) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 23" (om-make-point 60 30) (quote "numcols") "" (om-make-point 29 461) nil (om-make-color 0.9989267 0.059780777 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 24" (om-make-point 60 30) (quote "numcols") "" (om-make-point 834 460) nil (om-make-color 0.9989267 0.059780777 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 21" (om-make-point 39 30) (quote "vel") "" (om-make-point 1021 138) nil (om-make-color 1.0 0.7482287 0.12633056) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 20" (om-make-point 39 30) (quote "vel") "" (om-make-point 208 142) nil (om-make-color 1.0 0.7482287 0.12633056) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 19" (om-make-point 39 30) (quote ":amp") "" (om-make-point 183 433) nil (om-make-color 1.0 0.7482287 0.12633056) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "FLAT 6" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 210 344) nil nil nil nil 1) (om-load-boxcomment "comment 18" (om-make-point 39 30) (quote "dur") "" (om-make-point 174 141) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 17" (om-make-point 39 30) (quote "dur") "" (om-make-point 1059 88) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 16" (om-make-point 39 30) (quote "onset") "" (om-make-point 929 92) nil (om-make-color 1.0 0.011651456 0.047027707) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 15" (om-make-point 39 30) (quote "onset") "" (om-make-point 122 139) nil (om-make-color 1.0 0.011651456 0.047027707) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 14" (om-make-point 44 30) (quote "midic") "" (om-make-point 884 69) nil (om-make-color 0.02375424 0.057632923 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 11" (om-make-point 44 30) (quote "midic") "" (om-make-point 74 140) nil (om-make-color 0.02375424 0.057632923 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 13" (om-make-point 39 30) (quote ":edel") "" (om-make-point 163 390) nil (om-make-color 1.0 0.0 0.035351754) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 12" (om-make-point 39 30) (quote ":amp") "" (om-make-point 987 428) nil (om-make-color 1.0 0.7482287 0.12633056) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "FLAT 5" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1015 272) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 1021 123) (om-make-point 180 30) (list (list 96 84) (list 84) (list 96 84) (list 72) (list 72)) "((96 84)(84)(96 84)(72)(72))" nil) (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 276 64) (om-make-point 28 30) 16 "16" nil) (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 233 64) (om-make-point 35 30) 128 "128" nil) (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 204 64) (om-make-point 21 30) 8 "8" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 215 101) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 96 121) (om-make-point 56 30) (list 0 500) "(0 500)" nil) (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 938 70) (om-make-point 63 30) (list 0 1000) "(0 1000)" nil) (om-load-boxcomment "comment 6" (om-make-point 49 30) (quote ":name") "" (om-make-point 933 595) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 44 30) (quote ":aenv") "" (om-make-point 1075 466) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 39 30) (quote ":freq") "" (om-make-point 861 431) nil (om-make-color 0.02375424 0.057632923 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 39 30) (quote ":durs") "" (om-make-point 1028 445) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 39 30) (quote ":edel") "" (om-make-point 969 403) nil (om-make-color 1.0 0.0 0.035351754) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 889 509) (om-make-point 173 76) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 7))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0.0 0.0 1.0 2.0 2.0 3.0 4.0))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (list 2.0 1.0 1.0 3.0 3.0 2.0 1.0))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 65535.92 16383.982 16383.982 65535.92 16383.982 4095.9964 4095.9964))) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 349.22824 659.2551 587.3295 329.62756 523.2511 987.7666 174.61412))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0.0 0.0 1.0 2.0 2.0 3.0 4.0) (list 2.0 1.0 1.0 3.0 3.0 2.0 1.0) (list 65535.92 16383.982 16383.982 65535.92 16383.982 4095.9964 4095.9964) (list 349.22824 659.2551 587.3295 329.62756 523.2511 987.7666 174.61412) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 881 604) nil nil nil nil 1) (om-load-editor-box1 "gs_08_C.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 890 666) (om-make-point 171 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gs_08_C" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gs_08_C.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 1122 372) (om-make-point 78 30) (list 0 10 10 0) "(0 10 10 0)" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 1105 405) (om-make-point 84 69) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 24 1000 1024)) (quote (0 10 10 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000 6100 70)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 864 170) (om-make-point 273 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500 7600) (7400) (6400 7200) (8300) (5300))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((2000 1000) (1000) (3000 3000) (2000) (1000))) :lvel (quote ((96 84) (84) (96 84) (72) (72))) :loffset (quote ((0 0) (0) (0 0) (0) (0))) :lchan (quote ((1 1) (1) (1 1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0) (0 0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 1 (om-make-point 27 279) (om-make-point 898 437) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 36 2)) t nil nil t) (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 996 599) (om-make-point 79 30) "gs_08_C" "\"gs_08_C\"" nil) (om-load-boxcall (quote genfun) "OM/ 2" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 1059 325) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 965 376) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 951 288) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 814 413) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 877 275) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 852 347) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 783 41) (om-make-point 286 30) (list (list 6500 7600) (list 7400) (list 6400 7200) (list 8300) (list 5300)) "((6500 7600) (7400) (6400 7200)(8300)(5300))" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1004 70) (om-make-point 246 30) (list (list 2000 1000) (list 1000) (list 3000) (list 2000) (list 1000)) "((2000 1000)(1000)(3000)(2000)(1000))" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 977 331) (om-make-point 46 26) 1000.0 "1000.0" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1077 288) (om-make-point 53 30) 1000.0 "1000.0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1085 335) (om-make-point 113 30) (list 0 24 1000 1024) "(0 24 1000 1024)" nil) (om-load-boxwithed1 (quote box-with-win) "chord_comp 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 886 357) nil nil nil (list (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 45 234) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 47 180) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 47 112) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 55 46) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 70 311) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 4 314) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "chord_comp" nil) (om-load-boxwithed1 (quote box-with-win) "repeat_edel 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chord_comp" nil) (om-load-inputfun (quote input-funbox) "" "edel" nil))) (om-make-point 923 440) nil nil nil (list (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 119 330) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 73 261) nil nil nil nil 3) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 69 191) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 42 122) nil nil nil nil 1) (om-load-boxin "edel" 1 (om-make-point 52 49) "" "edel" nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 118 119) nil nil nil nil 1) (om-load-boxin "chord_comp" 0 (om-make-point 105 49) "" "chord_comp" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 109 403) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 16 331) nil nil nil 0)) (quote ((1 1 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 5 0 nil 0) (0 0 7 0 nil 0) (1 0 8 0 nil 0))) 1 "repeat_edel" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1054 371) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 248 373) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "repeat_edel" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "chord_comp" nil) (om-load-inputfun (quote input-funbox) "" "edel" nil))) (om-make-point 117 442) nil nil nil (list (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 99 290) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 79 221) nil nil nil nil 3) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 75 159) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 42 94) nil nil nil nil 1) (om-load-boxin "edel" 1 (om-make-point 52 30) "" "edel" nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 118 91) nil nil nil nil 1) (om-load-boxin "chord_comp" 0 (om-make-point 105 30) "" "chord_comp" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 140 288) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 17 288) nil nil nil 0)) (quote ((1 1 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 5 0 nil 0) (0 0 7 0 nil 0) (1 0 8 0 nil 0))) 1 "repeat_edel" nil) (om-load-boxwithed1 (quote box-with-win) "chord_comp" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 80 359) nil nil nil (list (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 48 199) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 50 153) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 50 89) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 58 25) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 73 270) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 7 272) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "chord_comp" nil) (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 271 290) (om-make-point 53 30) 1000.0 "1000.0" nil) (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 190 312) (om-make-point 53 30) 1000.0 "1000.0" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 153 121) (om-make-point 45 30) (list 500) "(500)" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 43 121) (om-make-point 52 30) (list 6000) "(6000)" nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 46 349) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F 2" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 71 277) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 12 415) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST 4" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 145 290) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/ 4" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 159 350) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/ 3" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 253 327) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 187 601) (om-make-point 79 30) "gs_08_A" "\"gs_08_A\"" nil) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000 6100 70)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 57 172) (om-make-point 273 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000)) :ldur (quote ((500) (500) (500) (500) (500) (500) (500) (500))) :lvel (quote ((8) (24) (40) (56) (72) (88) (104) (120))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 381 20) (om-make-point 1246 631) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 36 2)) t nil nil t) (om-load-editor-box1 "gs_08_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 85 668) (om-make-point 171 76) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "gs_08_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "gs_08_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE 2" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil))) (om-make-point 75 606) nil nil nil nil 1) (om-load-editor-box1 "ADD-1 2" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) nil nil))) (om-make-point 83 511) (om-make-point 173 76) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 8))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) (list 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5))) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) (list 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5))) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) (list 8 24 40 56 72 88 104 120))) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5) (list 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5) (list 8 24 40 56 72 88 104 120) (list 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555 261.62555) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0 25 1000 1024)) (quote (0 10 2 0)) (quote gen07) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 513) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 549 493) (om-make-point 10 40))) nil nil nil t) (om-load-boxcomment "comment 10" (om-make-point 39 30) (quote ":durs") "" (om-make-point 222 447) nil (om-make-color 0.16495335 1.0 0.030255199) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 39 30) (quote ":freq") "" (om-make-point 55 433) nil (om-make-color 0.02375424 0.057632923 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 49 30) (quote ":name") "" (om-make-point 124 597) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 449 34) (quote "Tutorial Getting Started 08 - Velocity versus Amplitude") "" (om-make-point 57 0) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((57 0 2 0 nil 4) (35 0 4 0 nil 4) (16 0 9 1 nil 5) (24 0 9 4 nil 2) (25 0 9 5 nil 3) (4 0 9 6 nil 4) (18 0 9 7 nil 1) (0 0 9 8 nil 0) (9 0 10 0 nil 0) (5 0 10 1 nil 0) (10 0 11 0 nil 0) (19 0 12 1 nil 1) (26 0 12 2 nil 2) (20 0 12 3 nil 3) (27 0 12 4 nil 4) (12 3 13 0 nil 3) (22 0 13 1 nil 0) (15 0 14 0 nil 2) (21 0 14 1 nil 0) (12 2 15 0 nil 2) (18 0 16 0 nil 1) (12 1 17 0 nil 1) (17 0 18 0 nil 1) (17 0 23 0 nil 1) (23 0 24 0 nil 1) (14 0 24 1 nil 2) (13 0 25 0 nil 3) (28 0 27 0 nil 0) (29 0 27 1 nil 0) (30 0 27 2 nil 0) (12 4 35 0 nil 4) (105 4 48 0 nil 4) (75 4 57 0 nil 4) (61 0 62 0 nil 0) (60 0 62 1 nil 0) (59 0 62 2 nil 0) (80 0 70 1 nil 5) (89 0 70 4 nil 2) (90 0 70 5 nil 3) (2 0 70 6 nil 4) (82 0 70 7 nil 1) (74 0 70 8 nil 0) (70 0 71 0 nil 0) (76 0 71 1 nil 0) (71 0 72 0 nil 0) (87 0 74 1 nil 0) (73 0 74 2 nil 0) (83 0 75 1 nil 1) (64 0 75 2 nil 2) (84 0 75 3 ((om-make-point 1125 98) (om-make-point 1125 112) (om-make-point 985 111) (om-make-point 984 170)) 3) (58 0 75 4 nil 4) (75 3 77 0 nil 3) (86 0 77 1 nil 0) (79 0 78 0 nil 2) (85 0 78 1 nil 0) (75 2 79 0 nil 2) (82 0 80 0 nil 1) (75 1 81 0 nil 1) (81 0 82 0 nil 1) (81 0 88 0 nil 1) (88 0 89 0 nil 1) (78 0 89 1 nil 2) (77 0 90 0 nil 3) (103 0 91 0 nil 3) (93 0 92 0 nil 1) (102 0 92 1 nil 2) (99 0 93 0 nil 1) (99 0 98 0 nil 1) (105 1 99 0 nil 1) (98 0 100 0 nil 1) (105 2 101 0 nil 2) (101 0 102 0 nil 2) (95 0 102 1 nil 0) (105 3 103 0 nil 3) (94 0 103 1 nil 0) (97 0 105 1 nil 1) (63 0 105 2 nil 2) (96 0 105 3 nil 3) (62 0 105 4 nil 4) (107 0 106 0 nil 0) (108 0 107 0 nil 0) (104 0 107 1 nil 0) (100 0 108 1 nil 5) (92 0 108 4 nil 2) (91 0 108 5 nil 3) (48 0 108 6 nil 4) (98 0 108 7 nil 1) (1 0 108 8 nil 0))) nil 6.0602))
