; OM File Header - Saved 2025/02/06 18:22:39
; (6.0602 :patc (om-make-point 118 110) (om-make-point 291 152) (om-make-point 583 466) "" 183 0 nil "2025/02/06 17:59:42")
; End File Header
; External resources 
; (list (list (quote :sound) "../../out-files/uf3_A.aiff"))
(in-package :om)(load-lib-for (quote ("OMChroma")))(setf *om-current-persistent* (om-load-patch1 "uf_03 multiply for a random number" (quote ((om-load-boxcomment "comment 6" (om-make-point 226 60) (quote "select$nil to see the .sco file in the textfile$t to call the Csound synthesis") "" (om-make-point 211 245) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 46 34) (quote "max") "" (om-make-point 112 29) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 46 34) (quote "min") "" (om-make-point 65 29) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 52 136) (om-make-point 27 30) 2 "2" nil) (om-load-editor-box1 "ADD-1" (quote add-1) (quote ((om-load-inputfun (quote input-funbox) "Synthesis event" "self" nil) (om-load-inputfun (quote input-funbox) "Number of components [int]" "numcols" 1) (om-load-inputfun (quote input-funbox) "Event offset [s]" "action-time" 0) (om-load-inputfun (quote input-funbox) "A lambda function applied to each component" "user-fun" nil) (om-load-inputkeyword (quote editor-keyword) "" "e-dels" (quote :e-dels) 0 nil) (om-load-inputkeyword (quote editor-keyword) "" "durs" (quote :durs) 1 nil) (om-load-inputkeyword (quote editor-keyword) "" "amp" (quote :amp) -6.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "freq" (quote :freq) 440.0 nil) (om-load-inputkeyword (quote editor-keyword) "" "aenv" (quote :aenv) (list (quote make-cs-table) (quote (quote gen07)) (list (quote list) 0 2048 4096) (list (quote list) 0 100 0) 1 "?" 4097) nil))) (om-make-point 28 166) (om-make-point 183 61) (let ((rep (if (find-class (quote add-1) nil) (let ((rep (make-instance (quote add-1) :numcols 2))) (when (member (quote e-dels) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote e-dels)) 0)) (when (member (quote durs) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote durs)) 1)) (when (member (quote amp) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote amp)) -6.0)) (when (member (quote freq) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote freq)) (list 440 440))) (when (member (quote aenv) (get-init-slots-of-class (quote add-1)) :key (quote car)) (setf (slot-value rep (quote aenv)) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj))) (setf (lcontrols rep) (list)) (setf (action-time rep) 0) (setf (data rep) (list (list 0 0) (list 1 1) (list -6.0 -6.0) (list 440 440) (list (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj) (let ((newobj (when (find-class (quote gen07) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2048.0 4096.0)) (quote (0.0 100.0 0.0)) (quote gen07) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (stime newobj) 0) (setf (size newobj) 4097) (setf (id newobj) "?")) newobj)))) rep)))) (put-precision rep (list 3)) rep) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 943 547) (om-make-point 263 140))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 123 125) (om-make-point 76 30) (list 440 440) "(440 440)" nil) (om-load-boxcomment "comment 3" (om-make-point 45 58) (quote "A") "" (om-make-point 38 76) nil (om-make-color 1.0 0.0 0.011788845) (om-make-font "Verdana" 36.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "uf3_A" (om-load-patch-abs1 "uf3_A" (quote ((om-load-boxin "max" 3 (om-make-point 240 79) "" "max" nil nil) (om-load-boxin "min" 2 (om-make-point 208 79) "" "min" nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 183 214) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 200 145) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 97 211) (om-make-point 53 30) "freq" "\"freq\"" nil) (om-load-boxcall (quote genfun) "COMP-FIELD 2" (quote comp-field) (quote ((om-load-inputfun (quote input-funbox) "a class-array component" "SELF" nil) (om-load-inputfun (quote input-funbox) "a line identifier" "LINEID" 0) (om-load-inputfun (quote input-funbox) "a value" "VAL" nil))) (om-make-point 75 254) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 146 118) (om-make-point 53 30) "freq" "\"freq\"" nil) (om-load-boxcall (quote genfun) "COMP-FIELD" (quote comp-field) (quote ((om-load-inputfun (quote input-funbox) "a class-array component" "SELF" nil) (om-load-inputfun (quote input-funbox) "a line identifier" "LINEID" 0))) (om-make-point 124 154) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GET-COMP" (quote get-comp) (quote ((om-load-inputfun (quote input-funbox) "a class-array instance" "SELF" nil) (om-load-inputfun (quote input-funbox) "component number" "N" 0))) (om-make-point 63 74) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 95 312) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "list" nil) (om-load-boxin "comp-num" 1 (om-make-point 110 6) "" "comp-num" nil nil) (om-load-boxin "matrix" 0 (om-make-point 64 5) "" "matrix" nil nil))) (quote ((7 0 2 0 nil 0) (3 0 2 1 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 5 2 nil 0) (8 0 7 0 nil 0) (6 0 7 1 nil 0) (11 0 8 0 nil 0) (10 0 8 1 nil 0) (5 0 9 0 nil 0))) 6.0602 nil "" (om-make-point 525 207) (om-make-point 362 403)) (quote ((om-load-inputfun (quote input-funbox) "" "matrix" nil) (om-load-inputfun (quote input-funbox) "" "comp-num" nil) (om-load-inputfun (quote input-funbox) "" "min" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 82 97) nil nil "l" "uf3_A") (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 66 57) (om-make-point 45 30) 0.95 "0.95" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 115 58) (om-make-point 45 30) 1.05 "1.05" nil) (om-load-editor-box1 "uf3_A.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 39 336) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "uf3_A" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "uf3_A.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 476 293) (om-make-point 370 280) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 125 334) (om-make-point 86 52) (load-buffer-textfile (quote ("" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 90 271) nil nil nil nil 2))) (setf (numouts box) 2) box) (om-load-editor-box1 "SINGLE-ITEM-LIST" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 151 236) (om-make-point 55 78) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 39 45) "untitled" :range (quote ("nil" "t"))))) (setf (di-data rep) (quote (nil t))) (om-set-selected-item-index rep 1) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote genfun) "SYNTHESIZE" (quote synthesize) (quote ((om-load-inputfun (quote input-funbox) "something to synthesize..." "ELEMENTS" nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "run" (quote :run) nil nil))) (om-make-point 27 267) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 48 233) (om-make-point 63 30) "uf3_A" "\"uf3_A\"" nil) (om-load-boxcomment "comment 2" (om-make-point 42 30) (quote ":run") "" (om-make-point 104 242) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 410 34) (quote "Tutorial User-fun 3 Multiply for a random number") "" (om-make-point 57 0) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (quote ((3 0 4 1 nil 0) (7 0 4 3 nil 0) (5 0 4 7 nil 0) (8 0 7 2 nil 0) (9 0 7 3 nil 0) (14 0 10 0 nil 0) (12 1 11 0 nil 0) (14 0 12 0 nil 0) (4 0 14 0 nil 0) (15 0 14 1 nil 0) (13 0 14 2 nil 2))) nil 6.0602))
