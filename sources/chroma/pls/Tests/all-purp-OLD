(in-package chroma);*****************************************************************************;-------| PULS SYSTEM;-------| This file is: $PLSpls/allpurp.ll;-------| Version V1.0: Feb 7, 1986;-------| By Marco Stroppa;-------| Copyright 1986 MIT;*****************************************************************************; ALL-PURPOSE FUNCTIONS INDEPENDENT OF THE PARTICULAR TYPE; Each of the functions automatically dispatches on the type of the data;	structure to a particular function called:;		       		   "<ALL-PURPOSE-NAME>_<DATA-TYPE>"; Recognized types are contained in #:marco:pls:TYPES& (see default.ll); AVAILABLE FUNCTIONS:;	PREDICATES:	is-empty;	INFO:		sizeof;			prnt;			short-prnt;	NAME:		is-empty  (PREDICATE);	TYPE:		Expr with 1 argument;	CALL:		(is-empty datum [arg1 ... argN]);	FUNCTION:	test whether datum is empty;	VALUE:		t or () depending on the test;	SOURCE:		$PLSsys/allpurp.ll((defun is-empty (datum)    (funcall (read-from-string              (concatenate 'string "is-empty_" (string-downcase (pls-type datum))))              datum));	NAME:		sizeof  (INFO);	TYPE:		Expr with 1 or more arguments;	CALL:		(sizeof datum [arg1 ... argN]));	FUNCTION:	return the size (or number of elements) of datum;	VALUE:		the number above;	SOURCE:		$PLSsys/allpurp.ll(defun sizeof (datum)    (let ((datca (car datum))	  (datcd (cdr datum)))       (if (null datcd)	   (funcall (read-from-string(concatenate 'string 'sizeof_ (string-downcase (pls-type datca)))) datca)	   (funcall (read-from-string(concatenate 'string 'sizeof_ (string-downcase (pls-type datca)))) datca datcd))));	NAME:		prnt/short-prnt  (INFO);	TYPE:		Expr with n arguments;	CALL:		(prnt datum1 ... datumN);			(short-prnt datum1 ... datumN);	FUNCTION:	nicely or shortely print data structures;	VALUE:		the string 'done;	SOURCE:		$PLSsys/allpurp.ll(defun prnt (&rest data)    (mapc (lambda (datum)		  (if (is-tagged datum)		      (funcall (read-from-string(concatenate 'string "print_" (string-downcase (pls-type datum)))) datum)		      (print datum)))	  data)    'done)(defun short-prnt (&rest data)    (mapc (lambda (datum)	       (if (is-tagged datum)		   (funcall (read-from-string(concatenate 'string "short-print_" (string-downcase (pls-type datum)))) datum)		   (print datum)))	  data)    'done)