(in-package chroma)

;CTL2 remplace Yakafer 

(defmethod CTL2 ((self om::class-array) (my-model chroma-model) ctl-model
                 &key (outfile "yaka-out") (args-yaka-user nil)
                 (by-time nil))     
  "Generate a synthesis object by combining a control and an analysis model.
Write in the Intermediate-files folder by default."
  (setf outfile (get-cr-path :out :name outfile :type ctl2))
                                
  (let ((n-fql (1- (nev my-model)))      ; n-fql - 1 , nmarkers - 2
        resc-min resc-max gblamp-val )
    ; ? si outfile nil : stream pas vers fichier mais vers "load" ?
    (with-open-file  (outstream  outfile :direction :output :if-exists :supersede)
      (format  outstream "(defun cr::ctl2-result() (list ~%")
      (if by-time
        (setf resc-min (begin-time my-model) resc-max (get-nth-time my-model n-fql))
        (setf resc-min 0 resc-max n-fql))
      ; FQL LOOP     
      (loop for i from 0 to  n-fql
           ; do (print i) 
            do (CTL2_compute self my-model ctl-model i outstream args-yaka-user))
      (format outstream "))~%"))
    (load outfile))
  (cr::ctl2-result))


(defmethod CTL2_compute ((self om::class-array)(my-model chroma-model) ctl-model my-rank outstream 
args-yaka-user)
  "ctl2 subroutine, process 1 ptl/fql"
  (declare (special outstream my-model  my-rank))
  (let*(
        (my-time (get-nth-time my-model my-rank))
        (my-dur (get-nth-dur my-model my-rank))
        (n-fql (1- (nev my-model)))      ; n-fql - 1 , nmarkers - 2
        (my-fql (nth my-rank (fql-list my-model)))
        (my-ptl nil)
        (my-nev (length (the-list my-fql)))
        string1)
    (declare (special n-fql my-time my-dur my-nev my-fql my-ptl))
    (when  my-fql         ;to allow empty fql in models
      (when args-yaka-user (apply #'yaka-user args-yaka-user))
      (format outstream"(om::mk-array 'om::~a ~a ~%~%"
              (type-of self) my-nev ) 
      (if (get-gbl 'ctl2-print) (format t "~a~%" my-time))
      ; A FAIRE : GLOBALSLOTS loop sur (first(multiple-value-list (om::get-slot-in-out-names self)))
      (CTL2_global self ctl-model)
      ; KEYWORDS LOOP
      (CTL2_keywords_loop self ctl-model)
      ))
  (format  outstream ") ~%~%")
)



(defmethod CTL2_compute ((self om::class-array) (my-model model-partials) ctl-model my-rank outstream 
args-yaka-user )
  "ctl2 subroutine, process 1 ptl/fql"
  (declare (special outstream my-model  my-rank))
  (let*((my-time (get-nth-time my-model my-rank))
        (my-dur (get-nth-dur my-model my-rank))
        (n-fql (1- (nev my-model)))      ; n-fql - 1 , nmarkers - 2
        (my-ptl (nth my-rank (ptl-list my-model)))
        (my-fql my-ptl)
        (my-nev (length (the-list my-ptl)))
        string1)
    (declare (special  n-fql my-time my-dur my-nev my-fql my-ptl))
    (when my-ptl         ;to allow empty fql in models
 ;     (apply 'yaka-user args-yaka-user)
      (format outstream " (om::mk-array 'om::~a ~a ~% ~%"
              (type-of self) my-nev)
      (if (get-gbl 'ctl2-print) (format t "~a~%" my-time))
      (CTL2_global self ctl-model)
      ; KEYWORDS LOOP
      (CTL2_keywords_loop self ctl-model)
      ))
  (format  outstream ") ~%~%")
)

(defun CTL2_global(self ctl-model)
  (declare (special outstream my-model my-rank n-fql my-time my-dur my-nev my-fql my-ptl))
  (let((keywords (get-global-keywords self)))
  (format outstream" (list ~a " (+ (offset my-model) my-time))
  (loop for k in keywords  
       ; do (print k) 
        do (let* ((key k) (ex (assoc key ctl-model)))
             (declare (special key ex))
             (if ex 
               (case (length ex)
                 (2 (if(or(numberp (cadr ex))(symbolp (cadr ex)))(ctl2G-k)
                       (case (caadr ex)
                         (call (ctl2G-function))
                         (omfun (ctl2G-omfun))
                         (otherwise (ctl2G-kb))
                         )))
                 (4 (ctl2G-variable-constant-b))
                 (3 (ctl2G-variable-constant-a))
                 (0 nil)
                 (otherwise (error "UNKNOWN CTL2 (G-)STRUCTURE : ~a~%"ex)))
               (ctl2G-default-value self)))
        finally (format outstream" )~%")
        )))

(defun CTL2_keywords_loop (self ctl-model)
  (declare (special outstream my-model my-rank n-fql my-time my-dur my-nev my-fql my-ptl))
  (let((keywords (get-instance-keywords self)))
    ;(print ctl-model)
      (loop for k in keywords  
            ; do (print k) 
            do (let* ((key k) 
                      ;(ex (assoc key ctl-model))
                      ;;MODIF SLM mars 2005 
                      (ex (assoc key ctl-model :test #'(lambda (x y)(equal (symbol-name x)(symbol-name y)))))
                      )
                 (declare (special key ex))
                 (case (length ex)
                   (2 (if (or (numberp (cadr ex)) (symbolp (cadr ex)))
                        (ctl2N-k)
                        (cond ;(print (caadr ex))
                          ((equal 'MIN (caadr ex)) (ctl2N-constant-variable))
                          ((equal 'CALL (caadr ex)) (ctl2N-function))
                          (t (ctl2N-kb))
                          )))
                   (4 (if (member 'MIN (second ex) :test 'equal)
                        (if (member 'MIN-FUN (fourth ex) :test 'equal)
                          (ctl2N-variable-variable-b)
                          (ctl2N-variable-variable-ab)) 
                        (ctl2N-variable-constant-b)))
                   (3 (if (member 'MIN (second ex) :test 'equal)
                        (ctl2N-variable-variable-aa)
                        (ctl2N-variable-constant-a)))
                   (0 nil)
                   (otherwise (error "UNKNOWN CTL2 STRUCTURE : ~a~%"ex))))
            )))

(defun get-instance-keywords(o)
  "get-keywords in control synthesis object instance (class slots + instance specific controls)"
  (append (mapcar 
           #'(lambda (x) (read-from-string (om::name x )))
           (om::get-all-initargs-of-class (type-of o)))
          (mapcar #'car (om::lcontrols o))
          (list 'lprecision)))

(defun get-global-keywords(o)
  "get global controls in control synthesis object instance,
except numrows and action-time (amptot, durtot, etc)"
  (cddr (om::fixed-slots-list o)))

(defun ctl2N-k ()                        ; CONSTANT
  (declare (special key outstream ex my-nev))
  (format outstream ":~a '(~a )~%" key (eval(eval(cadr ex)))))

(defun ctl2G-k ()                        ; CONSTANT
  (declare (special outstream ex))
  (format outstream " ~a " (eval(eval(cadr ex)))))

(defun ctl2G-default-value (self)                        ; VALEUR PAR DEFAUT
  (declare (special key outstream ex ))
  (format outstream " ~a " (funcall key self)))

(defun ctl2N-kb ()                        ; FONCTION EVALUATION RETARDEE
  (declare (special key outstream ex my-nev))
  (let ((f (eval (cadr ex))))
    (if (numberp f)
      (format outstream ":~a '(~a )~%" key f)
      (format outstream ":~a #'~a ~%" key  f))
    ))

(defun ctl2G-kb ()                        ; FONCTION EVALUATION RETARDEE
  (declare (special outstream ex my-nev))
  (let ((f (eval(cadr ex))))
    (if(numberp f)
      (format outstream " ~a " f)
      (format outstream " ~a " (eval f)))))



(defun ctl2N-function ()                 ; HACK POUR TRAITER LES BPF, A REVOIR?
  (declare (special key outstream ex))
  (let ((result (eval(cdadr ex))))
    (if (numberp (car result))
      (format outstream ":~a '~a ~%" key result)
      (format outstream ":~a ~a ~%" key result))))
      

#|
(defun ctl2N-function ()                 ; USER-DEFINED-FUNCTION
  (declare (special key outstream ex))
  (format outstream ":~a '~a ~%" key (eval(cdadr ex))))

|#
(defun ctl2G-function ()                 ; USER-DEFINED-FUNCTION
  (declare (special outstream ex))
  (format outstream " ~a ~%"  (eval(cdadr ex)))
  (format t " ~a ~%"  (eval(cdadr ex))))

(defun ctl2G-omfun ()                 ; USER-fun global
  (declare (special outstream ex))
  (format outstream " ~a ~%"  (eval(cdadr ex)))
  (format t " ~s ~%"  (cdadr ex)))


(defun ctl2N-constant-variable ()                 
  (declare (special key outstream ex my-nev))
  (multiple-value-bind (min max fun expt) (ctl2-get-min-max (cadr ex))
    (format outstream ":~a '~a~%" key (lkpr my-nev fun (eval min) (eval max) expt))))

(defun ctl2N-variable-constant-a ()        ; CAS 3A
  (declare (special key outstream ex my-nev n-fql my-rank))
  (let((from (eval(second(second ex))))
       (to (eval (second(third ex))))
       (fun (copy-list ctl2-def-fun1))
       val)
    (resc_fun fun from to 0  n-fql)
    (setf val (apply 'y-val_fun (list fun my-rank)) )
    (format outstream ":~a '(~a)~%" key (eval val))))

(defun ctl2N-variable-constant-b ()        ; CAS 3B
  (declare (special key outstream ex my-nev n-fql my-rank my-model my-time))
  (let((from (eval(second(second ex))))
       (to (eval(second (third ex))))
       (fun (copy-list (eval (second (fourth ex)))))
       (by-time (member 'time (fourth ex)))
       (expnt (if (numberp(car(last(fourth ex))))(car(last(fourth ex))) 0))
       val)
    (if by-time
      (progn(resc_fun fun from to (begin-time my-model)(get-nth-time my-model n-fql))
            (setf val (apply 'y-val_fun (list fun my-time expnt))))
      (progn (resc_fun fun from to 0  n-fql)
             (setf val (apply 'y-val_fun (list fun my-rank expnt)))))
    (format outstream ":~a '(~a)~%" key (eval val))))

(defun ctl2G-variable-constant-a ()        ; CAS 3A
  (declare (special outstream ex my-nev n-fql my-rank))
  (let((from (eval(second(second ex))))
       (to (eval (second(third ex))))
       (fun (copy-list ctl2-def-fun1))
       val)
    (resc_fun fun from to 0  n-fql)
    (setf val (apply 'y-val_fun (list fun my-rank)) )
    (format outstream " ~a " (eval val))))

(defun ctl2G-variable-constant-b ()        ; CAS 3B
  (declare (special outstream ex my-nev n-fql my-rank my-model my-time))
  (let((from (eval(second(second ex))))
       (to (eval(second (third ex))))
       (fun (copy-list (eval (second (fourth ex)))))
       (by-time (member 'time (fourth ex)))
       (expnt (if (numberp(car(last(fourth ex))))(car(last(fourth ex))) 0))
       val)
    (if by-time
      (progn(resc_fun fun from to (begin-time my-model)(get-nth-time my-model n-fql))
            (setf val (apply 'y-val_fun (list fun my-time expnt))))
      (progn (resc_fun fun from to 0  n-fql)
             (setf val (apply 'y-val_fun (list fun my-rank expnt)))))
    (format outstream " ~a "  (eval val))))

(defun ctl2N-variable-variable-aa ()        ; CAS 4A
  (declare (special key outstream ex my-nev my-rank n-fql))
  (multiple-value-bind (from-min from-max from-fun from-expnt) (ctl2-get-min-max (second ex))
    (multiple-value-bind (to-min to-max to-fun to-expnt) (ctl2-get-min-max (third ex))
      (let* ((fun (copy-list ctl2-def-fun1))
             (from-list (lkpr my-nev from-fun from-min from-max from-expnt))
             (to-list (lkpr my-nev to-fun to-min to-max to-expnt)))
        (X-resc_fun fun 0  n-fql)
        (let ((val-list
              (mapcar (lambda (from to)
                        (let ((tmp-fun (copy-list fun)) ) 
                          (Y-resc_fun tmp-fun from to)
                          (y-val_fun tmp-fun my-rank)) )
                      from-list
                      to-list) ))           
        (format outstream ":~a '~a~%" key val-list))))))

(defun ctl2N-variable-variable-ab ()        ; CAS 4A
  (declare (special key outstream ex my-nev my-rank n-fql my-model my-time))
  (multiple-value-bind (from-min from-max from-fun from-expnt) (ctl2-get-min-max (second ex))
    (multiple-value-bind (to-min to-max to-fun to-expnt) (ctl2-get-min-max (third ex))
      (let* ((by-time (member 'time (fourth ex)))
             (fun (copy-list (eval (second (fourth ex)))))
             (expnt (if(numberp(car (last (fourth ex))))
                      (car (last (fourth ex)))
                      0))
             (from-list (lkpr my-nev from-fun (eval from-min) (eval from-max) from-expnt))
             (to-list (lkpr my-nev to-fun  (eval to-min)  (eval to-max) to-expnt)))
        (if by-time
          (progn (X-resc_fun fun (begin-time my-model)(get-nth-time my-model n-fql))
                 (let (( val-list (mapcar (lambda (from to)
                                            (let ((tmp-fun (copy-list fun)) ) 
                                              (Y-resc_fun tmp-fun from to)
                                              (y-val_fun tmp-fun my-time expnt)) )
                                          from-list
                                          to-list) ))
                   (format outstream ":~a ~a~%" key val-list)))
          (progn (X-resc_fun fun 0 n-fql)
                 (let (( val-list (mapcar (lambda (from to)
                                            (let ((tmp-fun (copy-list fun)) ) 
                                              (Y-resc_fun tmp-fun from to)
                                              (y-val_fun tmp-fun my-rank expnt)) )
                                          from-list
                                          to-list)))           
                   (format outstream ":~a '~a~%" key val-list))
                 ))))))


(defun ctl2N-variable-variable-b ()        ; CAS 4B
  (declare (special key outstream ex my-nev my-rank n-fql my-model my-time))
  (multiple-value-bind (from-min from-max from-fun from-expnt) (ctl2-get-min-max (second ex))
    (multiple-value-bind (to-min to-max) (ctl2-get-min-max (third ex))
      (multiple-value-bind (min-fun max-fun expnt-min expnt-max) (ctl2-get-min-max-fun (fourth ex))
        (let ((by-time (member 'time (fourth ex))))
          (if by-time
            (progn (resc_fun min-fun (eval from-min) (eval to-min) (begin-time my-model)(get-nth-time my-model n-fql))
                   (resc_fun max-fun (eval from-max) (eval to-max) (begin-time my-model)(get-nth-time my-model n-fql))
                   (let((val-min-l (apply 'y-val_fun (list min-fun my-time expnt-min)) )
                        (val-max-l (apply 'y-val_fun (list max-fun my-time expnt-max)) ))
                     (format outstream ":~a '~a~%" key (lkpr my-nev from-fun val-min-l val-max-l from-expnt))))
            (progn (resc_fun min-fun (eval from-min) (eval to-min) 0 n-fql)
                   (resc_fun max-fun (eval from-max) (eval to-max) 0 n-fql)
                   (let((val-min-l (apply 'y-val_fun (list min-fun my-rank expnt-min)) )
                        (val-max-l (apply 'y-val_fun (list max-fun my-rank expnt-max)) ))
                     (format outstream ":~a '~a~%" key (lkpr my-nev from-fun val-min-l val-max-l from-expnt))))
            ))))))
      

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun ctl2-get-min-max (ex)
  (let ((min (eval(second (member 'min ex))))
        (max (eval (second (member 'max ex))))
        (fun (eval (second (member 'fun ex))))
        (expt 0))
    (if(null fun)
      (setf fun (eval 'ctl2-def-fun1))
      (if (> (length (member 'fun ex)) 2)
        (setf expt (third (member 'fun ex)))))
    (if(not(and (numberp (eval min)) (numberp (eval max))))
      (error "UNKNOWN CTL2 STRUCTURE : ~a~%"ex)
      (values-list (list min max (copy-list fun) expt)))))

(defun ctl2-get-min-max-fun (ex) ;FOR CAS 4B
  (let* ((min-l (member 'min-fun ex))
         (min-fun (eval (second min-l)))
         (max-l (member 'max-fun ex))
         (max-fun (eval(second max-l)))
         (min-expt (third min-l))
         (max-expt 0))
    (if(not(numberp min-expt))(setf min-expt 0))
    (if (and (> (length max-l) 2) (numberp (third max-l)))
           (setf max-expt (third max-l)))
      (values-list (list (copy-list min-fun) (copy-list max-fun) min-expt max-expt))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun ctl2-result ())


;tests : 
#|
;Cf tests/Part-doc.lisp

(setf test2 (om::mk-array 'om::ad1m 13 '(50)
:durtot 1.522
:e-dels (lambda(x)0.008175375886588126)
:durs '(1.0 0.9416666666666667 0.8833333333333333 0.825 0.7666666666666667 0.7083333333333333 0.65 0.5916666666666667 0.5333333333333334 0.4750000000000001 0.41666666666666663 0.3583333333333334 0.30000000000000004)
:amp (cr::ran-from 0.0 1.0) ;???
:fq '(351.4393285303638 672.218 701.810942322059 988.0353671149467 1054.3424856362344 1320.1187320443166 1405.7238950969859 1756.597109530485 1760.445263444686 1972.8244152210725 2108.7279260581845 2457.191962153317 2464.827398139473) 
:bal '(1.0 0.9166666666666666 0.8333333333333334 0.75 0.6666666666666667 0.5833333333333333 0.5 0.41666666666666663 0.33333333333333337 0.25 0.16666666666666663 0.08333333333333337 0.0)
:jta #'(lambda (x) (cr::ran-from 0.0 1.0))
:tra #'(lambda (x) 0.050098247863535304)
;:trf ,(eval(lambda(x)6.659354169218529))
;:atk ,(eval(lambda(x)0.02252982837619228))
;:dec ,(eval(lambda(x)0.1717755443822137))
;:aenv ,(eval(lambda(x)(s_ve (nth (1- indp) '((fun 0.11771993130586163 0.0 0.1388513159212296 0.007884362680683314 0.16323000728189957 0.01576872536136663 0.19204367139433529 0.023653088042049936 0.22480191163625982 0.030223390275952694 0.2613063718792316 0.038107752956636 0.30126591590158497 0.04599211563731932 0.3442706503894442 0.05387647831800263 0.38855276158937685 0.06176084099868595 0.43186698028524195 0.0683311432325887 0.4701105526734307 0.07621550591327202 0.4984252094042599 0.08409986859395532 0.5154659707832392 0.09198423127463864 0.5235401583277138 0.09986859395532197 0.526865789697371 0.10643889618922468 0.528080340777724 0.114323258869908 0.5304567742721819 0.12220762155059132 0.5361669005949892 0.13009198423127463 0.546323648426584 0.13797634691195795 0.560660551647698 0.14586070959264127 0.5759038740540257 0.15243101182654403 0.5891148903295413 0.16031537450722733 0.6033231640745117 0.16819973718791065 0.6230171474290643 0.17608409986859397 0.6479626904362453 0.1839684625492773 0.6733641643115663 0.19053876478318005 0.6958249547006055 0.19842312746386334 0.7139207420333349 0.20630749014454663 0.7292895657917232 0.21419185282522996 0.7413102413009175 0.22207621550591328 0.7486003054796229 0.22864651773981606 0.7467925899308834 0.23653088042049936 0.7348522021921094 0.24441524310118265 0.7164732823911086 0.25229960578186594 0.6972684264076382 0.26018396846254926 0.6810829367676385 0.2667542706964521 0.6691138200458594 0.27463863337713534 0.6624452646825734 0.28252299605781866 0.662597815904146 0.290407358738502 0.6694991038056889 0.2982917214191853 0.6782659260153631 0.30486202365308807 0.6843054518075976 0.3127463863337714 0.690001444623353 0.3206307490144547 0.6991172209734079 0.328515111695138 0.7085165512385346 0.3363994743758213 0.7142495903992948 0.342969776609724 0.7140851472862815 0.3508541392904073 0.7116230389214862 0.35873850197109064 0.7094144004534071 0.36662286465177396 0.7049365033677196 0.3745072273324573 0.6951043398268062 0.38107752956636004 0.6832033701464026 0.38896189224704336 0.6705018801628415 0.3968462549277267 0.656220812167043 0.40473061760841 0.6392194778116691 0.41261498028909327 0.6202974559788138 0.4191852825229961 0.6005511459334332 0.4270696452036793 0.5802297599818738 0.4349540078843626 0.5576349685815803 0.44283837056504594 0.532966608010277 0.45072273324572926 0.5077500794115202 0.4586070959264126 0.4842838652278512 0.46517739816031534 0.46478274868746394 0.47306176084099866 0.4545691935849241 0.480946123521682 0.4670893874825567 0.4888304862023653 0.5137478294227364 0.4967148488830486 0.5929253245799998 0.5032851511169514 0.6936653481702569 0.5111695137976346 0.8018626778372011 0.5190538764783179 0.9007411421869567 0.5269382391590013 0.971851702940169 0.5348226018396846 1.0 0.5413929040735873 0.9841244007479659 0.5492772667542707 0.9333617518543019 0.557161629434954 0.8613903457724282 0.5650459921156373 0.778574185319996 0.5729303547963206 0.6962256190520183 0.5795006570302234 0.6271190593247361 0.5873850197109066 0.5826396016235754 0.59526938239159 0.567348616294413 0.6031537450722733 0.5794954094610607 0.6110381077529566 0.609747460186991 0.6176084099868594 0.6436503355554826 0.6254927726675427 0.6635902555061006 0.633377135348226 0.6533561749099596 0.6412614980289093 0.6122798963387083 0.6491458607095927 0.5550089671836455 0.6557161629434954 0.5031529229893184 0.6636005256241787 0.4754994292688974 0.6714848883048621 0.4843396236779466 0.6793692509855453 0.5266232148938975 0.6872536136662286 0.5818352110480717 0.6938239159001315 0.6322662499296876 0.7017082785808147 0.6669603248243566 0.7095926412614979 0.6855671507444046 0.7174770039421813 0.6905577442196836 0.7253613666228645 0.6830460748668277 0.7319316688567673 0.6637430704019089 0.7398160315374507 0.6390723090316752 0.747700394218134 0.6204403011913815 0.7555847568988173 0.6136206975096897 0.7634691195795006 0.6161692202002788 0.771353482260184 0.6233041235019452 0.7779237844940867 0.6315387453743855 0.78580814717477 0.6380430758579501 0.7936925098554534 0.6392194778116691 0.8015768725361366 0.6311026445054064 0.80946123521682 0.612209409068257 0.8160315374507228 0.5837138525505091 0.823915900131406 0.5509979715014843 0.8318002628120894 0.5154659707832392 0.8396846254927727 0.47973344863668904 0.8475689881734559 0.44853878262079333 0.8541392904073588 0.425402462944068 0.8620236530880421 0.41252474071673656 0.8699080157687253 0.40897805010288285 0.8777923784494086 0.4152885908707644 0.8856767411300919 0.4312707459615801 0.8922470433639946 0.45467387406113513 0.900131406044678 0.4796229986444583 0.9080157687253613 0.5041386568694884 0.9159001314060446 0.5258356178346689 0.9237844940867279 0.535056938173137 0.9303547963206307 0.5175472436920454 0.938239159001314 0.4633935665091667 0.9461235216819973 0.3821202031837347 0.9540078843626807 0.2872102929797834 0.961892247043364 0.19237560559808922 0.9684625492772667 0.17117880884710227 0.9763469119579501 0.19498445997580457 0.9842312746386334 0.2702402288471065 0.9921156373193167 0.3185664236573114 1.0) (fun 1.0 0.0 1.0 1.0) (fun 0.016762932645699266 0.0 0.024822756095975285 0.008010680907877167 0.03657631930094522 0.014686248331108138 0.05268051355233046 0.022696929238985305 0.07340911696603404 0.030707610146862484 0.09794899854086989 0.03871829105473965 0.12435120555305045 0.04672897196261683 0.15078217374157363 0.05340453938584779 0.17660378206861646 0.06141522029372497 0.20160439706643618 0.06942590120160212 0.22485368014916246 0.0774365821094793 0.24459636578675134 0.08544726301735647 0.2603154831374183 0.09212283044058744 0.2728035390028606 0.10013351134846461 0.2826832007002005 0.1081441922563418 0.2906363963519673 0.11615487316421895 0.2977830679629118 0.12416555407209613 0.3050352292820027 0.1321762349799733 0.3127879401103238 0.13885180240320427 0.3215140824832692 0.14686248331108143 0.33220028446165045 0.1548731642189586 0.34558111378369255 0.1628838451268358 0.3610355769506674 0.17089452603471295 0.37718116709840943 0.17757009345794394 0.39269014292065857 0.18558077436582107 0.4084134161710768 0.19359145527369825 0.4262358748180176 0.20160213618157544 0.4471466691624895 0.2096128170894526 0.46946151938259106 0.2162883845126836 0.48893373122997263 0.22429906542056077 0.5047775135009471 0.2323097463284379 0.5204751511705223 0.24032042723631508 0.5391380704697851 0.24833110814419226 0.5603379023654226 0.25500667556742324 0.5811657339622399 0.2630173564753004 0.5991009386113538 0.27102803738317754 0.6127735345213943 0.27903871829105475 0.6199404868138161 0.2870493991989319 0.6178741129854399 0.2937249666221629 0.6065966394687531 0.30173564753004006 0.5882338331675158 0.3097463284379172 0.5652622722956326 0.31775700934579443 0.5399455919544817 0.3257676902536716 0.5117996682024608 0.3324432576769025 0.47896083249778837 0.34045393858477974 0.4401999612629949 0.3484646194926569 0.3955487350555622 0.35647530040053405 0.34558111378369255 0.36448598130841126 0.2924152377843336 0.3711615487316422 0.24945947269429541 0.3791722296395194 0.25509385679684227 0.38718291054739656 0.2809635618966636 0.3951935914552738 0.3353513044505607 0.40320427236315093 0.41893823627331583 0.4098798397863819 0.5195172830110674 0.4178905206942589 0.614610534719524 0.4259012016021361 0.6802209444262807 0.4339118825100133 0.7169683755804198 0.4419225634178905 0.7276960206134615 0.44993324432576765 0.7045308260711934 0.45660881174899864 0.6604652919783514 0.4646194926568758 0.6091159894613383 0.47263017356475295 0.5646768716165367 0.48064085447263016 0.5411902950930492 0.4886515353805073 0.5490981746498419 0.4953271028037383 0.5907449258672259 0.5033377837116155 0.6571280412702895 0.5113484646194927 0.73248713266504 0.5193591455273698 0.8014012214056273 0.527369826435247 0.8538862102148431 0.534045393858478 0.8862372496202923 0.5420560747663552 0.8977388089599031 0.5500667556742324 0.8889963953045424 0.5580774365821095 0.8607955238694605 0.5660881174899867 0.8143291852092449 0.5727636849132177 0.7490313585107573 0.5807743658210948 0.6646606990710733 0.5887850467289719 0.563248443171473 0.5967957276368491 0.4528454411442196 0.6048064085447262 0.4080844064387934 0.6114819759679573 0.39012160295267584 0.6194926568758344 0.40169830574623583 0.6275033377837116 0.4359633689732719 0.6355140186915887 0.4837823279460009 0.6435246995994659 0.5472679310676924 0.650200267022697 0.6497555533053435 0.6582109479305741 0.746019191615241 0.6662216288384513 0.8245177320439843 0.6742323097463284 0.8762943267094363 0.6822429906542056 0.9012597997359385 0.6889185580774366 0.9103323996799096 0.6969292389853138 0.9169591742113975 0.7049399198931908 0.9315367652385741 0.712950600801068 0.9543331283085358 0.7209612817089451 0.9788136113351815 0.7276368491321762 0.9960932565980785 0.7356475300400533 1.0 0.7436582109479305 0.9902617403100915 0.7516688918558077 0.9664958643142137 0.7596795727636848 0.9281111710201684 0.7676902536715621 0.8745809230752016 0.774365821094793 0.8051930173083077 0.7823765020026702 0.7193661531469768 0.7903871829105473 0.6568254922937092 0.7983978638184245 0.6373089243130631 0.8064085447263017 0.6262532605365421 0.8130841121495327 0.6354772390486157 0.8210947930574098 0.6678824013665394 0.829105473965287 0.7088429103095243 0.8371161548731643 0.7397755950744067 0.8451268357810414 0.75866491452756 0.8518024032042724 0.8260379495771786 0.8598130841121495 0.8764961241667112 0.8678237650200268 0.9053155916484846 0.8758344459279037 0.9089709421888024 0.883845126835781 0.8899180181293546 0.8905206942590119 0.851432061639329 0.8985313751668891 0.7876803293160122 0.9065420560747662 0.6943045318761357 0.9145527369826435 0.5743147892563522 0.9225634178905207 0.45687774118581764 0.9292389853137516 0.389852209552348 0.9372496662216288 0.3407610909715104 0.9452603471295059 0.33651156937549076 0.9532710280373832 0.4020684539919128 0.9612817089452603 0.5591135275705601 0.9679572763684913 0.7725916320765036 0.9759679572763684 0.9111712330429194 0.9839786381842457 0.8393633456800419 0.9919893190921228 0.640398048774988 1.0) (fun 1.0 0.0 0.9047946000698555 1.0) (fun 0.025182567110425953 0.0 0.03555494408585928 0.008196721311475417 0.04808947103123458 0.016393442622950824 0.06177318585915198 0.024590163934426243 0.07506716248801064 0.031420765027322405 0.08584203408875203 0.039617486338797823 0.09253371534777771 0.04781420765027322 0.09531253049976039 0.05601092896174864 0.09609482495282769 0.06420765027322406 0.0970845227407013 0.07103825136612021 0.09975852059697175 0.07923497267759563 0.10470079998610848 0.08743169398907104 0.11218892845893653 0.09562841530054646 0.12246161992650485 0.10382513661202188 0.13570629696239855 0.1120218579234973 0.1521598249619052 0.11885245901639348 0.17169197641726064 0.12704918032786885 0.19348620208920453 0.13524590163934427 0.21692020190687178 0.1434426229508197 0.24146267078852707 0.1516393442622951 0.2661950651151837 0.1584699453551913 0.2903354055515314 0.16666666666666666 0.31350899078017397 0.17486338797814208 0.3348497661709637 0.1830601092896175 0.3530612057103412 0.19125683060109291 0.3677900704223863 0.1980874316939891 0.3794897062076349 0.20628415300546452 0.3907959011615317 0.2144808743169399 0.4049953156435086 0.22267759562841533 0.42491298208111966 0.23087431693989074 0.45196000003048253 0.2377049180327869 0.4854002548344869 0.24590163934426232 0.5240829125640291 0.2540983606557377 0.5671526948608319 0.26229508196721313 0.6138326711947667 0.27049180327868855 0.6623690022431074 0.27732240437158473 0.7112135136533291 0.28551912568306015 0.75866491452756 0.29371584699453557 0.8039888021605364 0.301912568306011 0.8498651094804235 0.3101092896174864 0.8960866351362812 0.3169398907103825 0.9385339777345622 0.3251366120218579 0.9726352385606399 0.3333333333333333 0.9941456121207936 0.34153005464480873 1.0 0.34972677595628415 0.9908319448927676 0.35655737704918034 0.9695048812495897 0.36475409836065575 0.9334692152830848 0.3729508196721312 0.8782132798980061 0.3811475409836066 0.8036186368746274 0.389344262295082 0.7149900531600004 0.3961748633879782 0.6187995653851169 0.40437158469945356 0.5175472436920453 0.412568306010929 0.41214496630877545 0.4207650273224044 0.3072911126870543 0.4289617486338798 0.2146347317723982 0.43715846994535523 0.15597320632803235 0.4439890710382514 0.15774296509447575 0.45218579234972683 0.2095800791321692 0.46038251366120225 0.2779713267759289 0.4685792349726776 0.3415073066688273 0.47677595628415304 0.38428196254815034 0.4836065573770492 0.3942302995422326 0.4918032786885246 0.3672823004980847 0.5 0.3549768244672091 0.5081967213114754 0.33604698246069936 0.5163934426229508 0.32839761925047994 0.523224043715847 0.3434393076780824 0.5314207650273224 0.36349630454608134 0.5396174863387978 0.4776942349118993 0.5478142076502732 0.5702955725720631 0.5560109289617486 0.6299411805485585 0.5628415300546449 0.6793600430398661 0.5710382513661202 0.7354446617972703 0.5792349726775956 0.7928663748785477 0.587431693989071 0.8332973486343167 0.5956284153005464 0.8394599865193973 0.6024590163934427 0.8033411247579729 0.6106557377049181 0.7294575102545686 0.6188524590163935 0.6340156819565838 0.6270491803278689 0.5475200153037679 0.6352459016393444 0.5010141595798795 0.6420765027322405 0.49980431357823923 0.6502732240437159 0.5173089592496279 0.6584699453551913 0.5218551815786965 0.6666666666666667 0.4955642855622973 0.6748633879781422 0.44121472697558833 0.6816939890710383 0.38264848659510947 0.6898907103825137 0.3522086356184676 0.6980874316939889 0.3685106130579166 0.7062841530054643 0.4153842256125614 0.7144808743169397 0.4675736191881125 0.721311475409836 0.5117407484798877 0.7295081967213114 0.544690749877488 0.7377049180327868 0.568983929152867 0.7459016393442622 0.58627314335345 0.7540983606557377 0.5978606913524929 0.7622950819672131 0.6063173557052516 0.7691256830601092 0.615318538728811 0.7773224043715846 0.6251007212526326 0.78551912568306 0.6334320007697664 0.7937158469945355 0.6329217205371852 0.8019125683060109 0.6127735345213943 0.8087431693989071 0.5661741020834876 0.8169398907103825 0.4966494970453982 0.825136612021858 0.41419037262210084 0.8333333333333334 0.33381050516598926 0.8415300546448088 0.3013699874341146 0.8483606557377049 0.29440826642437185 0.8565573770491803 0.32325853471149674 0.8647540983606558 0.3839281887246379 0.8729508196721311 0.43964283528788894 0.8811475409836065 0.49220950946819775 0.8879781420765026 0.5503639766705499 0.896174863387978 0.6139740276642356 0.9043715846994534 0.6799077632231368 0.9125683060109289 0.744989239642859 0.9207650273224043 0.8054711691564607 0.9275956284153005 0.843237670851073 0.9357923497267759 0.8411045842389994 0.9439890710382514 0.8029712576698625 0.9521857923497268 0.7390945502523305 0.9603825136612022 0.6597812965139568 0.9672131147540983 0.5718735365066646 0.9754098360655737 0.469137338834597 0.9836065573770492 0.3545275586178803 0.9918032786885246 0.25029374704692264 1.0) (fun 0.7417370966256945 0.0 0.8604982669656575 0.5 1.0 1.0) (fun 0.13597216105372398 0.0 0.16875241628414525 0.008608321377331427 0.19783357541433957 0.017216642754662854 0.22179410551999906 0.024390243902439025 0.2402979135810349 0.03299856527977045 0.2522609343598297 0.041606886657101876 0.25786951295658733 0.05021520803443329 0.26010577815705993 0.05882352941176471 0.26230103243087666 0.06743185078909614 0.26711605988438153 0.07460545193687233 0.2758036440597237 0.08321377331420372 0.28740875936150206 0.09182209469153514 0.3008153543944214 0.10043041606886657 0.3142317036434843 0.10903873744619799 0.325199597952671 0.11621233859397419 0.3346185400188486 0.12482065997130558 0.3437557726853155 0.133428981348637 0.35314251041745054 0.14203730272596843 0.3632452968993704 0.15064562410329985 0.3742398238085079 0.15781922525107606 0.38366307210597483 0.16642754662840747 0.38980732874163554 0.17503586800573886 0.3941395351111817 0.18364418938307028 0.3991167918200921 0.19225251076040173 0.40569532203604486 0.1994261119081779 0.40448274537999956 0.20803443328550933 0.3831775003613842 0.21664275466284072 0.4003593726009541 0.22525107604017214 0.41917946593256383 0.23385939741750358 0.4421809210742687 0.24103299856527977 0.4763761388183771 0.24964131994261118 0.5212547193179814 0.2582496413199426 0.5678060295486643 0.266857962697274 0.611857094417516 0.2754662840746055 0.6505040428134297 0.2826398852223816 0.6781097674934342 0.291248206599713 0.6856460841231651 0.29985652797704443 0.658794553441924 0.30846484935437585 0.5957993155981374 0.31707317073170727 0.5551367774352112 0.3242467718794835 0.486183258464984 0.3328550932568149 0.39459356633146425 0.3414634146341463 0.2919779130047965 0.3500717360114778 0.20466802559334538 0.35868005738880915 0.22328009075239721 0.36585365853658536 0.29073679594442287 0.3744619799139168 0.40031328217802337 0.3830703012912482 0.48764076061188233 0.3916786226685796 0.5388898453732869 0.40028694404591103 0.5558402601116503 0.40889526542324245 0.5486558320717438 0.41606886657101866 0.5311289818550129 0.4246771879483501 0.5109754090546756 0.4332855093256815 0.499804313578239 0.44189383070301297 0.46768129438874423 0.4505021520803444 0.46521102661790703 0.45767575322812054 0.48730402662523464 0.46628407460545185 0.53186327077268 0.47489239598278327 0.5833107765394218 0.4835007173601147 0.7073754773281771 0.4921090387374461 0.8302330159249539 0.4992826398852223 0.8926886232467878 0.5078909612625537 0.9088662990655876 0.5164992826398852 0.890327934901441 0.5251076040172166 0.9133768500077153 0.533715925394548 0.9863930417899601 0.5408895265423243 1.0 0.5494978479196556 0.9764499780697701 0.5581061692969871 0.9434089673230402 0.5667144906743184 0.9184383295173003 0.5753228120516499 0.906149802231997 0.5824964131994261 0.9035454432205192 0.5911047345767575 0.9031294409622503 0.599713055954089 0.8913535530968372 0.6083213773314203 0.8607955238694607 0.6169296987087518 0.8128305161640991 0.624103299856528 0.7625178242562248 0.6327116212338594 0.7261059574351546 0.6413199426111909 0.7155664993124723 0.6499282639885223 0.7339221583808141 0.6585365853658537 0.7753539433595974 0.6657101865136299 0.8326260608491184 0.6743185078909614 0.8920721887252689 0.6829268292682926 0.9348673663095685 0.691535150645624 0.9395069561856673 0.7001434720229555 0.8982557377294164 0.7073170731707317 0.8243279016759804 0.715925394548063 0.7474807281756635 0.7245337159253945 0.6927076757651083 0.7331420373027259 0.6691138200458591 0.7417503586800573 0.6711969896594616 0.7503586800573888 0.6881767564552987 0.7575322812051649 0.7126068619266087 0.7661406025824964 0.7395201297556367 0.7747489239598279 0.7666550486891741 0.7833572453371592 0.7928663748785477 0.7919655667144907 0.8074209243845895 0.7991391678622669 0.7979028200228219 0.8077474892395983 0.7563102739061051 0.8163558106169297 0.6806909867364255 0.8249641319942611 0.5797623384172633 0.8335724533715926 0.4743511960856962 0.8407460545193688 0.39007669112868715 0.8493543758967002 0.34785640153042374 0.8579626972740316 0.3492207172634068 0.8665710186513629 0.3698281797802662 0.8751793400286944 0.38570032072575483 0.8823529411764705 0.3906159744310885 0.8909612625538019 0.38507914600171017 0.8995695839311334 0.3674937860501915 0.9081779053084648 0.33342641276323487 0.9167862266857962 0.27701290391637323 0.9239598278335724 0.19888407051736498 0.9325681492109038 0.15050467837428153 0.9411764705882353 0.13775266196051708 0.9497847919655666 0.14714652151199253 0.9583931133428981 0.19116131087399776 0.9655667144906743 0.23993853343082025 0.9741750358680057 0.2853645362004965 0.9827833572453372 0.32277508190480525 0.9913916786226685 0.33985995846566713 1.0) (fun 0.1558116763173093 0.0 0.23396451839426324 0.020618556701030948 0.30408850256762787 0.04123711340206185 0.3491403154785861 0.06185567010309279 0.3646279871292259 0.08247422680412374 0.36320347914635287 0.09965635738831614 0.36132665452345186 0.1202749140893471 0.3644181507888609 0.14089347079037803 0.36838335597906513 0.16151202749140894 0.37072340043452146 0.18213058419243988 0.3755778746557724 0.20274914089347085 0.394184914714297 0.2199312714776633 0.43486053918060763 0.24054982817869414 0.49779439237735684 0.2611683848797251 0.5704925797046321 0.28178694158075607 0.6354772390486161 0.302405498281787 0.6774854928498457 0.31958762886597947 0.6887315849339974 0.3402061855670103 0.6763165265096241 0.36082474226804123 0.6595534554762769 0.3814432989690722 0.6786564796675377 0.40206185567010316 0.710068096254533 0.4192439862542956 0.7320656005152645 0.4398625429553265 0.754483940371636 0.4604810996563575 0.773036499601133 0.4810996563573884 0.776068399701105 0.5017182130584193 0.7726805850957026 0.5189003436426118 0.7701937676097963 0.5395189003436427 0.7660374466165298 0.5601374570446735 0.7504123968558 0.5807560137457044 0.7112135136533289 0.6013745704467354 0.6466212905170257 0.6185567010309279 0.574579331899357 0.6391752577319588 0.5210147279130151 0.6597938144329898 0.5046612975635282 0.6804123711340206 0.5341952229293112 0.7010309278350516 0.5988251059509566 0.7182130584192439 0.6691138200458595 0.7388316151202748 0.7238523688611771 0.7594501718213058 0.7564844408332819 0.7800687285223368 0.768776324173842 0.8006872852233677 0.778932814553672 0.8178694158075601 0.8051003213724854 0.8384879725085911 0.8717661466018494 0.859106529209622 0.9674978308613711 0.879725085910653 1.0 0.900343642611684 0.9242724327301168 0.9175257731958764 0.7268587116950582 0.9381443298969071 0.44822904999662033 0.9587628865979381 0.36970046770856957 0.979381443298969 0.278804641783178 1.0) (fun 0.213648574758037 0.0 0.3839723926353776 0.023437500000000014 0.5866107264584334 0.04687500000000003 0.7670081876935103 0.07031250000000004 0.8922776195878271 0.08984375000000006 0.9674978308613711 0.11328125000000007 1.0 0.13671875000000008 0.9744285500754779 0.1601562500000001 0.8746816187214023 0.1835937500000001 0.7119508289123783 0.20312500000000014 0.5257145536477342 0.22656249999999992 0.47162845529983805 0.24999999999999994 0.5364756319246504 0.27343749999999994 0.6041572618705018 0.296875 0.6412834028154865 0.31640625 0.6290714855478365 0.33984375 0.5727960309858292 0.36328125 0.5348721679641976 0.38671875000000006 0.5086862516043108 0.41015625000000006 0.48567975412085945 0.42968750000000006 0.4579836774360569 0.45312500000000006 0.4151451800405688 0.4765625000000001 0.3673245878697973 0.5000000000000001 0.375361736867337 0.5234375000000001 0.4728789695812791 0.5429687500000001 0.5885725452612014 0.5664062500000001 0.7805486914662378 0.5898437499999998 0.866263468498932 0.6132812499999998 0.8432376708510736 0.6367187499999998 0.7664785401625911 0.6562499999999998 0.6983931965408848 0.6796874999999998 0.6720475466282964 0.7031249999999998 0.6832820313691987 0.7265624999999998 0.6975092959846152 0.7499999999999999 0.678031701715246 0.7734374999999999 0.607924995159307 0.7929687499999999 0.5135112942724304 0.8164062499999999 0.529297691687475 0.8398437499999999 0.5380839028218377 0.8632812499999999 0.5591135275705602 0.8867187499999999 0.5633781508509386 0.9062499999999999 0.5030949987027737 0.9296875 0.40234628899023117 0.953125 0.2902685610499055 0.9765625 0.1899765515036041 1.0) (fun 0.5051844800793296 0.0 0.7664785401625908 0.5 1.0 1.0) (fun 0.08169585080397143 0.0 0.08557560929880442 0.008823529411764713 0.0858618022233598 0.017647058823529425 0.08838936217394064 0.026470588235294117 0.10069316688518042 0.03529411764705883 0.1244801204844673 0.044117647058823546 0.1536207920677289 0.051470588235294136 0.17864875748520492 0.06029411764705881 0.19333033344966086 0.06911764705882352 0.19778802779423996 0.07794117647058824 0.1956816041739257 0.08676470588235295 0.19233131457730654 0.09411764705882354 0.19213213114037245 0.10294117647058822 0.19563655200647279 0.11176470588235293 0.19954920412558871 0.12058823529411765 0.1982668012823799 0.12941176470588237 0.19080950285281928 0.13676470588235295 0.18173978083953815 0.14558823529411766 0.1808214718539546 0.15441176470588233 0.19765144784340327 0.16323529411764706 0.2351527164403597 0.17205882352941176 0.28870213794352123 0.17941176470588235 0.35196542252476565 0.18823529411764706 0.42242537666910646 0.19705882352941176 0.5074578790806497 0.2058823529411765 0.6146105347195238 0.2147058823529412 0.7308024590091093 0.22205882352941178 0.83281780215888 0.23088235294117648 0.9052113693388287 0.2397058823529412 0.9447132357271357 0.24852941176470592 0.9608376226408694 0.2573529411764706 0.9663845987708156 0.2647058823529411 0.9660508789898132 0.27352941176470585 0.966273346036599 0.2823529411764706 0.9737556711103179 0.2911764705882353 0.9874156357468652 0.3 1.0 0.3073529411764706 0.9938023056811176 0.3161764705882353 0.9423234526030676 0.325 0.8234742057244017 0.33382352941176474 0.6370155002758788 0.34264705882352947 0.41797470506759515 0.35000000000000003 0.31882326134115363 0.35882352941176465 0.35925266624766145 0.3676470588235294 0.512448233051742 0.3764705882352941 0.5998601337302557 0.3852941176470588 0.5875569936347081 0.3941176470588235 0.4920961870875065 0.40147058823529413 0.35784915826417585 0.4102941176470588 0.22664701308923627 0.41911764705882354 0.1573620483240466 0.42794117647058827 0.14131881920070608 0.43676470588235294 0.14484382999007053 0.44411764705882356 0.16809314389526891 0.4529411764705882 0.21742025461617315 0.4617647058823529 0.29860701078165264 0.47058823529411764 0.4095906177925278 0.4794117647058823 0.5250491986747624 0.48676470588235293 0.5979983697142511 0.49558823529411766 0.5855311442043992 0.5044117647058823 0.6409143566447761 0.5132352941176471 0.6578850235567169 0.5220588235294118 0.6578850235567169 0.5294117647058824 0.6847783165702132 0.538235294117647 0.7280312141905698 0.5470588235294117 0.747308634191276 0.5558823529411764 0.7191177357825091 0.5647058823529412 0.6432799272608505 0.5720588235294117 0.5355499708401134 0.5808823529411764 0.4051352202292636 0.5897058823529412 0.33346480210744267 0.5985294117647059 0.30012349827811824 0.6073529411764705 0.3348112173860537 0.6147058823529412 0.43792526354192585 0.6235294117647059 0.5824383997827093 0.6323529411764706 0.6485597610479408 0.6411764705882353 0.6666532489563033 0.65 0.6719701787489022 0.6573529411764706 0.667574900964306 0.6661764705882354 0.6300862465664395 0.6749999999999999 0.5506808828468289 0.6838235294117646 0.4483322704327331 0.6926470588235293 0.35706723455726286 0.7 0.3109925604656835 0.7088235294117646 0.3304075784253993 0.7176470588235293 0.4007282870755454 0.7264705882352941 0.490907876152603 0.7352941176470588 0.5825054593417399 0.7441176470588234 0.6640488057745737 0.7514705882352941 0.7234358058506349 0.7602941176470588 0.7445605127727998 0.7691176470588235 0.7157312835586682 0.7779411764705882 0.6291439142483398 0.7867647058823529 0.48294758644477076 0.7941176470588235 0.39151643724918317 0.8029411764705883 0.32062693245054646 0.8117647058823529 0.3518438789655299 0.8205882352941176 0.45143996126695024 0.8294117647058824 0.5343797592893369 0.836764705882353 0.612279896338708 0.8455882352941176 0.641652661487405 0.8544117647058824 0.6373089243130631 0.863235294117647 0.6207975581554899 0.8720588235294117 0.5945659032958388 0.8794117647058822 0.5492246237344257 0.888235294117647 0.48266965946794854 0.8970588235294117 0.4070521003475676 0.9058823529411764 0.3864114617568548 0.9147058823529411 0.379839390154507 0.9220588235294117 0.39151643724918317 0.9308823529411764 0.41167073992002257 0.9397058823529412 0.4329123745028264 0.9485294117647058 0.4451434629201127 0.9573529411764705 0.43226492770705466 0.9647058823529412 0.3794897062076349 0.9735294117647059 0.28840315031266045 0.9823529411764705 0.21597326806893935 0.9911764705882353 0.14755366460623187 1.0) (fun 0.1376258454802492 0.0 0.16846124267740503 0.015189873417721532 0.19918195925626767 0.030379746835443065 0.22077505417124318 0.04303797468354434 0.27415741719278824 0.05822784810126573 0.302064717004684 0.07341772151898726 0.34753616144320576 0.08860759493670879 0.400036851046125 0.10379746835443032 0.44714666916248946 0.1164556962025316 0.5831093429229813 0.13164556962025314 0.7648917910070716 0.14683544303797466 0.8298507675144225 0.1620253164556962 0.9150609029368791 0.17721518987341772 0.9845777111534952 0.189873417721519 1.0 0.2050632911392404 0.9980447167327117 0.22025316455696192 0.9849178309808171 0.23544303797468347 0.9486368698664692 0.250632911392405 0.8821653593307567 0.2632911392405063 0.7877710195856802 0.2784810126582278 0.6741398498898497 0.2936708860759493 0.5528406895630934 0.30886075949367087 0.43176755068584066 0.3240506329113924 0.3101344423451253 0.3367088607594937 0.18816983322745912 0.3518987341772152 0.13055695126910993 0.3670886075949367 0.13162852053971555 0.38227848101265827 0.17844319885403664 0.3974683544303798 0.2897010037894646 0.4101265822784811 0.39710010326389067 0.42531645569620263 0.49842520940425994 0.44050632911392384 0.5836466538780768 0.4556962025316454 0.6446886138515715 0.47088607594936693 0.6763165265096238 0.4835443037974682 0.6748387308707571 0.49873417721518976 0.6435021466502404 0.5139240506329112 0.5966917043465219 0.5291139240506328 0.5608542303871741 0.5443037974683543 0.5544980203697426 0.5594936708860758 0.5737860693092911 0.5721518987341772 0.597035286583837 0.5873417721518986 0.6148936385126265 0.6025316455696202 0.6304490577815439 0.6177215189873417 0.6332861644521973 0.6329113924050632 0.6045747430983106 0.6455696202531646 0.5292976916874751 0.660759493670886 0.41461976390337274 0.6759493670886076 0.28119008303989407 0.6911392405063291 0.17260365978585646 0.7063291139240506 0.14439428347838817 0.718987341772152 0.13158306550959187 0.7341772151898734 0.2263862262221746 0.749367088607595 0.3457402964182392 0.7645569620253163 0.4538893576985485 0.7797468354430378 0.535920043457775 0.792405063291139 0.5847900841444806 0.8075949367088606 0.6006202909194727 0.8227848101265821 0.5868809328938158 0.8379746835443037 0.5477091546789038 0.8531645569620252 0.48500922603481944 0.8658227848101264 0.39902490236214205 0.881012658227848 0.29258361398412164 0.8962025316455695 0.2021389474628338 0.9113924050632911 0.14193843093800262 0.9265822784810126 0.17914306484060255 0.9696202531645569 0.22143690360730203 0.9848101265822785 0.2395796907554858 1.0) (fun 0.16782242798796432 0.0 0.2019761083435602 0.02955665024630545 0.22940347906697442 0.05418719211822665 0.25255152774022926 0.08374384236453196 0.2761849442075293 0.11330049261083741 0.3017866332008688 0.14285714285714285 0.3259492604487893 0.17241379310344832 0.34494511580250564 0.19704433497536952 0.36454403809782104 0.22660098522167496 0.39523008885474487 0.25615763546798026 0.4382278761036722 0.2857142857142857 0.48797772728648575 0.31527093596059114 0.5297854174488645 0.33990147783251234 0.55571228789586 0.36945812807881784 0.5788286246212775 0.3990147783251231 0.6171631684555837 0.42857142857142855 0.6843842399195383 0.45812807881773404 0.7831591024770276 0.48275862068965525 0.8875646565663144 0.5123152709359606 0.964606091122817 0.5418719211822661 1.0 0.5714285714285716 0.9951762431696443 0.600985221674877 0.9615015750515107 0.6256157635467979 0.9204495717531712 0.6551724137931034 0.8825717050493248 0.6847290640394088 0.8419765576091762 0.7142857142857143 0.7897688493998857 0.7438423645320197 0.8131113063665055 0.768472906403941 0.840233513907692 0.7980295566502464 0.8192189693228674 0.8275862068965518 0.7520556874920593 0.8571428571428573 0.6458772686204609 0.8866995073891627 0.5220354551033098 0.911330049261084 0.4023462889902312 0.9408866995073891 0.29964014599344435 0.9704433497536945 0.21020836776606155 1.0))))))
;:jtv ,(eval(lambda(x)0.10167589607029388))
;:vfq ,(eval(lambda(x)0.06867764968178729))
;:fdev ,(eval(lambda(x)6.874006763797266))
;:fenv ,(eval(lambda(x)6.18371069558656))
:pamp (eval(lambda(x)(list 1.2197197937953903 0.5645609333926193 0.51986576417222 0.3443032664049853 0.471122439503023 0.5235254215707046 0.17518707772629866 1.359231305899402 0.4222197236695785 0.14321365955948692 0.09296944149446013 0.015332076858687491 0.0)))
:penv (list (cr::fun->bpf (list 'cr::fun 0.0 0 1 1 0.0 4))(cr::fun->bpf(list 'cr::fun 1.1 0 0.2 1 1.24 4 0.24 5 1.24 6)))
:pdur '( 1.522 1.522 1.522 1.522 1.522 1.522 1.522 1.522 1.522 1.522 1.522 1.522 1.522)
:npart (eval(lambda(x)1))
:dur2 '(1.0 0.925 0.85 0.775 0.7 0.625 0.55 0.475 0.4 0.32499999999999996 0.25 0.17500000000000004 0.09999999999999998)
:amp2 '(0.39296149737315234 0.5615649583575097 0.9187556016660626 0.09271499943479923 0.7802791460505627 0.021362397897274264 0.12339569261396191 0.10695473105661603 0.10720128717525924 0.02941033693747308 0.1694727981062989 0.10502676773407099 0.08985660378539741) 
:ston (eval(lambda(x)0.06418527702649177))
:pflag '(0 ))
)
|#